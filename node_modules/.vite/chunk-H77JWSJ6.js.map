{
  "version": 3,
  "sources": ["../tslib/tslib.es6.js", "../graphql/version.mjs", "../graphql/jsutils/devAssert.mjs", "../graphql/jsutils/isObjectLike.mjs", "../graphql/jsutils/invariant.mjs", "../graphql/language/location.mjs", "../graphql/language/printLocation.mjs", "../graphql/error/GraphQLError.mjs", "../graphql/error/syntaxError.mjs", "../graphql/language/ast.mjs", "../graphql/language/directiveLocation.mjs", "../graphql/language/kinds.mjs", "../graphql/language/characterClasses.mjs", "../graphql/language/blockString.mjs", "../graphql/language/tokenKind.mjs", "../graphql/language/lexer.mjs", "../graphql/jsutils/inspect.mjs", "../graphql/jsutils/instanceOf.mjs", "../graphql/language/source.mjs", "../graphql/language/parser.mjs", "../graphql/jsutils/didYouMean.mjs", "../graphql/jsutils/identityFunc.mjs", "../graphql/jsutils/keyMap.mjs", "../graphql/jsutils/keyValMap.mjs", "../graphql/jsutils/mapValue.mjs", "../graphql/jsutils/naturalCompare.mjs", "../graphql/jsutils/suggestionList.mjs", "../graphql/jsutils/toObjMap.mjs", "../graphql/language/printString.mjs", "../graphql/language/visitor.mjs", "../graphql/language/printer.mjs", "../graphql/utilities/valueFromASTUntyped.mjs", "../graphql/type/assertName.mjs", "../graphql/type/definition.mjs", "../graphql/utilities/typeComparators.mjs", "../graphql/type/scalars.mjs", "../graphql/type/directives.mjs", "../graphql/jsutils/isIterableObject.mjs", "../graphql/utilities/astFromValue.mjs", "../graphql/type/introspection.mjs", "../graphql/type/schema.mjs", "../graphql/utilities/typeFromAST.mjs", "../graphql/utilities/TypeInfo.mjs", "../graphql/language/predicates.mjs", "../graphql/validation/rules/ExecutableDefinitionsRule.mjs", "../graphql/validation/rules/FieldsOnCorrectTypeRule.mjs", "../graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs", "../graphql/validation/rules/KnownArgumentNamesRule.mjs", "../graphql/validation/rules/KnownDirectivesRule.mjs", "../graphql/validation/rules/KnownFragmentNamesRule.mjs", "../graphql/validation/rules/KnownTypeNamesRule.mjs", "../graphql/validation/rules/LoneAnonymousOperationRule.mjs", "../graphql/validation/rules/LoneSchemaDefinitionRule.mjs", "../graphql/validation/rules/NoFragmentCyclesRule.mjs", "../graphql/validation/rules/NoUndefinedVariablesRule.mjs", "../graphql/validation/rules/NoUnusedFragmentsRule.mjs", "../graphql/validation/rules/NoUnusedVariablesRule.mjs", "../graphql/utilities/sortValueNode.mjs", "../graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs", "../graphql/validation/rules/PossibleFragmentSpreadsRule.mjs", "../graphql/validation/rules/PossibleTypeExtensionsRule.mjs", "../graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs", "../graphql/validation/rules/ScalarLeafsRule.mjs", "../graphql/utilities/valueFromAST.mjs", "../graphql/execution/values.mjs", "../graphql/execution/collectFields.mjs", "../graphql/validation/rules/SingleFieldSubscriptionsRule.mjs", "../graphql/jsutils/groupBy.mjs", "../graphql/validation/rules/UniqueArgumentDefinitionNamesRule.mjs", "../graphql/validation/rules/UniqueArgumentNamesRule.mjs", "../graphql/validation/rules/UniqueDirectiveNamesRule.mjs", "../graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs", "../graphql/validation/rules/UniqueEnumValueNamesRule.mjs", "../graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs", "../graphql/validation/rules/UniqueFragmentNamesRule.mjs", "../graphql/validation/rules/UniqueInputFieldNamesRule.mjs", "../graphql/validation/rules/UniqueOperationNamesRule.mjs", "../graphql/validation/rules/UniqueOperationTypesRule.mjs", "../graphql/validation/rules/UniqueTypeNamesRule.mjs", "../graphql/validation/rules/UniqueVariableNamesRule.mjs", "../graphql/validation/rules/ValuesOfCorrectTypeRule.mjs", "../graphql/validation/rules/VariablesAreInputTypesRule.mjs", "../graphql/validation/rules/VariablesInAllowedPositionRule.mjs", "../graphql/validation/specifiedRules.mjs", "../graphql/validation/ValidationContext.mjs", "../graphql/jsutils/memoize3.mjs", "../graphql/execution/execute.mjs", "../graphql/utilities/extendSchema.mjs", "../graphql/utilities/findBreakingChanges.mjs", "../graphql-tag/src/index.ts"],
  "sourcesContent": ["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n", "// Note: This file is autogenerated using \"resources/gen-version.js\" script and\n// automatically updated by \"npm version\" command.\n\n/**\n * A string containing the version of the GraphQL.js library\n */\nexport const version = '16.3.0';\n/**\n * An object containing the components of the GraphQL.js version string\n */\n\nexport const versionInfo = Object.freeze({\n  major: 16,\n  minor: 3,\n  patch: 0,\n  preReleaseTag: null,\n});\n", "export function devAssert(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n", "/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport function isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n", "export function invariant(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(\n      message != null ? message : 'Unexpected invariant triggered.',\n    );\n  }\n}\n", "import { invariant } from '../jsutils/invariant.mjs';\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || invariant(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n", "import { getLocation } from './location.mjs';\n\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\nexport function printLocation(location) {\n  return printSourceLocation(\n    location.source,\n    getLocation(location.source, location.start),\n  );\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return (\n      locationStr +\n      printPrefixedLines([\n        [`${lineNum} |`, subLines[0]],\n        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),\n        ['|', '^'.padStart(subLineColumnNum)],\n        ['|', subLines[subLineIndex + 1]],\n      ])\n    );\n  }\n\n  return (\n    locationStr +\n    printPrefixedLines([\n      // Lines specified like this: [\"prefix\", \"string\"],\n      [`${lineNum - 1} |`, lines[lineIndex - 1]],\n      [`${lineNum} |`, locationLine],\n      ['|', '^'.padStart(columnNum)],\n      [`${lineNum + 1} |`, lines[lineIndex + 1]],\n    ])\n  );\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines\n    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))\n    .join('\\n');\n}\n", "import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport {\n  printLocation,\n  printSourceLocation,\n} from '../language/printLocation.mjs';\n\nfunction toNormalizedArgs(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorArgs` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedArgs(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => getLocation(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}\n", "import { GraphQLError } from './GraphQLError.mjs';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(`Syntax Error: ${description}`, undefined, source, [\n    position,\n  ]);\n}\n", "/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\nexport class Location {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  constructor(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Location';\n  }\n\n  toJSON() {\n    return {\n      start: this.start,\n      end: this.end,\n    };\n  }\n}\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nexport class Token {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   *\n   * Note: is undefined for punctuation tokens, but typed as string for\n   * convenience in the parser.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  constructor(kind, start, end, line, column, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    this.value = value;\n    this.prev = null;\n    this.next = null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Token';\n  }\n\n  toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column,\n    };\n  }\n}\n/**\n * The list of all possible AST node types.\n */\n\n/**\n * @internal\n */\nexport const QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: [\n    'name',\n    'variableDefinitions',\n    'directives',\n    'selectionSet',\n  ],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: [\n    'name', // Note: fragment variable definitions are deprecated and will removed in v17.0.0\n    'variableDefinitions',\n    'typeCondition',\n    'directives',\n    'selectionSet',\n  ],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['description', 'directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: [\n    'description',\n    'name',\n    'type',\n    'defaultValue',\n    'directives',\n  ],\n  InterfaceTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields'],\n};\nconst kindValues = new Set(Object.keys(QueryDocumentKeys));\n/**\n * @internal\n */\n\nexport function isNode(maybeNode) {\n  const maybeKind =\n    maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;\n  return typeof maybeKind === 'string' && kindValues.has(maybeKind);\n}\n/** Name */\n\nexport let OperationTypeNode;\n\n(function (OperationTypeNode) {\n  OperationTypeNode['QUERY'] = 'query';\n  OperationTypeNode['MUTATION'] = 'mutation';\n  OperationTypeNode['SUBSCRIPTION'] = 'subscription';\n})(OperationTypeNode || (OperationTypeNode = {}));\n", "/**\n * The set of allowed directive location values.\n */\nexport let DirectiveLocation;\n/**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */\n\n(function (DirectiveLocation) {\n  DirectiveLocation['QUERY'] = 'QUERY';\n  DirectiveLocation['MUTATION'] = 'MUTATION';\n  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';\n  DirectiveLocation['FIELD'] = 'FIELD';\n  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';\n  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';\n  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';\n  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';\n  DirectiveLocation['SCHEMA'] = 'SCHEMA';\n  DirectiveLocation['SCALAR'] = 'SCALAR';\n  DirectiveLocation['OBJECT'] = 'OBJECT';\n  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';\n  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';\n  DirectiveLocation['INTERFACE'] = 'INTERFACE';\n  DirectiveLocation['UNION'] = 'UNION';\n  DirectiveLocation['ENUM'] = 'ENUM';\n  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';\n  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';\n})(DirectiveLocation || (DirectiveLocation = {}));\n", "/**\n * The set of allowed kind values for AST nodes.\n */\nexport let Kind;\n/**\n * The enum type representing the possible kind values of AST nodes.\n *\n * @deprecated Please use `Kind`. Will be remove in v17.\n */\n\n(function (Kind) {\n  Kind['NAME'] = 'Name';\n  Kind['DOCUMENT'] = 'Document';\n  Kind['OPERATION_DEFINITION'] = 'OperationDefinition';\n  Kind['VARIABLE_DEFINITION'] = 'VariableDefinition';\n  Kind['SELECTION_SET'] = 'SelectionSet';\n  Kind['FIELD'] = 'Field';\n  Kind['ARGUMENT'] = 'Argument';\n  Kind['FRAGMENT_SPREAD'] = 'FragmentSpread';\n  Kind['INLINE_FRAGMENT'] = 'InlineFragment';\n  Kind['FRAGMENT_DEFINITION'] = 'FragmentDefinition';\n  Kind['VARIABLE'] = 'Variable';\n  Kind['INT'] = 'IntValue';\n  Kind['FLOAT'] = 'FloatValue';\n  Kind['STRING'] = 'StringValue';\n  Kind['BOOLEAN'] = 'BooleanValue';\n  Kind['NULL'] = 'NullValue';\n  Kind['ENUM'] = 'EnumValue';\n  Kind['LIST'] = 'ListValue';\n  Kind['OBJECT'] = 'ObjectValue';\n  Kind['OBJECT_FIELD'] = 'ObjectField';\n  Kind['DIRECTIVE'] = 'Directive';\n  Kind['NAMED_TYPE'] = 'NamedType';\n  Kind['LIST_TYPE'] = 'ListType';\n  Kind['NON_NULL_TYPE'] = 'NonNullType';\n  Kind['SCHEMA_DEFINITION'] = 'SchemaDefinition';\n  Kind['OPERATION_TYPE_DEFINITION'] = 'OperationTypeDefinition';\n  Kind['SCALAR_TYPE_DEFINITION'] = 'ScalarTypeDefinition';\n  Kind['OBJECT_TYPE_DEFINITION'] = 'ObjectTypeDefinition';\n  Kind['FIELD_DEFINITION'] = 'FieldDefinition';\n  Kind['INPUT_VALUE_DEFINITION'] = 'InputValueDefinition';\n  Kind['INTERFACE_TYPE_DEFINITION'] = 'InterfaceTypeDefinition';\n  Kind['UNION_TYPE_DEFINITION'] = 'UnionTypeDefinition';\n  Kind['ENUM_TYPE_DEFINITION'] = 'EnumTypeDefinition';\n  Kind['ENUM_VALUE_DEFINITION'] = 'EnumValueDefinition';\n  Kind['INPUT_OBJECT_TYPE_DEFINITION'] = 'InputObjectTypeDefinition';\n  Kind['DIRECTIVE_DEFINITION'] = 'DirectiveDefinition';\n  Kind['SCHEMA_EXTENSION'] = 'SchemaExtension';\n  Kind['SCALAR_TYPE_EXTENSION'] = 'ScalarTypeExtension';\n  Kind['OBJECT_TYPE_EXTENSION'] = 'ObjectTypeExtension';\n  Kind['INTERFACE_TYPE_EXTENSION'] = 'InterfaceTypeExtension';\n  Kind['UNION_TYPE_EXTENSION'] = 'UnionTypeExtension';\n  Kind['ENUM_TYPE_EXTENSION'] = 'EnumTypeExtension';\n  Kind['INPUT_OBJECT_TYPE_EXTENSION'] = 'InputObjectTypeExtension';\n})(Kind || (Kind = {}));\n", "/**\n * ```\n * WhiteSpace ::\n *   - \"Horizontal Tab (U+0009)\"\n *   - \"Space (U+0020)\"\n * ```\n * @internal\n */\nexport function isWhiteSpace(code) {\n  return code === 0x0009 || code === 0x0020;\n}\n/**\n * ```\n * Digit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n * ```\n * @internal\n */\n\nexport function isDigit(code) {\n  return code >= 0x0030 && code <= 0x0039;\n}\n/**\n * ```\n * Letter :: one of\n *   - `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M`\n *   - `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`\n *   - `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m`\n *   - `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`\n * ```\n * @internal\n */\n\nexport function isLetter(code) {\n  return (\n    (code >= 0x0061 && code <= 0x007a) || // A-Z\n    (code >= 0x0041 && code <= 0x005a) // a-z\n  );\n}\n/**\n * ```\n * NameStart ::\n *   - Letter\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameStart(code) {\n  return isLetter(code) || code === 0x005f;\n}\n/**\n * ```\n * NameContinue ::\n *   - Letter\n *   - Digit\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameContinue(code) {\n  return isLetter(code) || isDigit(code) || code === 0x005f;\n}\n", "import { isWhiteSpace } from './characterClasses.mjs';\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\n\nexport function dedentBlockStringLines(lines) {\n  var _firstNonEmptyLine2;\n\n  let commonIndent = Number.MAX_SAFE_INTEGER;\n  let firstNonEmptyLine = null;\n  let lastNonEmptyLine = -1;\n\n  for (let i = 0; i < lines.length; ++i) {\n    var _firstNonEmptyLine;\n\n    const line = lines[i];\n    const indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    firstNonEmptyLine =\n      (_firstNonEmptyLine = firstNonEmptyLine) !== null &&\n      _firstNonEmptyLine !== void 0\n        ? _firstNonEmptyLine\n        : i;\n    lastNonEmptyLine = i;\n\n    if (i !== 0 && indent < commonIndent) {\n      commonIndent = indent;\n    }\n  }\n\n  return lines // Remove common indentation from all lines but first.\n    .map((line, i) => (i === 0 ? line : line.slice(commonIndent))) // Remove leading and trailing blank lines.\n    .slice(\n      (_firstNonEmptyLine2 = firstNonEmptyLine) !== null &&\n        _firstNonEmptyLine2 !== void 0\n        ? _firstNonEmptyLine2\n        : 0,\n      lastNonEmptyLine + 1,\n    );\n}\n\nfunction leadingWhitespace(str) {\n  let i = 0;\n\n  while (i < str.length && isWhiteSpace(str.charCodeAt(i))) {\n    ++i;\n  }\n\n  return i;\n}\n/**\n * @internal\n */\n\nexport function isPrintableAsBlockString(value) {\n  if (value === '') {\n    return true; // empty string is printable\n  }\n\n  let isEmptyLine = true;\n  let hasIndent = false;\n  let hasCommonIndent = true;\n  let seenNonEmptyLine = false;\n\n  for (let i = 0; i < value.length; ++i) {\n    switch (value.codePointAt(i)) {\n      case 0x0000:\n      case 0x0001:\n      case 0x0002:\n      case 0x0003:\n      case 0x0004:\n      case 0x0005:\n      case 0x0006:\n      case 0x0007:\n      case 0x0008:\n      case 0x000b:\n      case 0x000c:\n      case 0x000e:\n      case 0x000f:\n        return false;\n      // Has non-printable characters\n\n      case 0x000d:\n        //  \\r\n        return false;\n      // Has \\r or \\r\\n which will be replaced as \\n\n\n      case 10:\n        //  \\n\n        if (isEmptyLine && !seenNonEmptyLine) {\n          return false; // Has leading new line\n        }\n\n        seenNonEmptyLine = true;\n        isEmptyLine = true;\n        hasIndent = false;\n        break;\n\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        hasIndent || (hasIndent = isEmptyLine);\n        break;\n\n      default:\n        hasCommonIndent && (hasCommonIndent = hasIndent);\n        isEmptyLine = false;\n    }\n  }\n\n  if (isEmptyLine) {\n    return false; // Has trailing empty lines\n  }\n\n  if (hasCommonIndent && seenNonEmptyLine) {\n    return false; // Has internal indent\n  }\n\n  return true;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nexport function printBlockString(value, options) {\n  const escapedValue = value.replace(/\"\"\"/g, '\\\\\"\"\"'); // Expand a block string's raw value into independent lines.\n\n  const lines = escapedValue.split(/\\r\\n|[\\n\\r]/g);\n  const isSingleLine = lines.length === 1; // If common indentation is found we can fix some of those cases by adding leading new line\n\n  const forceLeadingNewLine =\n    lines.length > 1 &&\n    lines\n      .slice(1)\n      .every((line) => line.length === 0 || isWhiteSpace(line.charCodeAt(0))); // Trailing triple quotes just looks confusing but doesn't force trailing new line\n\n  const hasTrailingTripleQuotes = escapedValue.endsWith('\\\\\"\"\"'); // Trailing quote (single or double) or slash forces trailing new line\n\n  const hasTrailingQuote = value.endsWith('\"') && !hasTrailingTripleQuotes;\n  const hasTrailingSlash = value.endsWith('\\\\');\n  const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;\n  const printAsMultipleLines =\n    !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability\n    (!isSingleLine ||\n      value.length > 70 ||\n      forceTrailingNewline ||\n      forceLeadingNewLine ||\n      hasTrailingTripleQuotes);\n  let result = ''; // Format a multi-line block quote to account for leading space.\n\n  const skipLeadingNewLine = isSingleLine && isWhiteSpace(value.charCodeAt(0));\n\n  if ((printAsMultipleLines && !skipLeadingNewLine) || forceLeadingNewLine) {\n    result += '\\n';\n  }\n\n  result += escapedValue;\n\n  if (printAsMultipleLines || forceTrailingNewline) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result + '\"\"\"';\n}\n", "/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport let TokenKind;\n/**\n * The enum type representing the token kinds values.\n *\n * @deprecated Please use `TokenKind`. Will be remove in v17.\n */\n\n(function (TokenKind) {\n  TokenKind['SOF'] = '<SOF>';\n  TokenKind['EOF'] = '<EOF>';\n  TokenKind['BANG'] = '!';\n  TokenKind['DOLLAR'] = '$';\n  TokenKind['AMP'] = '&';\n  TokenKind['PAREN_L'] = '(';\n  TokenKind['PAREN_R'] = ')';\n  TokenKind['SPREAD'] = '...';\n  TokenKind['COLON'] = ':';\n  TokenKind['EQUALS'] = '=';\n  TokenKind['AT'] = '@';\n  TokenKind['BRACKET_L'] = '[';\n  TokenKind['BRACKET_R'] = ']';\n  TokenKind['BRACE_L'] = '{';\n  TokenKind['PIPE'] = '|';\n  TokenKind['BRACE_R'] = '}';\n  TokenKind['NAME'] = 'Name';\n  TokenKind['INT'] = 'Int';\n  TokenKind['FLOAT'] = 'Float';\n  TokenKind['STRING'] = 'String';\n  TokenKind['BLOCK_STRING'] = 'BlockString';\n  TokenKind['COMMENT'] = 'Comment';\n})(TokenKind || (TokenKind = {}));\n", "import { syntaxError } from '../error/syntaxError.mjs';\nimport { Token } from './ast.mjs';\nimport { dedentBlockStringLines } from './blockString.mjs';\nimport { isDigit, isNameContinue, isNameStart } from './characterClasses.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport class Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lexer';\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  advance() {\n    this.lastToken = this.token;\n    const token = (this.token = this.lookahead());\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        if (token.next) {\n          token = token.next;\n        } else {\n          // Read the next token and form a link in the token linked-list.\n          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n\n          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n\n          nextToken.prev = token;\n          token = nextToken;\n        }\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n}\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return (\n    kind === TokenKind.BANG ||\n    kind === TokenKind.DOLLAR ||\n    kind === TokenKind.AMP ||\n    kind === TokenKind.PAREN_L ||\n    kind === TokenKind.PAREN_R ||\n    kind === TokenKind.SPREAD ||\n    kind === TokenKind.COLON ||\n    kind === TokenKind.EQUALS ||\n    kind === TokenKind.AT ||\n    kind === TokenKind.BRACKET_L ||\n    kind === TokenKind.BRACKET_R ||\n    kind === TokenKind.BRACE_L ||\n    kind === TokenKind.PIPE ||\n    kind === TokenKind.BRACE_R\n  );\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */\n\nfunction isUnicodeScalarValue(code) {\n  return (\n    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)\n  );\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */\n\nfunction isSupplementaryCodePoint(body, location) {\n  return (\n    isLeadingSurrogate(body.charCodeAt(location)) &&\n    isTrailingSurrogate(body.charCodeAt(location + 1))\n  );\n}\n\nfunction isLeadingSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */\n\nfunction printCodePointAt(lexer, location) {\n  const code = lexer.source.body.codePointAt(location);\n\n  if (code === undefined) {\n    return TokenKind.EOF;\n  } else if (code >= 0x0020 && code <= 0x007e) {\n    // Printable ASCII\n    const char = String.fromCodePoint(code);\n    return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n  } // Unicode code point\n\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}\n/**\n * Create a token with line and column location information.\n */\n\nfunction createToken(lexer, kind, start, end, value) {\n  const line = lexer.line;\n  const col = 1 + start - lexer.lineStart;\n  return new Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readNextToken(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // SourceCharacter\n\n    switch (code) {\n      // Ignored ::\n      //   - UnicodeBOM\n      //   - WhiteSpace\n      //   - LineTerminator\n      //   - Comment\n      //   - Comma\n      //\n      // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n      //\n      // WhiteSpace ::\n      //   - \"Horizontal Tab (U+0009)\"\n      //   - \"Space (U+0020)\"\n      //\n      // Comma :: ,\n      case 0xfeff: // <BOM>\n\n      case 0x0009: // \\t\n\n      case 0x0020: // <space>\n\n      case 0x002c:\n        // ,\n        ++position;\n        continue;\n      // LineTerminator ::\n      //   - \"New Line (U+000A)\"\n      //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n      //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n\n      case 0x000a:\n        // \\n\n        ++position;\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n\n      case 0x000d:\n        // \\r\n        if (body.charCodeAt(position + 1) === 0x000a) {\n          position += 2;\n        } else {\n          ++position;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n      // Comment\n\n      case 0x0023:\n        // #\n        return readComment(lexer, position);\n      // Token ::\n      //   - Punctuator\n      //   - Name\n      //   - IntValue\n      //   - FloatValue\n      //   - StringValue\n      //\n      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n\n      case 0x0021:\n        // !\n        return createToken(lexer, TokenKind.BANG, position, position + 1);\n\n      case 0x0024:\n        // $\n        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);\n\n      case 0x0026:\n        // &\n        return createToken(lexer, TokenKind.AMP, position, position + 1);\n\n      case 0x0028:\n        // (\n        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);\n\n      case 0x0029:\n        // )\n        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);\n\n      case 0x002e:\n        // .\n        if (\n          body.charCodeAt(position + 1) === 0x002e &&\n          body.charCodeAt(position + 2) === 0x002e\n        ) {\n          return createToken(lexer, TokenKind.SPREAD, position, position + 3);\n        }\n\n        break;\n\n      case 0x003a:\n        // :\n        return createToken(lexer, TokenKind.COLON, position, position + 1);\n\n      case 0x003d:\n        // =\n        return createToken(lexer, TokenKind.EQUALS, position, position + 1);\n\n      case 0x0040:\n        // @\n        return createToken(lexer, TokenKind.AT, position, position + 1);\n\n      case 0x005b:\n        // [\n        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);\n\n      case 0x005d:\n        // ]\n        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);\n\n      case 0x007b:\n        // {\n        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);\n\n      case 0x007c:\n        // |\n        return createToken(lexer, TokenKind.PIPE, position, position + 1);\n\n      case 0x007d:\n        // }\n        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);\n      // StringValue\n\n      case 0x0022:\n        // \"\n        if (\n          body.charCodeAt(position + 1) === 0x0022 &&\n          body.charCodeAt(position + 2) === 0x0022\n        ) {\n          return readBlockString(lexer, position);\n        }\n\n        return readString(lexer, position);\n    } // IntValue | FloatValue (Digit | -)\n\n    if (isDigit(code) || code === 0x002d) {\n      return readNumber(lexer, position, code);\n    } // Name\n\n    if (isNameStart(code)) {\n      return readName(lexer, position);\n    }\n\n    throw syntaxError(\n      lexer.source,\n      position,\n      code === 0x0027\n        ? 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?'\n        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)\n        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`\n        : `Invalid character: ${printCodePointAt(lexer, position)}.`,\n    );\n  }\n\n  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */\n\nfunction readComment(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.COMMENT,\n    start,\n    position,\n    body.slice(start + 1, position),\n  );\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */\n\nfunction readNumber(lexer, start, firstCode) {\n  const body = lexer.source.body;\n  let position = start;\n  let code = firstCode;\n  let isFloat = false; // NegativeSign (-)\n\n  if (code === 0x002d) {\n    code = body.charCodeAt(++position);\n  } // Zero (0)\n\n  if (code === 0x0030) {\n    code = body.charCodeAt(++position);\n\n    if (isDigit(code)) {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid number, unexpected digit after 0: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  } else {\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Full stop (.)\n\n  if (code === 0x002e) {\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // E e\n\n  if (code === 0x0045 || code === 0x0065) {\n    isFloat = true;\n    code = body.charCodeAt(++position); // + -\n\n    if (code === 0x002b || code === 0x002d) {\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 0x002e || isNameStart(code)) {\n    throw syntaxError(\n      lexer.source,\n      position,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        position,\n      )}.`,\n    );\n  }\n\n  return createToken(\n    lexer,\n    isFloat ? TokenKind.FLOAT : TokenKind.INT,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */\n\nfunction readDigits(lexer, start, firstCode) {\n  if (!isDigit(firstCode)) {\n    throw syntaxError(\n      lexer.source,\n      start,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        start,\n      )}.`,\n    );\n  }\n\n  const body = lexer.source.body;\n  let position = start + 1; // +1 to skip first firstCode\n\n  while (isDigit(body.charCodeAt(position))) {\n    ++position;\n  }\n\n  return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */\n\nfunction readString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let chunkStart = position;\n  let value = '';\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Quote (\")\n\n    if (code === 0x0022) {\n      value += body.slice(chunkStart, position);\n      return createToken(lexer, TokenKind.STRING, start, position + 1, value);\n    } // Escape Sequence (\\)\n\n    if (code === 0x005c) {\n      value += body.slice(chunkStart, position);\n      const escape =\n        body.charCodeAt(position + 1) === 0x0075 // u\n          ? body.charCodeAt(position + 2) === 0x007b // {\n            ? readEscapedUnicodeVariableWidth(lexer, position)\n            : readEscapedUnicodeFixedWidth(lexer, position)\n          : readEscapedCharacter(lexer, position);\n      value += escape.value;\n      position += escape.size;\n      chunkStart = position;\n      continue;\n    } // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n} // The string value and lexed size of an escape sequence.\n\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n  const body = lexer.source.body;\n  let point = 0;\n  let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n\n  while (size < 12) {\n    const code = body.charCodeAt(position + size++); // Closing Brace (})\n\n    if (code === 0x007d) {\n      // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n      if (size < 5 || !isUnicodeScalarValue(point)) {\n        break;\n      }\n\n      return {\n        value: String.fromCodePoint(point),\n        size,\n      };\n    } // Append this hex digit to the code point.\n\n    point = (point << 4) | readHexDigit(code);\n\n    if (point < 0) {\n      break;\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(\n      position,\n      position + size,\n    )}\".`,\n  );\n}\n\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n  const body = lexer.source.body;\n  const code = read16BitHexCode(body, position + 2);\n\n  if (isUnicodeScalarValue(code)) {\n    return {\n      value: String.fromCodePoint(code),\n      size: 6,\n    };\n  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n  // a valid pair is formed.\n\n  if (isLeadingSurrogate(code)) {\n    // \\u\n    if (\n      body.charCodeAt(position + 6) === 0x005c &&\n      body.charCodeAt(position + 7) === 0x0075\n    ) {\n      const trailingCode = read16BitHexCode(body, position + 8);\n\n      if (isTrailingSurrogate(trailingCode)) {\n        // JavaScript defines strings as a sequence of UTF-16 code units and\n        // encodes Unicode code points above U+FFFF using a surrogate pair of\n        // code units. Since this is a surrogate pair escape sequence, just\n        // include both codes into the JavaScript string value. Had JavaScript\n        // not been internally based on UTF-16, then this surrogate pair would\n        // be decoded to retrieve the supplementary code point.\n        return {\n          value: String.fromCodePoint(code, trailingCode),\n          size: 12,\n        };\n      }\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`,\n  );\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */\n\nfunction read16BitHexCode(body, position) {\n  // readHexDigit() returns -1 on error. ORing a negative value with any other\n  // value always produces a negative value.\n  return (\n    (readHexDigit(body.charCodeAt(position)) << 12) |\n    (readHexDigit(body.charCodeAt(position + 1)) << 8) |\n    (readHexDigit(body.charCodeAt(position + 2)) << 4) |\n    readHexDigit(body.charCodeAt(position + 3))\n  );\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */\n\nfunction readHexDigit(code) {\n  return code >= 0x0030 && code <= 0x0039 // 0-9\n    ? code - 0x0030\n    : code >= 0x0041 && code <= 0x0046 // A-F\n    ? code - 0x0037\n    : code >= 0x0061 && code <= 0x0066 // a-f\n    ? code - 0x0057\n    : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */\n\nfunction readEscapedCharacter(lexer, position) {\n  const body = lexer.source.body;\n  const code = body.charCodeAt(position + 1);\n\n  switch (code) {\n    case 0x0022:\n      // \"\n      return {\n        value: '\\u0022',\n        size: 2,\n      };\n\n    case 0x005c:\n      // \\\n      return {\n        value: '\\u005c',\n        size: 2,\n      };\n\n    case 0x002f:\n      // /\n      return {\n        value: '\\u002f',\n        size: 2,\n      };\n\n    case 0x0062:\n      // b\n      return {\n        value: '\\u0008',\n        size: 2,\n      };\n\n    case 0x0066:\n      // f\n      return {\n        value: '\\u000c',\n        size: 2,\n      };\n\n    case 0x006e:\n      // n\n      return {\n        value: '\\u000a',\n        size: 2,\n      };\n\n    case 0x0072:\n      // r\n      return {\n        value: '\\u000d',\n        size: 2,\n      };\n\n    case 0x0074:\n      // t\n      return {\n        value: '\\u0009',\n        size: 2,\n      };\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid character escape sequence: \"${body.slice(\n      position,\n      position + 2,\n    )}\".`,\n  );\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */\n\nfunction readBlockString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let lineStart = lexer.lineStart;\n  let position = start + 3;\n  let chunkStart = position;\n  let currentLine = '';\n  const blockLines = [];\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n\n    if (\n      code === 0x0022 &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n      const token = createToken(\n        lexer,\n        TokenKind.BLOCK_STRING,\n        start,\n        position + 3, // Return a string of the lines joined with U+000A.\n        dedentBlockStringLines(blockLines).join('\\n'),\n      );\n      lexer.line += blockLines.length - 1;\n      lexer.lineStart = lineStart;\n      return token;\n    } // Escaped Triple-Quote (\\\"\"\")\n\n    if (\n      code === 0x005c &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022 &&\n      body.charCodeAt(position + 3) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      chunkStart = position + 1; // skip only slash\n\n      position += 4;\n      continue;\n    } // LineTerminator\n\n    if (code === 0x000a || code === 0x000d) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n\n      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      currentLine = '';\n      chunkStart = position;\n      lineStart = position;\n      continue;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */\n\nfunction readName(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position);\n\n    if (isNameContinue(code)) {\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.NAME,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n", "const MAX_ARRAY_LENGTH = 10;\nconst MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nexport function inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (typeof value) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? `[function ${value.name}]` : '[function]';\n\n    case 'object':\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (value === null) {\n    return 'null';\n  }\n\n  if (previouslySeenValues.includes(value)) {\n    return '[Circular]';\n  }\n\n  const seenValues = [...previouslySeenValues, value];\n\n  if (isJSONable(value)) {\n    const jsonValue = value.toJSON(); // check for infinite recursion\n\n    if (jsonValue !== value) {\n      return typeof jsonValue === 'string'\n        ? jsonValue\n        : formatValue(jsonValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction isJSONable(value) {\n  return typeof value.toJSON === 'function';\n}\n\nfunction formatObject(object, seenValues) {\n  const entries = Object.entries(object);\n\n  if (entries.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  const properties = entries.map(\n    ([key, value]) => key + ': ' + formatValue(value, seenValues),\n  );\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  const len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  const remaining = array.length - len;\n  const items = [];\n\n  for (let i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(`... ${remaining} more items`);\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getObjectTag(object) {\n  const tag = Object.prototype.toString\n    .call(object)\n    .replace(/^\\[object /, '')\n    .replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    const name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n", "import { inspect } from './inspect.mjs';\n/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n * See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production\n * See: https://webpack.js.org/guides/production/\n */\n\nexport const instanceOf =\n  /* c8 ignore next 5 */\n  // FIXME: https://github.com/graphql/graphql-js/issues/2317\n  process.env.NODE_ENV === 'production'\n    ? function instanceOf(value, constructor) {\n        return value instanceof constructor;\n      }\n    : function instanceOf(value, constructor) {\n        if (value instanceof constructor) {\n          return true;\n        }\n\n        if (typeof value === 'object' && value !== null) {\n          var _value$constructor;\n\n          // Prefer Symbol.toStringTag since it is immune to minification.\n          const className = constructor.prototype[Symbol.toStringTag];\n          const valueClassName = // We still need to support constructor's name to detect conflicts with older versions of this library.\n            Symbol.toStringTag in value // @ts-expect-error TS bug see, https://github.com/microsoft/TypeScript/issues/38009\n              ? value[Symbol.toStringTag]\n              : (_value$constructor = value.constructor) === null ||\n                _value$constructor === void 0\n              ? void 0\n              : _value$constructor.name;\n\n          if (className === valueClassName) {\n            const stringifiedValue = inspect(value);\n            throw new Error(`Cannot use ${className} \"${stringifiedValue}\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.`);\n          }\n        }\n\n        return false;\n      };\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\n\n/**\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\n * optional, but they are useful for clients who store GraphQL documents in source files.\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\n */\nexport class Source {\n  constructor(\n    body,\n    name = 'GraphQL request',\n    locationOffset = {\n      line: 1,\n      column: 1,\n    },\n  ) {\n    typeof body === 'string' ||\n      devAssert(false, `Body must be a string. Received: ${inspect(body)}.`);\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 ||\n      devAssert(\n        false,\n        'line in locationOffset is 1-indexed and must be positive.',\n      );\n    this.locationOffset.column > 0 ||\n      devAssert(\n        false,\n        'column in locationOffset is 1-indexed and must be positive.',\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Source';\n  }\n}\n/**\n * Test if the given value is a Source object.\n *\n * @internal\n */\n\nexport function isSource(source) {\n  return instanceOf(source, Source);\n}\n", "import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    var _this$_options;\n\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (\n      ((_this$_options = this._options) === null || _this$_options === void 0\n        ? void 0\n        : _this$_options.allowLegacyFragmentVariables) === true\n    ) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this._lexer.advance();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    var _this$_options2;\n\n    if (\n      ((_this$_options2 = this._options) === null || _this$_options2 === void 0\n        ? void 0\n        : _this$_options2.noLocation) !== true\n    ) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n", "const MAX_SUGGESTIONS = 5;\n/**\n * Given [ A, B, C ] return ' Did you mean A, B, or C?'.\n */\n\nexport function didYouMean(firstArg, secondArg) {\n  const [subMessage, suggestionsArg] = secondArg\n    ? [firstArg, secondArg]\n    : [undefined, firstArg];\n  let message = ' Did you mean ';\n\n  if (subMessage) {\n    message += subMessage + ' ';\n  }\n\n  const suggestions = suggestionsArg.map((x) => `\"${x}\"`);\n\n  switch (suggestions.length) {\n    case 0:\n      return '';\n\n    case 1:\n      return message + suggestions[0] + '?';\n\n    case 2:\n      return message + suggestions[0] + ' or ' + suggestions[1] + '?';\n  }\n\n  const selected = suggestions.slice(0, MAX_SUGGESTIONS);\n  const lastItem = selected.pop();\n  return message + selected.join(', ') + ', or ' + lastItem + '?';\n}\n", "/**\n * Returns the first argument it receives.\n */\nexport function identityFunc(x) {\n  return x;\n}\n", "/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * for each value in the array.\n *\n * This provides a convenient lookup for the array items if the key function\n * produces unique results.\n * ```ts\n * const phoneBook = [\n *   { name: 'Jon', num: '555-1234' },\n *   { name: 'Jenny', num: '867-5309' }\n * ]\n *\n * const entriesByName = keyMap(\n *   phoneBook,\n *   entry => entry.name\n * )\n *\n * // {\n * //   Jon: { name: 'Jon', num: '555-1234' },\n * //   Jenny: { name: 'Jenny', num: '867-5309' }\n * // }\n *\n * const jennyEntry = entriesByName['Jenny']\n *\n * // { name: 'Jenny', num: '857-6309' }\n * ```\n */\nexport function keyMap(list, keyFn) {\n  const result = Object.create(null);\n\n  for (const item of list) {\n    result[keyFn(item)] = item;\n  }\n\n  return result;\n}\n", "/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * and a function to produce the values from each item in the array.\n * ```ts\n * const phoneBook = [\n *   { name: 'Jon', num: '555-1234' },\n *   { name: 'Jenny', num: '867-5309' }\n * ]\n *\n * // { Jon: '555-1234', Jenny: '867-5309' }\n * const phonesByName = keyValMap(\n *   phoneBook,\n *   entry => entry.name,\n *   entry => entry.num\n * )\n * ```\n */\nexport function keyValMap(list, keyFn, valFn) {\n  const result = Object.create(null);\n\n  for (const item of list) {\n    result[keyFn(item)] = valFn(item);\n  }\n\n  return result;\n}\n", "/**\n * Creates an object map with the same keys as `map` and values generated by\n * running each value of `map` thru `fn`.\n */\nexport function mapValue(map, fn) {\n  const result = Object.create(null);\n\n  for (const key of Object.keys(map)) {\n    result[key] = fn(map[key], key);\n  }\n\n  return result;\n}\n", "/**\n * Returns a number indicating whether a reference string comes before, or after,\n * or is the same as the given string in natural sort order.\n *\n * See: https://en.wikipedia.org/wiki/Natural_sort_order\n *\n */\nexport function naturalCompare(aStr, bStr) {\n  let aIndex = 0;\n  let bIndex = 0;\n\n  while (aIndex < aStr.length && bIndex < bStr.length) {\n    let aChar = aStr.charCodeAt(aIndex);\n    let bChar = bStr.charCodeAt(bIndex);\n\n    if (isDigit(aChar) && isDigit(bChar)) {\n      let aNum = 0;\n\n      do {\n        ++aIndex;\n        aNum = aNum * 10 + aChar - DIGIT_0;\n        aChar = aStr.charCodeAt(aIndex);\n      } while (isDigit(aChar) && aNum > 0);\n\n      let bNum = 0;\n\n      do {\n        ++bIndex;\n        bNum = bNum * 10 + bChar - DIGIT_0;\n        bChar = bStr.charCodeAt(bIndex);\n      } while (isDigit(bChar) && bNum > 0);\n\n      if (aNum < bNum) {\n        return -1;\n      }\n\n      if (aNum > bNum) {\n        return 1;\n      }\n    } else {\n      if (aChar < bChar) {\n        return -1;\n      }\n\n      if (aChar > bChar) {\n        return 1;\n      }\n\n      ++aIndex;\n      ++bIndex;\n    }\n  }\n\n  return aStr.length - bStr.length;\n}\nconst DIGIT_0 = 48;\nconst DIGIT_9 = 57;\n\nfunction isDigit(code) {\n  return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;\n}\n", "import { naturalCompare } from './naturalCompare.mjs';\n/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\n\nexport function suggestionList(input, options) {\n  const optionsByDistance = Object.create(null);\n  const lexicalDistance = new LexicalDistance(input);\n  const threshold = Math.floor(input.length * 0.4) + 1;\n\n  for (const option of options) {\n    const distance = lexicalDistance.measure(option, threshold);\n\n    if (distance !== undefined) {\n      optionsByDistance[option] = distance;\n    }\n  }\n\n  return Object.keys(optionsByDistance).sort((a, b) => {\n    const distanceDiff = optionsByDistance[a] - optionsByDistance[b];\n    return distanceDiff !== 0 ? distanceDiff : naturalCompare(a, b);\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n */\n\nclass LexicalDistance {\n  constructor(input) {\n    this._input = input;\n    this._inputLowerCase = input.toLowerCase();\n    this._inputArray = stringToArray(this._inputLowerCase);\n    this._rows = [\n      new Array(input.length + 1).fill(0),\n      new Array(input.length + 1).fill(0),\n      new Array(input.length + 1).fill(0),\n    ];\n  }\n\n  measure(option, threshold) {\n    if (this._input === option) {\n      return 0;\n    }\n\n    const optionLowerCase = option.toLowerCase(); // Any case change counts as a single edit\n\n    if (this._inputLowerCase === optionLowerCase) {\n      return 1;\n    }\n\n    let a = stringToArray(optionLowerCase);\n    let b = this._inputArray;\n\n    if (a.length < b.length) {\n      const tmp = a;\n      a = b;\n      b = tmp;\n    }\n\n    const aLength = a.length;\n    const bLength = b.length;\n\n    if (aLength - bLength > threshold) {\n      return undefined;\n    }\n\n    const rows = this._rows;\n\n    for (let j = 0; j <= bLength; j++) {\n      rows[0][j] = j;\n    }\n\n    for (let i = 1; i <= aLength; i++) {\n      const upRow = rows[(i - 1) % 3];\n      const currentRow = rows[i % 3];\n      let smallestCell = (currentRow[0] = i);\n\n      for (let j = 1; j <= bLength; j++) {\n        const cost = a[i - 1] === b[j - 1] ? 0 : 1;\n        let currentCell = Math.min(\n          upRow[j] + 1, // delete\n          currentRow[j - 1] + 1, // insert\n          upRow[j - 1] + cost, // substitute\n        );\n\n        if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n          // transposition\n          const doubleDiagonalCell = rows[(i - 2) % 3][j - 2];\n          currentCell = Math.min(currentCell, doubleDiagonalCell + 1);\n        }\n\n        if (currentCell < smallestCell) {\n          smallestCell = currentCell;\n        }\n\n        currentRow[j] = currentCell;\n      } // Early exit, since distance can't go smaller than smallest element of the previous row.\n\n      if (smallestCell > threshold) {\n        return undefined;\n      }\n    }\n\n    const distance = rows[aLength % 3][bLength];\n    return distance <= threshold ? distance : undefined;\n  }\n}\n\nfunction stringToArray(str) {\n  const strLength = str.length;\n  const array = new Array(strLength);\n\n  for (let i = 0; i < strLength; ++i) {\n    array[i] = str.charCodeAt(i);\n  }\n\n  return array;\n}\n", "export function toObjMap(obj) {\n  if (obj == null) {\n    return Object.create(null);\n  }\n\n  if (Object.getPrototypeOf(obj) === null) {\n    return obj;\n  }\n\n  const map = Object.create(null);\n\n  for (const [key, value] of Object.entries(obj)) {\n    map[key] = value;\n  }\n\n  return map;\n}\n", "/**\n * Prints a string as a GraphQL StringValue literal. Replaces control characters\n * and excluded characters (\" U+0022 and \\\\ U+005C) with escape sequences.\n */\nexport function printString(str) {\n  return `\"${str.replace(escapedRegExp, escapedReplacer)}\"`;\n} // eslint-disable-next-line no-control-regex\n\nconst escapedRegExp = /[\\x00-\\x1f\\x22\\x5c\\x7f-\\x9f]/g;\n\nfunction escapedReplacer(str) {\n  return escapeSequences[str.charCodeAt(0)];\n} // prettier-ignore\n\nconst escapeSequences = [\n  '\\\\u0000',\n  '\\\\u0001',\n  '\\\\u0002',\n  '\\\\u0003',\n  '\\\\u0004',\n  '\\\\u0005',\n  '\\\\u0006',\n  '\\\\u0007',\n  '\\\\b',\n  '\\\\t',\n  '\\\\n',\n  '\\\\u000B',\n  '\\\\f',\n  '\\\\r',\n  '\\\\u000E',\n  '\\\\u000F',\n  '\\\\u0010',\n  '\\\\u0011',\n  '\\\\u0012',\n  '\\\\u0013',\n  '\\\\u0014',\n  '\\\\u0015',\n  '\\\\u0016',\n  '\\\\u0017',\n  '\\\\u0018',\n  '\\\\u0019',\n  '\\\\u001A',\n  '\\\\u001B',\n  '\\\\u001C',\n  '\\\\u001D',\n  '\\\\u001E',\n  '\\\\u001F',\n  '',\n  '',\n  '\\\\\"',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 2F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 3F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 4F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\\\\\',\n  '',\n  '',\n  '', // 5F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 6F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\u007F',\n  '\\\\u0080',\n  '\\\\u0081',\n  '\\\\u0082',\n  '\\\\u0083',\n  '\\\\u0084',\n  '\\\\u0085',\n  '\\\\u0086',\n  '\\\\u0087',\n  '\\\\u0088',\n  '\\\\u0089',\n  '\\\\u008A',\n  '\\\\u008B',\n  '\\\\u008C',\n  '\\\\u008D',\n  '\\\\u008E',\n  '\\\\u008F',\n  '\\\\u0090',\n  '\\\\u0091',\n  '\\\\u0092',\n  '\\\\u0093',\n  '\\\\u0094',\n  '\\\\u0095',\n  '\\\\u0096',\n  '\\\\u0097',\n  '\\\\u0098',\n  '\\\\u0099',\n  '\\\\u009A',\n  '\\\\u009B',\n  '\\\\u009C',\n  '\\\\u009D',\n  '\\\\u009E',\n  '\\\\u009F',\n];\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isNode, QueryDocumentKeys } from './ast.mjs';\nimport { Kind } from './kinds.mjs';\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n\nexport const BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n * ```ts\n * const editedAST = visit(ast, {\n *   enter(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: skip visiting this node\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   },\n *   leave(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: no action\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   }\n * });\n * ```\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to three permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind(node) {\n *     // enter the \"Kind\" node\n *   }\n * })\n * ```\n *\n * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind: {\n *     enter(node) {\n *       // enter the \"Kind\" node\n *     }\n *     leave(node) {\n *       // leave the \"Kind\" node\n *     }\n *   }\n * })\n * ```\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n * ```ts\n * visit(ast, {\n *   enter(node) {\n *     // enter any node\n *   },\n *   leave(node) {\n *     // leave any node\n *   }\n * })\n * ```\n */\n\nexport function visit(root, visitor, visitorKeys = QueryDocumentKeys) {\n  const enterLeaveMap = new Map();\n\n  for (const kind of Object.values(Kind)) {\n    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));\n  }\n  /* eslint-disable no-undef-init */\n\n  let stack = undefined;\n  let inArray = Array.isArray(root);\n  let keys = [root];\n  let index = -1;\n  let edits = [];\n  let node = root;\n  let key = undefined;\n  let parent = undefined;\n  const path = [];\n  const ancestors = [];\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    const isLeaving = index === keys.length;\n    const isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n          let editOffset = 0;\n\n          for (const [editKey, editValue] of edits) {\n            const arrayKey = editKey - editOffset;\n\n            if (editValue === null) {\n              node.splice(arrayKey, 1);\n              editOffset++;\n            } else {\n              node[arrayKey] = editValue;\n            }\n          }\n        } else {\n          node = Object.defineProperties(\n            {},\n            Object.getOwnPropertyDescriptors(node),\n          );\n\n          for (const [editKey, editValue] of edits) {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else if (parent) {\n      key = inArray ? index : keys[index];\n      node = parent[key];\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      path.push(key);\n    }\n\n    let result;\n\n    if (!Array.isArray(node)) {\n      var _enterLeaveMap$get, _enterLeaveMap$get2;\n\n      isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);\n      const visitFn = isLeaving\n        ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get === void 0\n          ? void 0\n          : _enterLeaveMap$get.leave\n        : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get2 === void 0\n        ? void 0\n        : _enterLeaveMap$get2.enter;\n      result =\n        visitFn === null || visitFn === void 0\n          ? void 0\n          : visitFn.call(visitor, node, key, parent, path, ancestors);\n\n      if (result === BREAK) {\n        break;\n      }\n\n      if (result === false) {\n        if (!isLeaving) {\n          path.pop();\n          continue;\n        }\n      } else if (result !== undefined) {\n        edits.push([key, result]);\n\n        if (!isLeaving) {\n          if (isNode(result)) {\n            node = result;\n          } else {\n            path.pop();\n            continue;\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _node$kind;\n\n      stack = {\n        inArray,\n        index,\n        keys,\n        edits,\n        prev: stack,\n      };\n      inArray = Array.isArray(node);\n      keys = inArray\n        ? node\n        : (_node$kind = visitorKeys[node.kind]) !== null &&\n          _node$kind !== void 0\n        ? _node$kind\n        : [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    // New root\n    return edits[edits.length - 1][1];\n  }\n\n  return root;\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\nexport function visitInParallel(visitors) {\n  const skipping = new Array(visitors.length).fill(null);\n  const mergedVisitor = Object.create(null);\n\n  for (const kind of Object.values(Kind)) {\n    let hasVisitor = false;\n    const enterList = new Array(visitors.length).fill(undefined);\n    const leaveList = new Array(visitors.length).fill(undefined);\n\n    for (let i = 0; i < visitors.length; ++i) {\n      const { enter, leave } = getEnterLeaveForKind(visitors[i], kind);\n      hasVisitor || (hasVisitor = enter != null || leave != null);\n      enterList[i] = enter;\n      leaveList[i] = leave;\n    }\n\n    if (!hasVisitor) {\n      continue;\n    }\n\n    const mergedEnterLeave = {\n      enter(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _enterList$i;\n\n            const result =\n              (_enterList$i = enterList[i]) === null || _enterList$i === void 0\n                ? void 0\n                : _enterList$i.apply(visitors[i], args);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      },\n\n      leave(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _leaveList$i;\n\n            const result =\n              (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0\n                ? void 0\n                : _leaveList$i.apply(visitors[i], args);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          } else if (skipping[i] === node) {\n            skipping[i] = null;\n          }\n        }\n      },\n    };\n    mergedVisitor[kind] = mergedEnterLeave;\n  }\n\n  return mergedVisitor;\n}\n/**\n * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.\n */\n\nexport function getEnterLeaveForKind(visitor, kind) {\n  const kindVisitor = visitor[kind];\n\n  if (typeof kindVisitor === 'object') {\n    // { Kind: { enter() {}, leave() {} } }\n    return kindVisitor;\n  } else if (typeof kindVisitor === 'function') {\n    // { Kind() {} }\n    return {\n      enter: kindVisitor,\n      leave: undefined,\n    };\n  } // { enter() {}, leave() {} }\n\n  return {\n    enter: visitor.enter,\n    leave: visitor.leave,\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n *\n * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17\n */\n\n/* c8 ignore next 8 */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  const { enter, leave } = getEnterLeaveForKind(visitor, kind);\n  return isLeaving ? leave : enter;\n}\n", "import { printBlockString } from './blockString.mjs';\nimport { printString } from './printString.mjs';\nimport { visit } from './visitor.mjs';\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, printDocASTReducer);\n}\nconst MAX_LINE_LENGTH = 80;\nconst printDocASTReducer = {\n  Name: {\n    leave: (node) => node.value,\n  },\n  Variable: {\n    leave: (node) => '$' + node.name,\n  },\n  // Document\n  Document: {\n    leave: (node) => join(node.definitions, '\\n\\n'),\n  },\n  OperationDefinition: {\n    leave(node) {\n      const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n      const prefix = join(\n        [\n          node.operation,\n          join([node.name, varDefs]),\n          join(node.directives, ' '),\n        ],\n        ' ',\n      ); // Anonymous queries with no directives or variable definitions can use\n      // the query short form.\n\n      return (prefix === 'query' ? '' : prefix + ' ') + node.selectionSet;\n    },\n  },\n  VariableDefinition: {\n    leave: ({ variable, type, defaultValue, directives }) =>\n      variable +\n      ': ' +\n      type +\n      wrap(' = ', defaultValue) +\n      wrap(' ', join(directives, ' ')),\n  },\n  SelectionSet: {\n    leave: ({ selections }) => block(selections),\n  },\n  Field: {\n    leave({ alias, name, arguments: args, directives, selectionSet }) {\n      const prefix = wrap('', alias, ': ') + name;\n      let argsLine = prefix + wrap('(', join(args, ', '), ')');\n\n      if (argsLine.length > MAX_LINE_LENGTH) {\n        argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n      }\n\n      return join([argsLine, join(directives, ' '), selectionSet], ' ');\n    },\n  },\n  Argument: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Fragments\n  FragmentSpread: {\n    leave: ({ name, directives }) =>\n      '...' + name + wrap(' ', join(directives, ' ')),\n  },\n  InlineFragment: {\n    leave: ({ typeCondition, directives, selectionSet }) =>\n      join(\n        [\n          '...',\n          wrap('on ', typeCondition),\n          join(directives, ' '),\n          selectionSet,\n        ],\n        ' ',\n      ),\n  },\n  FragmentDefinition: {\n    leave: (\n      { name, typeCondition, variableDefinitions, directives, selectionSet }, // Note: fragment variable definitions are experimental and may be changed\n    ) =>\n      // or removed in the future.\n      `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` +\n      `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` +\n      selectionSet,\n  },\n  // Value\n  IntValue: {\n    leave: ({ value }) => value,\n  },\n  FloatValue: {\n    leave: ({ value }) => value,\n  },\n  StringValue: {\n    leave: ({ value, block: isBlockString }) =>\n      isBlockString ? printBlockString(value) : printString(value),\n  },\n  BooleanValue: {\n    leave: ({ value }) => (value ? 'true' : 'false'),\n  },\n  NullValue: {\n    leave: () => 'null',\n  },\n  EnumValue: {\n    leave: ({ value }) => value,\n  },\n  ListValue: {\n    leave: ({ values }) => '[' + join(values, ', ') + ']',\n  },\n  ObjectValue: {\n    leave: ({ fields }) => '{' + join(fields, ', ') + '}',\n  },\n  ObjectField: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Directive\n  Directive: {\n    leave: ({ name, arguments: args }) =>\n      '@' + name + wrap('(', join(args, ', '), ')'),\n  },\n  // Type\n  NamedType: {\n    leave: ({ name }) => name,\n  },\n  ListType: {\n    leave: ({ type }) => '[' + type + ']',\n  },\n  NonNullType: {\n    leave: ({ type }) => type + '!',\n  },\n  // Type System Definitions\n  SchemaDefinition: {\n    leave: ({ description, directives, operationTypes }) =>\n      wrap('', description, '\\n') +\n      join(['schema', join(directives, ' '), block(operationTypes)], ' '),\n  },\n  OperationTypeDefinition: {\n    leave: ({ operation, type }) => operation + ': ' + type,\n  },\n  ScalarTypeDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') +\n      join(['scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  FieldDefinition: {\n    leave: ({ description, name, arguments: args, type, directives }) =>\n      wrap('', description, '\\n') +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      ': ' +\n      type +\n      wrap(' ', join(directives, ' ')),\n  },\n  InputValueDefinition: {\n    leave: ({ description, name, type, defaultValue, directives }) =>\n      wrap('', description, '\\n') +\n      join(\n        [name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')],\n        ' ',\n      ),\n  },\n  InterfaceTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeDefinition: {\n    leave: ({ description, name, directives, types }) =>\n      wrap('', description, '\\n') +\n      join(\n        ['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))],\n        ' ',\n      ),\n  },\n  EnumTypeDefinition: {\n    leave: ({ description, name, directives, values }) =>\n      wrap('', description, '\\n') +\n      join(['enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  EnumValueDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') + join([name, join(directives, ' ')], ' '),\n  },\n  InputObjectTypeDefinition: {\n    leave: ({ description, name, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(['input', name, join(directives, ' '), block(fields)], ' '),\n  },\n  DirectiveDefinition: {\n    leave: ({ description, name, arguments: args, repeatable, locations }) =>\n      wrap('', description, '\\n') +\n      'directive @' +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      (repeatable ? ' repeatable' : '') +\n      ' on ' +\n      join(locations, ' | '),\n  },\n  SchemaExtension: {\n    leave: ({ directives, operationTypes }) =>\n      join(\n        ['extend schema', join(directives, ' '), block(operationTypes)],\n        ' ',\n      ),\n  },\n  ScalarTypeExtension: {\n    leave: ({ name, directives }) =>\n      join(['extend scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  InterfaceTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeExtension: {\n    leave: ({ name, directives, types }) =>\n      join(\n        [\n          'extend union',\n          name,\n          join(directives, ' '),\n          wrap('= ', join(types, ' | ')),\n        ],\n        ' ',\n      ),\n  },\n  EnumTypeExtension: {\n    leave: ({ name, directives, values }) =>\n      join(['extend enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  InputObjectTypeExtension: {\n    leave: ({ name, directives, fields }) =>\n      join(['extend input', name, join(directives, ' '), block(fields)], ' '),\n  },\n};\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\nfunction join(maybeArray, separator = '') {\n  var _maybeArray$filter$jo;\n\n  return (_maybeArray$filter$jo =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.filter((x) => x).join(separator)) !== null &&\n    _maybeArray$filter$jo !== void 0\n    ? _maybeArray$filter$jo\n    : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an indented `{ }` block.\n */\n\nfunction block(array) {\n  return wrap('{\\n', indent(join(array, '\\n')), '\\n}');\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.\n */\n\nfunction wrap(start, maybeString, end = '') {\n  return maybeString != null && maybeString !== ''\n    ? start + maybeString + end\n    : '';\n}\n\nfunction indent(str) {\n  return wrap('  ', str.replace(/\\n/g, '\\n  '));\n}\n\nfunction hasMultilineItems(maybeArray) {\n  var _maybeArray$some;\n\n  // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n  return (_maybeArray$some =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.some((str) => str.includes('\\n'))) !== null &&\n    _maybeArray$some !== void 0\n    ? _maybeArray$some\n    : false;\n}\n", "import { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { Kind } from '../language/kinds.mjs';\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value\n * will reflect the provided GraphQL value AST.\n *\n * | GraphQL Value        | JavaScript Value |\n * | -------------------- | ---------------- |\n * | Input Object         | Object           |\n * | List                 | Array            |\n * | Boolean              | Boolean          |\n * | String / Enum        | String           |\n * | Int / Float          | Number           |\n * | Null                 | null             |\n *\n */\n\nexport function valueFromASTUntyped(valueNode, variables) {\n  switch (valueNode.kind) {\n    case Kind.NULL:\n      return null;\n\n    case Kind.INT:\n      return parseInt(valueNode.value, 10);\n\n    case Kind.FLOAT:\n      return parseFloat(valueNode.value);\n\n    case Kind.STRING:\n    case Kind.ENUM:\n    case Kind.BOOLEAN:\n      return valueNode.value;\n\n    case Kind.LIST:\n      return valueNode.values.map((node) =>\n        valueFromASTUntyped(node, variables),\n      );\n\n    case Kind.OBJECT:\n      return keyValMap(\n        valueNode.fields,\n        (field) => field.name.value,\n        (field) => valueFromASTUntyped(field.value, variables),\n      );\n\n    case Kind.VARIABLE:\n      return variables === null || variables === void 0\n        ? void 0\n        : variables[valueNode.name.value];\n  }\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { isNameContinue, isNameStart } from '../language/characterClasses.mjs';\n/**\n * Upholds the spec rules about naming.\n */\n\nexport function assertName(name) {\n  name != null || devAssert(false, 'Must provide name.');\n  typeof name === 'string' || devAssert(false, 'Expected name to be a string.');\n\n  if (name.length === 0) {\n    throw new GraphQLError('Expected name to be a non-empty string.');\n  }\n\n  for (let i = 1; i < name.length; ++i) {\n    if (!isNameContinue(name.charCodeAt(i))) {\n      throw new GraphQLError(\n        `Names must only contain [_a-zA-Z0-9] but \"${name}\" does not.`,\n      );\n    }\n  }\n\n  if (!isNameStart(name.charCodeAt(0))) {\n    throw new GraphQLError(\n      `Names must start with [_a-zA-Z] but \"${name}\" does not.`,\n    );\n  }\n\n  return name;\n}\n/**\n * Upholds the spec rules about naming enum values.\n *\n * @internal\n */\n\nexport function assertEnumValueName(name) {\n  if (name === 'true' || name === 'false' || name === 'null') {\n    throw new GraphQLError(`Enum values cannot be named: ${name}`);\n  }\n\n  return assertName(name);\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { didYouMean } from '../jsutils/didYouMean.mjs';\nimport { identityFunc } from '../jsutils/identityFunc.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { mapValue } from '../jsutils/mapValue.mjs';\nimport { suggestionList } from '../jsutils/suggestionList.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { valueFromASTUntyped } from '../utilities/valueFromASTUntyped.mjs';\nimport { assertEnumValueName, assertName } from './assertName.mjs';\nexport function isType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type) ||\n    isListType(type) ||\n    isNonNullType(type)\n  );\n}\nexport function assertType(type) {\n  if (!isType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL type.`);\n  }\n\n  return type;\n}\n/**\n * There are predicates for each kind of GraphQL type.\n */\n\nexport function isScalarType(type) {\n  return instanceOf(type, GraphQLScalarType);\n}\nexport function assertScalarType(type) {\n  if (!isScalarType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Scalar type.`);\n  }\n\n  return type;\n}\nexport function isObjectType(type) {\n  return instanceOf(type, GraphQLObjectType);\n}\nexport function assertObjectType(type) {\n  if (!isObjectType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Object type.`);\n  }\n\n  return type;\n}\nexport function isInterfaceType(type) {\n  return instanceOf(type, GraphQLInterfaceType);\n}\nexport function assertInterfaceType(type) {\n  if (!isInterfaceType(type)) {\n    throw new Error(\n      `Expected ${inspect(type)} to be a GraphQL Interface type.`,\n    );\n  }\n\n  return type;\n}\nexport function isUnionType(type) {\n  return instanceOf(type, GraphQLUnionType);\n}\nexport function assertUnionType(type) {\n  if (!isUnionType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Union type.`);\n  }\n\n  return type;\n}\nexport function isEnumType(type) {\n  return instanceOf(type, GraphQLEnumType);\n}\nexport function assertEnumType(type) {\n  if (!isEnumType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Enum type.`);\n  }\n\n  return type;\n}\nexport function isInputObjectType(type) {\n  return instanceOf(type, GraphQLInputObjectType);\n}\nexport function assertInputObjectType(type) {\n  if (!isInputObjectType(type)) {\n    throw new Error(\n      `Expected ${inspect(type)} to be a GraphQL Input Object type.`,\n    );\n  }\n\n  return type;\n}\nexport function isListType(type) {\n  return instanceOf(type, GraphQLList);\n}\nexport function assertListType(type) {\n  if (!isListType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL List type.`);\n  }\n\n  return type;\n}\nexport function isNonNullType(type) {\n  return instanceOf(type, GraphQLNonNull);\n}\nexport function assertNonNullType(type) {\n  if (!isNonNullType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Non-Null type.`);\n  }\n\n  return type;\n}\n/**\n * These types may be used as input types for arguments and directives.\n */\n\nexport function isInputType(type) {\n  return (\n    isScalarType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type) ||\n    (isWrappingType(type) && isInputType(type.ofType))\n  );\n}\nexport function assertInputType(type) {\n  if (!isInputType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL input type.`);\n  }\n\n  return type;\n}\n/**\n * These types may be used as output types as the result of fields.\n */\n\nexport function isOutputType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    (isWrappingType(type) && isOutputType(type.ofType))\n  );\n}\nexport function assertOutputType(type) {\n  if (!isOutputType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL output type.`);\n  }\n\n  return type;\n}\n/**\n * These types may describe types which may be leaf values.\n */\n\nexport function isLeafType(type) {\n  return isScalarType(type) || isEnumType(type);\n}\nexport function assertLeafType(type) {\n  if (!isLeafType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL leaf type.`);\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isCompositeType(type) {\n  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);\n}\nexport function assertCompositeType(type) {\n  if (!isCompositeType(type)) {\n    throw new Error(\n      `Expected ${inspect(type)} to be a GraphQL composite type.`,\n    );\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isAbstractType(type) {\n  return isInterfaceType(type) || isUnionType(type);\n}\nexport function assertAbstractType(type) {\n  if (!isAbstractType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL abstract type.`);\n  }\n\n  return type;\n}\n/**\n * List Type Wrapper\n *\n * A list is a wrapping type which points to another type.\n * Lists are often created within the context of defining the fields of\n * an object type.\n *\n * Example:\n *\n * ```ts\n * const PersonType = new GraphQLObjectType({\n *   name: 'Person',\n *   fields: () => ({\n *     parents: { type: new GraphQLList(PersonType) },\n *     children: { type: new GraphQLList(PersonType) },\n *   })\n * })\n * ```\n */\n\nexport class GraphQLList {\n  constructor(ofType) {\n    isType(ofType) ||\n      devAssert(false, `Expected ${inspect(ofType)} to be a GraphQL type.`);\n    this.ofType = ofType;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLList';\n  }\n\n  toString() {\n    return '[' + String(this.ofType) + ']';\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n/**\n * Non-Null Type Wrapper\n *\n * A non-null is a wrapping type which points to another type.\n * Non-null types enforce that their values are never null and can ensure\n * an error is raised if this ever occurs during a request. It is useful for\n * fields which you can make a strong guarantee on non-nullability, for example\n * usually the id field of a database row will never be null.\n *\n * Example:\n *\n * ```ts\n * const RowType = new GraphQLObjectType({\n *   name: 'Row',\n *   fields: () => ({\n *     id: { type: new GraphQLNonNull(GraphQLString) },\n *   })\n * })\n * ```\n * Note: the enforcement of non-nullability occurs within the executor.\n */\n\nexport class GraphQLNonNull {\n  constructor(ofType) {\n    isNullableType(ofType) ||\n      devAssert(\n        false,\n        `Expected ${inspect(ofType)} to be a GraphQL nullable type.`,\n      );\n    this.ofType = ofType;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLNonNull';\n  }\n\n  toString() {\n    return String(this.ofType) + '!';\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n/**\n * These types wrap and modify other types\n */\n\nexport function isWrappingType(type) {\n  return isListType(type) || isNonNullType(type);\n}\nexport function assertWrappingType(type) {\n  if (!isWrappingType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL wrapping type.`);\n  }\n\n  return type;\n}\n/**\n * These types can all accept null as a value.\n */\n\nexport function isNullableType(type) {\n  return isType(type) && !isNonNullType(type);\n}\nexport function assertNullableType(type) {\n  if (!isNullableType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL nullable type.`);\n  }\n\n  return type;\n}\nexport function getNullableType(type) {\n  if (type) {\n    return isNonNullType(type) ? type.ofType : type;\n  }\n}\n/**\n * These named types do not include modifiers like List or NonNull.\n */\n\nexport function isNamedType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type)\n  );\n}\nexport function assertNamedType(type) {\n  if (!isNamedType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL named type.`);\n  }\n\n  return type;\n}\nexport function getNamedType(type) {\n  if (type) {\n    let unwrappedType = type;\n\n    while (isWrappingType(unwrappedType)) {\n      unwrappedType = unwrappedType.ofType;\n    }\n\n    return unwrappedType;\n  }\n}\n/**\n * Used while defining GraphQL types to allow for circular references in\n * otherwise immutable type definitions.\n */\n\nexport function resolveReadonlyArrayThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\nexport function resolveObjMapThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Scalar Type Definition\n *\n * The leaf values of any request and input values to arguments are\n * Scalars (or Enums) and are defined with a name and a series of functions\n * used to parse input from ast or variables and to ensure validity.\n *\n * If a type's serialize function does not return a value (i.e. it returns\n * `undefined`) then an error will be raised and a `null` value will be returned\n * in the response. If the serialize function returns `null`, then no error will\n * be included in the response.\n *\n * Example:\n *\n * ```ts\n * const OddType = new GraphQLScalarType({\n *   name: 'Odd',\n *   serialize(value) {\n *     if (value % 2 === 1) {\n *       return value;\n *     }\n *   }\n * });\n * ```\n */\nexport class GraphQLScalarType {\n  constructor(config) {\n    var _config$parseValue,\n      _config$serialize,\n      _config$parseLiteral,\n      _config$extensionASTN;\n\n    const parseValue =\n      (_config$parseValue = config.parseValue) !== null &&\n      _config$parseValue !== void 0\n        ? _config$parseValue\n        : identityFunc;\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.specifiedByURL = config.specifiedByURL;\n    this.serialize =\n      (_config$serialize = config.serialize) !== null &&\n      _config$serialize !== void 0\n        ? _config$serialize\n        : identityFunc;\n    this.parseValue = parseValue;\n    this.parseLiteral =\n      (_config$parseLiteral = config.parseLiteral) !== null &&\n      _config$parseLiteral !== void 0\n        ? _config$parseLiteral\n        : (node, variables) => parseValue(valueFromASTUntyped(node, variables));\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN = config.extensionASTNodes) !== null &&\n      _config$extensionASTN !== void 0\n        ? _config$extensionASTN\n        : [];\n    config.specifiedByURL == null ||\n      typeof config.specifiedByURL === 'string' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"specifiedByURL\" as a string, ` +\n          `but got: ${inspect(config.specifiedByURL)}.`,\n      );\n    config.serialize == null ||\n      typeof config.serialize === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"serialize\" function. If this custom Scalar is also used as an input type, ensure \"parseValue\" and \"parseLiteral\" functions are also provided.`,\n      );\n\n    if (config.parseLiteral) {\n      (typeof config.parseValue === 'function' &&\n        typeof config.parseLiteral === 'function') ||\n        devAssert(\n          false,\n          `${this.name} must provide both \"parseValue\" and \"parseLiteral\" functions.`,\n        );\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLScalarType';\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      specifiedByURL: this.specifiedByURL,\n      serialize: this.serialize,\n      parseValue: this.parseValue,\n      parseLiteral: this.parseLiteral,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Object Type Definition\n *\n * Almost all of the GraphQL types you define will be object types. Object types\n * have a name, but most importantly describe their fields.\n *\n * Example:\n *\n * ```ts\n * const AddressType = new GraphQLObjectType({\n *   name: 'Address',\n *   fields: {\n *     street: { type: GraphQLString },\n *     number: { type: GraphQLInt },\n *     formatted: {\n *       type: GraphQLString,\n *       resolve(obj) {\n *         return obj.number + ' ' + obj.street\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * When two types need to refer to each other, or a type needs to refer to\n * itself in a field, you can use a function expression (aka a closure or a\n * thunk) to supply the fields lazily.\n *\n * Example:\n *\n * ```ts\n * const PersonType = new GraphQLObjectType({\n *   name: 'Person',\n *   fields: () => ({\n *     name: { type: GraphQLString },\n *     bestFriend: { type: PersonType },\n *   })\n * });\n * ```\n */\nexport class GraphQLObjectType {\n  constructor(config) {\n    var _config$extensionASTN2;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.isTypeOf = config.isTypeOf;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN2 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN2 !== void 0\n        ? _config$extensionASTN2\n        : [];\n\n    this._fields = () => defineFieldMap(config);\n\n    this._interfaces = () => defineInterfaces(config);\n\n    config.isTypeOf == null ||\n      typeof config.isTypeOf === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"isTypeOf\" as a function, ` +\n          `but got: ${inspect(config.isTypeOf)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLObjectType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      isTypeOf: this.isTypeOf,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction defineInterfaces(config) {\n  var _config$interfaces;\n\n  const interfaces = resolveReadonlyArrayThunk(\n    (_config$interfaces = config.interfaces) !== null &&\n      _config$interfaces !== void 0\n      ? _config$interfaces\n      : [],\n  );\n  Array.isArray(interfaces) ||\n    devAssert(\n      false,\n      `${config.name} interfaces must be an Array or a function which returns an Array.`,\n    );\n  return interfaces;\n}\n\nfunction defineFieldMap(config) {\n  const fieldMap = resolveObjMapThunk(config.fields);\n  isPlainObj(fieldMap) ||\n    devAssert(\n      false,\n      `${config.name} fields must be an object with field names as keys or a function which returns such an object.`,\n    );\n  return mapValue(fieldMap, (fieldConfig, fieldName) => {\n    var _fieldConfig$args;\n\n    isPlainObj(fieldConfig) ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} field config must be an object.`,\n      );\n    fieldConfig.resolve == null ||\n      typeof fieldConfig.resolve === 'function' ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} field resolver must be a function if ` +\n          `provided, but got: ${inspect(fieldConfig.resolve)}.`,\n      );\n    const argsConfig =\n      (_fieldConfig$args = fieldConfig.args) !== null &&\n      _fieldConfig$args !== void 0\n        ? _fieldConfig$args\n        : {};\n    isPlainObj(argsConfig) ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} args must be an object with argument names as keys.`,\n      );\n    return {\n      name: assertName(fieldName),\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      args: defineArguments(argsConfig),\n      resolve: fieldConfig.resolve,\n      subscribe: fieldConfig.subscribe,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode,\n    };\n  });\n}\n\nexport function defineArguments(config) {\n  return Object.entries(config).map(([argName, argConfig]) => ({\n    name: assertName(argName),\n    description: argConfig.description,\n    type: argConfig.type,\n    defaultValue: argConfig.defaultValue,\n    deprecationReason: argConfig.deprecationReason,\n    extensions: toObjMap(argConfig.extensions),\n    astNode: argConfig.astNode,\n  }));\n}\n\nfunction isPlainObj(obj) {\n  return isObjectLike(obj) && !Array.isArray(obj);\n}\n\nfunction fieldsToFieldsConfig(fields) {\n  return mapValue(fields, (field) => ({\n    description: field.description,\n    type: field.type,\n    args: argsToArgsConfig(field.args),\n    resolve: field.resolve,\n    subscribe: field.subscribe,\n    deprecationReason: field.deprecationReason,\n    extensions: field.extensions,\n    astNode: field.astNode,\n  }));\n}\n/**\n * @internal\n */\n\nexport function argsToArgsConfig(args) {\n  return keyValMap(\n    args,\n    (arg) => arg.name,\n    (arg) => ({\n      description: arg.description,\n      type: arg.type,\n      defaultValue: arg.defaultValue,\n      deprecationReason: arg.deprecationReason,\n      extensions: arg.extensions,\n      astNode: arg.astNode,\n    }),\n  );\n}\nexport function isRequiredArgument(arg) {\n  return isNonNullType(arg.type) && arg.defaultValue === undefined;\n}\n\n/**\n * Interface Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Interface type\n * is used to describe what types are possible, what fields are in common across\n * all types, as well as a function to determine which type is actually used\n * when the field is resolved.\n *\n * Example:\n *\n * ```ts\n * const EntityType = new GraphQLInterfaceType({\n *   name: 'Entity',\n *   fields: {\n *     name: { type: GraphQLString }\n *   }\n * });\n * ```\n */\nexport class GraphQLInterfaceType {\n  constructor(config) {\n    var _config$extensionASTN3;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN3 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN3 !== void 0\n        ? _config$extensionASTN3\n        : [];\n    this._fields = defineFieldMap.bind(undefined, config);\n    this._interfaces = defineInterfaces.bind(undefined, config);\n    config.resolveType == null ||\n      typeof config.resolveType === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"resolveType\" as a function, ` +\n          `but got: ${inspect(config.resolveType)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLInterfaceType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Union Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Union type\n * is used to describe what types are possible as well as providing a function\n * to determine which type is actually used when the field is resolved.\n *\n * Example:\n *\n * ```ts\n * const PetType = new GraphQLUnionType({\n *   name: 'Pet',\n *   types: [ DogType, CatType ],\n *   resolveType(value) {\n *     if (value instanceof Dog) {\n *       return DogType;\n *     }\n *     if (value instanceof Cat) {\n *       return CatType;\n *     }\n *   }\n * });\n * ```\n */\nexport class GraphQLUnionType {\n  constructor(config) {\n    var _config$extensionASTN4;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN4 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN4 !== void 0\n        ? _config$extensionASTN4\n        : [];\n    this._types = defineTypes.bind(undefined, config);\n    config.resolveType == null ||\n      typeof config.resolveType === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"resolveType\" as a function, ` +\n          `but got: ${inspect(config.resolveType)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLUnionType';\n  }\n\n  getTypes() {\n    if (typeof this._types === 'function') {\n      this._types = this._types();\n    }\n\n    return this._types;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      types: this.getTypes(),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction defineTypes(config) {\n  const types = resolveReadonlyArrayThunk(config.types);\n  Array.isArray(types) ||\n    devAssert(\n      false,\n      `Must provide Array of types or a function which returns such an array for Union ${config.name}.`,\n    );\n  return types;\n}\n\n/**\n * Enum Type Definition\n *\n * Some leaf values of requests and input values are Enums. GraphQL serializes\n * Enum values as strings, however internally Enums can be represented by any\n * kind of type, often integers.\n *\n * Example:\n *\n * ```ts\n * const RGBType = new GraphQLEnumType({\n *   name: 'RGB',\n *   values: {\n *     RED: { value: 0 },\n *     GREEN: { value: 1 },\n *     BLUE: { value: 2 }\n *   }\n * });\n * ```\n *\n * Note: If a value is not provided in a definition, the name of the enum value\n * will be used as its internal value.\n */\nexport class GraphQLEnumType {\n  /* <T> */\n  constructor(config) {\n    var _config$extensionASTN5;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN5 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN5 !== void 0\n        ? _config$extensionASTN5\n        : [];\n    this._values = defineEnumValues(this.name, config.values);\n    this._valueLookup = new Map(\n      this._values.map((enumValue) => [enumValue.value, enumValue]),\n    );\n    this._nameLookup = keyMap(this._values, (value) => value.name);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLEnumType';\n  }\n\n  getValues() {\n    return this._values;\n  }\n\n  getValue(name) {\n    return this._nameLookup[name];\n  }\n\n  serialize(outputValue) {\n    const enumValue = this._valueLookup.get(outputValue);\n\n    if (enumValue === undefined) {\n      throw new GraphQLError(\n        `Enum \"${this.name}\" cannot represent value: ${inspect(outputValue)}`,\n      );\n    }\n\n    return enumValue.name;\n  }\n\n  parseValue(inputValue) /* T */\n  {\n    if (typeof inputValue !== 'string') {\n      const valueStr = inspect(inputValue);\n      throw new GraphQLError(\n        `Enum \"${this.name}\" cannot represent non-string value: ${valueStr}.` +\n          didYouMeanEnumValue(this, valueStr),\n      );\n    }\n\n    const enumValue = this.getValue(inputValue);\n\n    if (enumValue == null) {\n      throw new GraphQLError(\n        `Value \"${inputValue}\" does not exist in \"${this.name}\" enum.` +\n          didYouMeanEnumValue(this, inputValue),\n      );\n    }\n\n    return enumValue.value;\n  }\n\n  parseLiteral(valueNode, _variables) /* T */\n  {\n    // Note: variables will be resolved to a value before calling this function.\n    if (valueNode.kind !== Kind.ENUM) {\n      const valueStr = print(valueNode);\n      throw new GraphQLError(\n        `Enum \"${this.name}\" cannot represent non-enum value: ${valueStr}.` +\n          didYouMeanEnumValue(this, valueStr),\n        valueNode,\n      );\n    }\n\n    const enumValue = this.getValue(valueNode.value);\n\n    if (enumValue == null) {\n      const valueStr = print(valueNode);\n      throw new GraphQLError(\n        `Value \"${valueStr}\" does not exist in \"${this.name}\" enum.` +\n          didYouMeanEnumValue(this, valueStr),\n        valueNode,\n      );\n    }\n\n    return enumValue.value;\n  }\n\n  toConfig() {\n    const values = keyValMap(\n      this.getValues(),\n      (value) => value.name,\n      (value) => ({\n        description: value.description,\n        value: value.value,\n        deprecationReason: value.deprecationReason,\n        extensions: value.extensions,\n        astNode: value.astNode,\n      }),\n    );\n    return {\n      name: this.name,\n      description: this.description,\n      values,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction didYouMeanEnumValue(enumType, unknownValueStr) {\n  const allNames = enumType.getValues().map((value) => value.name);\n  const suggestedValues = suggestionList(unknownValueStr, allNames);\n  return didYouMean('the enum value', suggestedValues);\n}\n\nfunction defineEnumValues(typeName, valueMap) {\n  isPlainObj(valueMap) ||\n    devAssert(\n      false,\n      `${typeName} values must be an object with value names as keys.`,\n    );\n  return Object.entries(valueMap).map(([valueName, valueConfig]) => {\n    isPlainObj(valueConfig) ||\n      devAssert(\n        false,\n        `${typeName}.${valueName} must refer to an object with a \"value\" key ` +\n          `representing an internal value but got: ${inspect(valueConfig)}.`,\n      );\n    return {\n      name: assertEnumValueName(valueName),\n      description: valueConfig.description,\n      value: valueConfig.value !== undefined ? valueConfig.value : valueName,\n      deprecationReason: valueConfig.deprecationReason,\n      extensions: toObjMap(valueConfig.extensions),\n      astNode: valueConfig.astNode,\n    };\n  });\n}\n\n/**\n * Input Object Type Definition\n *\n * An input object defines a structured collection of fields which may be\n * supplied to a field argument.\n *\n * Using `NonNull` will ensure that a value must be provided by the query\n *\n * Example:\n *\n * ```ts\n * const GeoPoint = new GraphQLInputObjectType({\n *   name: 'GeoPoint',\n *   fields: {\n *     lat: { type: new GraphQLNonNull(GraphQLFloat) },\n *     lon: { type: new GraphQLNonNull(GraphQLFloat) },\n *     alt: { type: GraphQLFloat, defaultValue: 0 },\n *   }\n * });\n * ```\n */\nexport class GraphQLInputObjectType {\n  constructor(config) {\n    var _config$extensionASTN6;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN6 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN6 !== void 0\n        ? _config$extensionASTN6\n        : [];\n    this._fields = defineInputFieldMap.bind(undefined, config);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLInputObjectType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  toConfig() {\n    const fields = mapValue(this.getFields(), (field) => ({\n      description: field.description,\n      type: field.type,\n      defaultValue: field.defaultValue,\n      deprecationReason: field.deprecationReason,\n      extensions: field.extensions,\n      astNode: field.astNode,\n    }));\n    return {\n      name: this.name,\n      description: this.description,\n      fields,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction defineInputFieldMap(config) {\n  const fieldMap = resolveObjMapThunk(config.fields);\n  isPlainObj(fieldMap) ||\n    devAssert(\n      false,\n      `${config.name} fields must be an object with field names as keys or a function which returns such an object.`,\n    );\n  return mapValue(fieldMap, (fieldConfig, fieldName) => {\n    !('resolve' in fieldConfig) ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} field has a resolve property, but Input Types cannot define resolvers.`,\n      );\n    return {\n      name: assertName(fieldName),\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      defaultValue: fieldConfig.defaultValue,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode,\n    };\n  });\n}\n\nexport function isRequiredInputField(field) {\n  return isNonNullType(field.type) && field.defaultValue === undefined;\n}\n", "import {\n  isAbstractType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n} from '../type/definition.mjs';\n\n/**\n * Provided two types, return true if the types are equal (invariant).\n */\nexport function isEqualType(typeA, typeB) {\n  // Equivalent types are equal.\n  if (typeA === typeB) {\n    return true;\n  } // If either type is non-null, the other must also be non-null.\n\n  if (isNonNullType(typeA) && isNonNullType(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  } // If either type is a list, the other must also be a list.\n\n  if (isListType(typeA) && isListType(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  } // Otherwise the types are not equal.\n\n  return false;\n}\n/**\n * Provided a type and a super type, return true if the first type is either\n * equal or a subset of the second super type (covariant).\n */\n\nexport function isTypeSubTypeOf(schema, maybeSubType, superType) {\n  // Equivalent type is a valid subtype\n  if (maybeSubType === superType) {\n    return true;\n  } // If superType is non-null, maybeSubType must also be non-null.\n\n  if (isNonNullType(superType)) {\n    if (isNonNullType(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n\n    return false;\n  }\n\n  if (isNonNullType(maybeSubType)) {\n    // If superType is nullable, maybeSubType may be non-null or nullable.\n    return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);\n  } // If superType type is a list, maybeSubType type must also be a list.\n\n  if (isListType(superType)) {\n    if (isListType(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n\n    return false;\n  }\n\n  if (isListType(maybeSubType)) {\n    // If superType is not a list, maybeSubType must also be not a list.\n    return false;\n  } // If superType type is an abstract type, check if it is super type of maybeSubType.\n  // Otherwise, the child type is not a valid subtype of the parent type.\n\n  return (\n    isAbstractType(superType) &&\n    (isInterfaceType(maybeSubType) || isObjectType(maybeSubType)) &&\n    schema.isSubType(superType, maybeSubType)\n  );\n}\n/**\n * Provided two composite types, determine if they \"overlap\". Two composite\n * types overlap when the Sets of possible concrete types for each intersect.\n *\n * This is often used to determine if a fragment of a given type could possibly\n * be visited in a context of another type.\n *\n * This function is commutative.\n */\n\nexport function doTypesOverlap(schema, typeA, typeB) {\n  // Equivalent types overlap\n  if (typeA === typeB) {\n    return true;\n  }\n\n  if (isAbstractType(typeA)) {\n    if (isAbstractType(typeB)) {\n      // If both types are abstract, then determine if there is any intersection\n      // between possible concrete types of each.\n      return schema\n        .getPossibleTypes(typeA)\n        .some((type) => schema.isSubType(typeB, type));\n    } // Determine if the latter type is a possible concrete type of the former.\n\n    return schema.isSubType(typeA, typeB);\n  }\n\n  if (isAbstractType(typeB)) {\n    // Determine if the former type is a possible concrete type of the latter.\n    return schema.isSubType(typeB, typeA);\n  } // Otherwise the types do not overlap.\n\n  return false;\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { GraphQLScalarType } from './definition.mjs';\n/**\n * Maximum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe up-to 2^53 - 1\n * */\n\nexport const GRAPHQL_MAX_INT = 2147483647;\n/**\n * Minimum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe starting at -(2^53 - 1)\n * */\n\nexport const GRAPHQL_MIN_INT = -2147483648;\nexport const GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description:\n    'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isInteger(num)) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${inspect(coercedValue)}`,\n      );\n    }\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        'Int cannot represent non 32-bit signed integer value: ' +\n          inspect(coercedValue),\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${inspect(inputValue)}`,\n      );\n    }\n\n    if (inputValue > GRAPHQL_MAX_INT || inputValue < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${inputValue}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${print(valueNode)}`,\n        valueNode,\n      );\n    }\n\n    const num = parseInt(valueNode.value, 10);\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${valueNode.value}`,\n        valueNode,\n      );\n    }\n\n    return num;\n  },\n});\nexport const GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description:\n    'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isFinite(num)) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${inspect(coercedValue)}`,\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isFinite(inputValue)) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.FLOAT && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${print(valueNode)}`,\n        valueNode,\n      );\n    }\n\n    return parseFloat(valueNode.value);\n  },\n});\nexport const GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description:\n    'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not\n    // attempt to coerce object, function, symbol, or other types as strings.\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 'true' : 'false';\n    }\n\n    if (typeof coercedValue === 'number' && Number.isFinite(coercedValue)) {\n      return coercedValue.toString();\n    }\n\n    throw new GraphQLError(\n      `String cannot represent value: ${inspect(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'string') {\n      throw new GraphQLError(\n        `String cannot represent a non string value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING) {\n      throw new GraphQLError(\n        `String cannot represent a non string value: ${print(valueNode)}`,\n        valueNode,\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue;\n    }\n\n    if (Number.isFinite(coercedValue)) {\n      return coercedValue !== 0;\n    }\n\n    throw new GraphQLError(\n      `Boolean cannot represent a non boolean value: ${inspect(coercedValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'boolean') {\n      throw new GraphQLError(\n        `Boolean cannot represent a non boolean value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.BOOLEAN) {\n      throw new GraphQLError(\n        `Boolean cannot represent a non boolean value: ${print(valueNode)}`,\n        valueNode,\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description:\n    'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (Number.isInteger(coercedValue)) {\n      return String(coercedValue);\n    }\n\n    throw new GraphQLError(\n      `ID cannot represent value: ${inspect(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue === 'string') {\n      return inputValue;\n    }\n\n    if (typeof inputValue === 'number' && Number.isInteger(inputValue)) {\n      return inputValue.toString();\n    }\n\n    throw new GraphQLError(`ID cannot represent value: ${inspect(inputValue)}`);\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        'ID cannot represent a non-string and non-integer value: ' +\n          print(valueNode),\n        valueNode,\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const specifiedScalarTypes = Object.freeze([\n  GraphQLString,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLBoolean,\n  GraphQLID,\n]);\nexport function isSpecifiedScalarType(type) {\n  return specifiedScalarTypes.some(({ name }) => type.name === name);\n} // Support serializing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\n\nfunction serializeObject(outputValue) {\n  if (isObjectLike(outputValue)) {\n    if (typeof outputValue.valueOf === 'function') {\n      const valueOfResult = outputValue.valueOf();\n\n      if (!isObjectLike(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n\n    if (typeof outputValue.toJSON === 'function') {\n      return outputValue.toJSON();\n    }\n  }\n\n  return outputValue;\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { DirectiveLocation } from '../language/directiveLocation.mjs';\nimport { assertName } from './assertName.mjs';\nimport {\n  argsToArgsConfig,\n  defineArguments,\n  GraphQLNonNull,\n} from './definition.mjs';\nimport { GraphQLBoolean, GraphQLString } from './scalars.mjs';\n/**\n * Test if the given value is a GraphQL directive.\n */\n\nexport function isDirective(directive) {\n  return instanceOf(directive, GraphQLDirective);\n}\nexport function assertDirective(directive) {\n  if (!isDirective(directive)) {\n    throw new Error(\n      `Expected ${inspect(directive)} to be a GraphQL directive.`,\n    );\n  }\n\n  return directive;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Directives are used by the GraphQL runtime as a way of modifying execution\n * behavior. Type system creators will usually not create these directly.\n */\nexport class GraphQLDirective {\n  constructor(config) {\n    var _config$isRepeatable, _config$args;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.locations = config.locations;\n    this.isRepeatable =\n      (_config$isRepeatable = config.isRepeatable) !== null &&\n      _config$isRepeatable !== void 0\n        ? _config$isRepeatable\n        : false;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    Array.isArray(config.locations) ||\n      devAssert(false, `@${config.name} locations must be an Array.`);\n    const args =\n      (_config$args = config.args) !== null && _config$args !== void 0\n        ? _config$args\n        : {};\n    (isObjectLike(args) && !Array.isArray(args)) ||\n      devAssert(\n        false,\n        `@${config.name} args must be an object with argument names as keys.`,\n      );\n    this.args = defineArguments(args);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLDirective';\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      locations: this.locations,\n      args: argsToArgsConfig(this.args),\n      isRepeatable: this.isRepeatable,\n      extensions: this.extensions,\n      astNode: this.astNode,\n    };\n  }\n\n  toString() {\n    return '@' + this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Used to conditionally include fields or fragments.\n */\nexport const GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description:\n    'Directs the executor to include this field or fragment only when the `if` argument is true.',\n  locations: [\n    DirectiveLocation.FIELD,\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Included when true.',\n    },\n  },\n});\n/**\n * Used to conditionally skip (exclude) fields or fragments.\n */\n\nexport const GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description:\n    'Directs the executor to skip this field or fragment when the `if` argument is true.',\n  locations: [\n    DirectiveLocation.FIELD,\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Skipped when true.',\n    },\n  },\n});\n/**\n * Constant string used for default reason for a deprecation.\n */\n\nexport const DEFAULT_DEPRECATION_REASON = 'No longer supported';\n/**\n * Used to declare element of a GraphQL schema as deprecated.\n */\n\nexport const GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [\n    DirectiveLocation.FIELD_DEFINITION,\n    DirectiveLocation.ARGUMENT_DEFINITION,\n    DirectiveLocation.INPUT_FIELD_DEFINITION,\n    DirectiveLocation.ENUM_VALUE,\n  ],\n  args: {\n    reason: {\n      type: GraphQLString,\n      description:\n        'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON,\n    },\n  },\n});\n/**\n * Used to provide a URL for specifying the behavior of custom scalar definitions.\n */\n\nexport const GraphQLSpecifiedByDirective = new GraphQLDirective({\n  name: 'specifiedBy',\n  description: 'Exposes a URL that specifies the behavior of this scalar.',\n  locations: [DirectiveLocation.SCALAR],\n  args: {\n    url: {\n      type: new GraphQLNonNull(GraphQLString),\n      description: 'The URL that specifies the behavior of this scalar.',\n    },\n  },\n});\n/**\n * The full list of specified directives.\n */\n\nexport const specifiedDirectives = Object.freeze([\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLDeprecatedDirective,\n  GraphQLSpecifiedByDirective,\n]);\nexport function isSpecifiedDirective(directive) {\n  return specifiedDirectives.some(({ name }) => name === directive.name);\n}\n", "/**\n * Returns true if the provided object is an Object (i.e. not a string literal)\n * and implements the Iterator protocol.\n *\n * This may be used in place of [Array.isArray()][isArray] to determine if\n * an object should be iterated-over e.g. Array, Map, Set, Int8Array,\n * TypedArray, etc. but excludes string literals.\n *\n * @example\n * ```ts\n * isIterableObject([ 1, 2, 3 ]) // true\n * isIterableObject(new Map()) // true\n * isIterableObject('ABC') // false\n * isIterableObject({ key: 'value' }) // false\n * isIterableObject({ length: 1, 0: 'Alpha' }) // false\n * ```\n */\nexport function isIterableObject(maybeIterable) {\n  return (\n    typeof maybeIterable === 'object' &&\n    typeof (maybeIterable === null || maybeIterable === void 0\n      ? void 0\n      : maybeIterable[Symbol.iterator]) === 'function'\n  );\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\nimport { GraphQLID } from '../type/scalars.mjs';\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using suggested GraphQLInputType. For example:\n *\n *     astFromValue(\"value\", GraphQLString)\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Unknown       | Enum Value           |\n * | null          | NullValue            |\n *\n */\n\nexport function astFromValue(value, type) {\n  if (isNonNullType(type)) {\n    const astValue = astFromValue(value, type.ofType);\n\n    if (\n      (astValue === null || astValue === void 0 ? void 0 : astValue.kind) ===\n      Kind.NULL\n    ) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n  if (value === null) {\n    return {\n      kind: Kind.NULL,\n    };\n  } // undefined\n\n  if (value === undefined) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (isIterableObject(value)) {\n      const valuesNodes = [];\n\n      for (const item of value) {\n        const itemNode = astFromValue(item, itemType);\n\n        if (itemNode != null) {\n          valuesNodes.push(itemNode);\n        }\n      }\n\n      return {\n        kind: Kind.LIST,\n        values: valuesNodes,\n      };\n    }\n\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(value)) {\n      return null;\n    }\n\n    const fieldNodes = [];\n\n    for (const field of Object.values(type.getFields())) {\n      const fieldValue = astFromValue(value[field.name], field.type);\n\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: Kind.OBJECT_FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: field.name,\n          },\n          value: fieldValue,\n        });\n      }\n    }\n\n    return {\n      kind: Kind.OBJECT,\n      fields: fieldNodes,\n    };\n  }\n\n  if (isLeafType(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    const serialized = type.serialize(value);\n\n    if (serialized == null) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: Kind.BOOLEAN,\n        value: serialized,\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n    if (typeof serialized === 'number' && Number.isFinite(serialized)) {\n      const stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum)\n        ? {\n            kind: Kind.INT,\n            value: stringNum,\n          }\n        : {\n            kind: Kind.FLOAT,\n            value: stringNum,\n          };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if (isEnumType(type)) {\n        return {\n          kind: Kind.ENUM,\n          value: serialized,\n        };\n      } // ID types can use Int literals.\n\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: Kind.INT,\n          value: serialized,\n        };\n      }\n\n      return {\n        kind: Kind.STRING,\n        value: serialized,\n      };\n    }\n\n    throw new TypeError(`Cannot convert value to AST: ${inspect(serialized)}.`);\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nconst integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { DirectiveLocation } from '../language/directiveLocation.mjs';\nimport { print } from '../language/printer.mjs';\nimport { astFromValue } from '../utilities/astFromValue.mjs';\nimport {\n  GraphQLEnumType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  isAbstractType,\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from './definition.mjs';\nimport { GraphQLBoolean, GraphQLString } from './scalars.mjs';\nexport const __Schema = new GraphQLObjectType({\n  name: '__Schema',\n  description:\n    'A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.',\n  fields: () => ({\n    description: {\n      type: GraphQLString,\n      resolve: (schema) => schema.description,\n    },\n    types: {\n      description: 'A list of all types supported by this server.',\n      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Type))),\n\n      resolve(schema) {\n        return Object.values(schema.getTypeMap());\n      },\n    },\n    queryType: {\n      description: 'The type that query operations will be rooted at.',\n      type: new GraphQLNonNull(__Type),\n      resolve: (schema) => schema.getQueryType(),\n    },\n    mutationType: {\n      description:\n        'If this server supports mutation, the type that mutation operations will be rooted at.',\n      type: __Type,\n      resolve: (schema) => schema.getMutationType(),\n    },\n    subscriptionType: {\n      description:\n        'If this server support subscription, the type that subscription operations will be rooted at.',\n      type: __Type,\n      resolve: (schema) => schema.getSubscriptionType(),\n    },\n    directives: {\n      description: 'A list of all directives supported by this server.',\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__Directive)),\n      ),\n      resolve: (schema) => schema.getDirectives(),\n    },\n  }),\n});\nexport const __Directive = new GraphQLObjectType({\n  name: '__Directive',\n  description:\n    \"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\\n\\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.\",\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (directive) => directive.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (directive) => directive.description,\n    },\n    isRepeatable: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (directive) => directive.isRepeatable,\n    },\n    locations: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__DirectiveLocation)),\n      ),\n      resolve: (directive) => directive.locations,\n    },\n    args: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__InputValue)),\n      ),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(field, { includeDeprecated }) {\n        return includeDeprecated\n          ? field.args\n          : field.args.filter((arg) => arg.deprecationReason == null);\n      },\n    },\n  }),\n});\nexport const __DirectiveLocation = new GraphQLEnumType({\n  name: '__DirectiveLocation',\n  description:\n    'A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.',\n  values: {\n    QUERY: {\n      value: DirectiveLocation.QUERY,\n      description: 'Location adjacent to a query operation.',\n    },\n    MUTATION: {\n      value: DirectiveLocation.MUTATION,\n      description: 'Location adjacent to a mutation operation.',\n    },\n    SUBSCRIPTION: {\n      value: DirectiveLocation.SUBSCRIPTION,\n      description: 'Location adjacent to a subscription operation.',\n    },\n    FIELD: {\n      value: DirectiveLocation.FIELD,\n      description: 'Location adjacent to a field.',\n    },\n    FRAGMENT_DEFINITION: {\n      value: DirectiveLocation.FRAGMENT_DEFINITION,\n      description: 'Location adjacent to a fragment definition.',\n    },\n    FRAGMENT_SPREAD: {\n      value: DirectiveLocation.FRAGMENT_SPREAD,\n      description: 'Location adjacent to a fragment spread.',\n    },\n    INLINE_FRAGMENT: {\n      value: DirectiveLocation.INLINE_FRAGMENT,\n      description: 'Location adjacent to an inline fragment.',\n    },\n    VARIABLE_DEFINITION: {\n      value: DirectiveLocation.VARIABLE_DEFINITION,\n      description: 'Location adjacent to a variable definition.',\n    },\n    SCHEMA: {\n      value: DirectiveLocation.SCHEMA,\n      description: 'Location adjacent to a schema definition.',\n    },\n    SCALAR: {\n      value: DirectiveLocation.SCALAR,\n      description: 'Location adjacent to a scalar definition.',\n    },\n    OBJECT: {\n      value: DirectiveLocation.OBJECT,\n      description: 'Location adjacent to an object type definition.',\n    },\n    FIELD_DEFINITION: {\n      value: DirectiveLocation.FIELD_DEFINITION,\n      description: 'Location adjacent to a field definition.',\n    },\n    ARGUMENT_DEFINITION: {\n      value: DirectiveLocation.ARGUMENT_DEFINITION,\n      description: 'Location adjacent to an argument definition.',\n    },\n    INTERFACE: {\n      value: DirectiveLocation.INTERFACE,\n      description: 'Location adjacent to an interface definition.',\n    },\n    UNION: {\n      value: DirectiveLocation.UNION,\n      description: 'Location adjacent to a union definition.',\n    },\n    ENUM: {\n      value: DirectiveLocation.ENUM,\n      description: 'Location adjacent to an enum definition.',\n    },\n    ENUM_VALUE: {\n      value: DirectiveLocation.ENUM_VALUE,\n      description: 'Location adjacent to an enum value definition.',\n    },\n    INPUT_OBJECT: {\n      value: DirectiveLocation.INPUT_OBJECT,\n      description: 'Location adjacent to an input object type definition.',\n    },\n    INPUT_FIELD_DEFINITION: {\n      value: DirectiveLocation.INPUT_FIELD_DEFINITION,\n      description: 'Location adjacent to an input object field definition.',\n    },\n  },\n});\nexport const __Type = new GraphQLObjectType({\n  name: '__Type',\n  description:\n    'The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\\n\\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.',\n  fields: () => ({\n    kind: {\n      type: new GraphQLNonNull(__TypeKind),\n\n      resolve(type) {\n        if (isScalarType(type)) {\n          return TypeKind.SCALAR;\n        }\n\n        if (isObjectType(type)) {\n          return TypeKind.OBJECT;\n        }\n\n        if (isInterfaceType(type)) {\n          return TypeKind.INTERFACE;\n        }\n\n        if (isUnionType(type)) {\n          return TypeKind.UNION;\n        }\n\n        if (isEnumType(type)) {\n          return TypeKind.ENUM;\n        }\n\n        if (isInputObjectType(type)) {\n          return TypeKind.INPUT_OBJECT;\n        }\n\n        if (isListType(type)) {\n          return TypeKind.LIST;\n        }\n\n        if (isNonNullType(type)) {\n          return TypeKind.NON_NULL;\n        }\n        /* c8 ignore next 3 */\n        // Not reachable, all possible types have been considered)\n\n        false || invariant(false, `Unexpected type: \"${inspect(type)}\".`);\n      },\n    },\n    name: {\n      type: GraphQLString,\n      resolve: (type) => ('name' in type ? type.name : undefined),\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (\n        type, // FIXME: add test case\n      ) =>\n        /* c8 ignore next */\n        'description' in type ? type.description : undefined,\n    },\n    specifiedByURL: {\n      type: GraphQLString,\n      resolve: (obj) =>\n        'specifiedByURL' in obj ? obj.specifiedByURL : undefined,\n    },\n    fields: {\n      type: new GraphQLList(new GraphQLNonNull(__Field)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (isObjectType(type) || isInterfaceType(type)) {\n          const fields = Object.values(type.getFields());\n          return includeDeprecated\n            ? fields\n            : fields.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    interfaces: {\n      type: new GraphQLList(new GraphQLNonNull(__Type)),\n\n      resolve(type) {\n        if (isObjectType(type) || isInterfaceType(type)) {\n          return type.getInterfaces();\n        }\n      },\n    },\n    possibleTypes: {\n      type: new GraphQLList(new GraphQLNonNull(__Type)),\n\n      resolve(type, _args, _context, { schema }) {\n        if (isAbstractType(type)) {\n          return schema.getPossibleTypes(type);\n        }\n      },\n    },\n    enumValues: {\n      type: new GraphQLList(new GraphQLNonNull(__EnumValue)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (isEnumType(type)) {\n          const values = type.getValues();\n          return includeDeprecated\n            ? values\n            : values.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    inputFields: {\n      type: new GraphQLList(new GraphQLNonNull(__InputValue)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (isInputObjectType(type)) {\n          const values = Object.values(type.getFields());\n          return includeDeprecated\n            ? values\n            : values.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    ofType: {\n      type: __Type,\n      resolve: (type) => ('ofType' in type ? type.ofType : undefined),\n    },\n  }),\n});\nexport const __Field = new GraphQLObjectType({\n  name: '__Field',\n  description:\n    'Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (field) => field.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (field) => field.description,\n    },\n    args: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__InputValue)),\n      ),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(field, { includeDeprecated }) {\n        return includeDeprecated\n          ? field.args\n          : field.args.filter((arg) => arg.deprecationReason == null);\n      },\n    },\n    type: {\n      type: new GraphQLNonNull(__Type),\n      resolve: (field) => field.type,\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (field) => field.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (field) => field.deprecationReason,\n    },\n  }),\n});\nexport const __InputValue = new GraphQLObjectType({\n  name: '__InputValue',\n  description:\n    'Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (inputValue) => inputValue.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (inputValue) => inputValue.description,\n    },\n    type: {\n      type: new GraphQLNonNull(__Type),\n      resolve: (inputValue) => inputValue.type,\n    },\n    defaultValue: {\n      type: GraphQLString,\n      description:\n        'A GraphQL-formatted string representing the default value for this input value.',\n\n      resolve(inputValue) {\n        const { type, defaultValue } = inputValue;\n        const valueAST = astFromValue(defaultValue, type);\n        return valueAST ? print(valueAST) : null;\n      },\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (field) => field.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (obj) => obj.deprecationReason,\n    },\n  }),\n});\nexport const __EnumValue = new GraphQLObjectType({\n  name: '__EnumValue',\n  description:\n    'One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (enumValue) => enumValue.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (enumValue) => enumValue.description,\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (enumValue) => enumValue.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (enumValue) => enumValue.deprecationReason,\n    },\n  }),\n});\nexport let TypeKind;\n\n(function (TypeKind) {\n  TypeKind['SCALAR'] = 'SCALAR';\n  TypeKind['OBJECT'] = 'OBJECT';\n  TypeKind['INTERFACE'] = 'INTERFACE';\n  TypeKind['UNION'] = 'UNION';\n  TypeKind['ENUM'] = 'ENUM';\n  TypeKind['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  TypeKind['LIST'] = 'LIST';\n  TypeKind['NON_NULL'] = 'NON_NULL';\n})(TypeKind || (TypeKind = {}));\n\nexport const __TypeKind = new GraphQLEnumType({\n  name: '__TypeKind',\n  description: 'An enum describing what kind of type a given `__Type` is.',\n  values: {\n    SCALAR: {\n      value: TypeKind.SCALAR,\n      description: 'Indicates this type is a scalar.',\n    },\n    OBJECT: {\n      value: TypeKind.OBJECT,\n      description:\n        'Indicates this type is an object. `fields` and `interfaces` are valid fields.',\n    },\n    INTERFACE: {\n      value: TypeKind.INTERFACE,\n      description:\n        'Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.',\n    },\n    UNION: {\n      value: TypeKind.UNION,\n      description:\n        'Indicates this type is a union. `possibleTypes` is a valid field.',\n    },\n    ENUM: {\n      value: TypeKind.ENUM,\n      description:\n        'Indicates this type is an enum. `enumValues` is a valid field.',\n    },\n    INPUT_OBJECT: {\n      value: TypeKind.INPUT_OBJECT,\n      description:\n        'Indicates this type is an input object. `inputFields` is a valid field.',\n    },\n    LIST: {\n      value: TypeKind.LIST,\n      description: 'Indicates this type is a list. `ofType` is a valid field.',\n    },\n    NON_NULL: {\n      value: TypeKind.NON_NULL,\n      description:\n        'Indicates this type is a non-null. `ofType` is a valid field.',\n    },\n  },\n});\n/**\n * Note that these are GraphQLField and not GraphQLFieldConfig,\n * so the format for args is different.\n */\n\nexport const SchemaMetaFieldDef = {\n  name: '__schema',\n  type: new GraphQLNonNull(__Schema),\n  description: 'Access the current type schema of this server.',\n  args: [],\n  resolve: (_source, _args, _context, { schema }) => schema,\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const TypeMetaFieldDef = {\n  name: '__type',\n  type: __Type,\n  description: 'Request the type information of a single type.',\n  args: [\n    {\n      name: 'name',\n      description: undefined,\n      type: new GraphQLNonNull(GraphQLString),\n      defaultValue: undefined,\n      deprecationReason: undefined,\n      extensions: Object.create(null),\n      astNode: undefined,\n    },\n  ],\n  resolve: (_source, { name }, _context, { schema }) => schema.getType(name),\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const TypeNameMetaFieldDef = {\n  name: '__typename',\n  type: new GraphQLNonNull(GraphQLString),\n  description: 'The name of the current Object type at runtime.',\n  args: [],\n  resolve: (_source, _args, _context, { parentType }) => parentType.name,\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const introspectionTypes = Object.freeze([\n  __Schema,\n  __Directive,\n  __DirectiveLocation,\n  __Type,\n  __Field,\n  __InputValue,\n  __EnumValue,\n  __TypeKind,\n]);\nexport function isIntrospectionType(type) {\n  return introspectionTypes.some(({ name }) => type.name === name);\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport {\n  getNamedType,\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n  isUnionType,\n} from './definition.mjs';\nimport { isDirective, specifiedDirectives } from './directives.mjs';\nimport { __Schema } from './introspection.mjs';\n/**\n * Test if the given value is a GraphQL schema.\n */\n\nexport function isSchema(schema) {\n  return instanceOf(schema, GraphQLSchema);\n}\nexport function assertSchema(schema) {\n  if (!isSchema(schema)) {\n    throw new Error(`Expected ${inspect(schema)} to be a GraphQL schema.`);\n  }\n\n  return schema;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Schema Definition\n *\n * A Schema is created by supplying the root types of each type of operation,\n * query and mutation (optional). A schema definition is then supplied to the\n * validator and executor.\n *\n * Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   query: MyAppQueryRootType,\n *   mutation: MyAppMutationRootType,\n * })\n * ```\n *\n * Note: When the schema is constructed, by default only the types that are\n * reachable by traversing the root types are included, other types must be\n * explicitly referenced.\n *\n * Example:\n *\n * ```ts\n * const characterInterface = new GraphQLInterfaceType({\n *   name: 'Character',\n *   ...\n * });\n *\n * const humanType = new GraphQLObjectType({\n *   name: 'Human',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const droidType = new GraphQLObjectType({\n *   name: 'Droid',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const schema = new GraphQLSchema({\n *   query: new GraphQLObjectType({\n *     name: 'Query',\n *     fields: {\n *       hero: { type: characterInterface, ... },\n *     }\n *   }),\n *   ...\n *   // Since this schema references only the `Character` interface it's\n *   // necessary to explicitly list the types that implement it if\n *   // you want them to be included in the final schema.\n *   types: [humanType, droidType],\n * })\n * ```\n *\n * Note: If an array of `directives` are provided to GraphQLSchema, that will be\n * the exact list of directives represented and allowed. If `directives` is not\n * provided then a default set of the specified directives (e.g. `@include` and\n * `@skip`) will be used. If you wish to provide *additional* directives to these\n * specified directives, you must explicitly declare them. Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   ...\n *   directives: specifiedDirectives.concat([ myCustomDirective ]),\n * })\n * ```\n */\nexport class GraphQLSchema {\n  // Used as a cache for validateSchema().\n  constructor(config) {\n    var _config$extensionASTN, _config$directives;\n\n    // If this schema was built from a source known to be valid, then it may be\n    // marked with assumeValid to avoid an additional type system validation.\n    this.__validationErrors = config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.\n\n    isObjectLike(config) ||\n      devAssert(false, 'Must provide configuration object.');\n    !config.types ||\n      Array.isArray(config.types) ||\n      devAssert(\n        false,\n        `\"types\" must be Array if provided but got: ${inspect(config.types)}.`,\n      );\n    !config.directives ||\n      Array.isArray(config.directives) ||\n      devAssert(\n        false,\n        '\"directives\" must be Array if provided but got: ' +\n          `${inspect(config.directives)}.`,\n      );\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN = config.extensionASTNodes) !== null &&\n      _config$extensionASTN !== void 0\n        ? _config$extensionASTN\n        : [];\n    this._queryType = config.query;\n    this._mutationType = config.mutation;\n    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.\n\n    this._directives =\n      (_config$directives = config.directives) !== null &&\n      _config$directives !== void 0\n        ? _config$directives\n        : specifiedDirectives; // To preserve order of user-provided types, we add first to add them to\n    // the set of \"collected\" types, so `collectReferencedTypes` ignore them.\n\n    const allReferencedTypes = new Set(config.types);\n\n    if (config.types != null) {\n      for (const type of config.types) {\n        // When we ready to process this type, we remove it from \"collected\" types\n        // and then add it together with all dependent types in the correct position.\n        allReferencedTypes.delete(type);\n        collectReferencedTypes(type, allReferencedTypes);\n      }\n    }\n\n    if (this._queryType != null) {\n      collectReferencedTypes(this._queryType, allReferencedTypes);\n    }\n\n    if (this._mutationType != null) {\n      collectReferencedTypes(this._mutationType, allReferencedTypes);\n    }\n\n    if (this._subscriptionType != null) {\n      collectReferencedTypes(this._subscriptionType, allReferencedTypes);\n    }\n\n    for (const directive of this._directives) {\n      // Directives are not validated until validateSchema() is called.\n      if (isDirective(directive)) {\n        for (const arg of directive.args) {\n          collectReferencedTypes(arg.type, allReferencedTypes);\n        }\n      }\n    }\n\n    collectReferencedTypes(__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.\n\n    this._typeMap = Object.create(null);\n    this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.\n\n    this._implementationsMap = Object.create(null);\n\n    for (const namedType of allReferencedTypes) {\n      if (namedType == null) {\n        continue;\n      }\n\n      const typeName = namedType.name;\n      typeName ||\n        devAssert(\n          false,\n          'One of the provided types for building the Schema is missing a name.',\n        );\n\n      if (this._typeMap[typeName] !== undefined) {\n        throw new Error(\n          `Schema must contain uniquely named types but contains multiple types named \"${typeName}\".`,\n        );\n      }\n\n      this._typeMap[typeName] = namedType;\n\n      if (isInterfaceType(namedType)) {\n        // Store implementations by interface.\n        for (const iface of namedType.getInterfaces()) {\n          if (isInterfaceType(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: [],\n              };\n            }\n\n            implementations.interfaces.push(namedType);\n          }\n        }\n      } else if (isObjectType(namedType)) {\n        // Store implementations by objects.\n        for (const iface of namedType.getInterfaces()) {\n          if (isInterfaceType(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: [],\n              };\n            }\n\n            implementations.objects.push(namedType);\n          }\n        }\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLSchema';\n  }\n\n  getQueryType() {\n    return this._queryType;\n  }\n\n  getMutationType() {\n    return this._mutationType;\n  }\n\n  getSubscriptionType() {\n    return this._subscriptionType;\n  }\n\n  getRootType(operation) {\n    switch (operation) {\n      case OperationTypeNode.QUERY:\n        return this.getQueryType();\n\n      case OperationTypeNode.MUTATION:\n        return this.getMutationType();\n\n      case OperationTypeNode.SUBSCRIPTION:\n        return this.getSubscriptionType();\n    }\n  }\n\n  getTypeMap() {\n    return this._typeMap;\n  }\n\n  getType(name) {\n    return this.getTypeMap()[name];\n  }\n\n  getPossibleTypes(abstractType) {\n    return isUnionType(abstractType)\n      ? abstractType.getTypes()\n      : this.getImplementations(abstractType).objects;\n  }\n\n  getImplementations(interfaceType) {\n    const implementations = this._implementationsMap[interfaceType.name];\n    return implementations !== null && implementations !== void 0\n      ? implementations\n      : {\n          objects: [],\n          interfaces: [],\n        };\n  }\n\n  isSubType(abstractType, maybeSubType) {\n    let map = this._subTypeMap[abstractType.name];\n\n    if (map === undefined) {\n      map = Object.create(null);\n\n      if (isUnionType(abstractType)) {\n        for (const type of abstractType.getTypes()) {\n          map[type.name] = true;\n        }\n      } else {\n        const implementations = this.getImplementations(abstractType);\n\n        for (const type of implementations.objects) {\n          map[type.name] = true;\n        }\n\n        for (const type of implementations.interfaces) {\n          map[type.name] = true;\n        }\n      }\n\n      this._subTypeMap[abstractType.name] = map;\n    }\n\n    return map[maybeSubType.name] !== undefined;\n  }\n\n  getDirectives() {\n    return this._directives;\n  }\n\n  getDirective(name) {\n    return this.getDirectives().find((directive) => directive.name === name);\n  }\n\n  toConfig() {\n    return {\n      description: this.description,\n      query: this.getQueryType(),\n      mutation: this.getMutationType(),\n      subscription: this.getSubscriptionType(),\n      types: Object.values(this.getTypeMap()),\n      directives: this.getDirectives(),\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n      assumeValid: this.__validationErrors !== undefined,\n    };\n  }\n}\n\nfunction collectReferencedTypes(type, typeSet) {\n  const namedType = getNamedType(type);\n\n  if (!typeSet.has(namedType)) {\n    typeSet.add(namedType);\n\n    if (isUnionType(namedType)) {\n      for (const memberType of namedType.getTypes()) {\n        collectReferencedTypes(memberType, typeSet);\n      }\n    } else if (isObjectType(namedType) || isInterfaceType(namedType)) {\n      for (const interfaceType of namedType.getInterfaces()) {\n        collectReferencedTypes(interfaceType, typeSet);\n      }\n\n      for (const field of Object.values(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n\n        for (const arg of field.args) {\n          collectReferencedTypes(arg.type, typeSet);\n        }\n      }\n    } else if (isInputObjectType(namedType)) {\n      for (const field of Object.values(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n      }\n    }\n  }\n\n  return typeSet;\n}\n", "import { Kind } from '../language/kinds.mjs';\nimport { GraphQLList, GraphQLNonNull } from '../type/definition.mjs';\nexport function typeFromAST(schema, typeNode) {\n  switch (typeNode.kind) {\n    case Kind.LIST_TYPE: {\n      const innerType = typeFromAST(schema, typeNode.type);\n      return innerType && new GraphQLList(innerType);\n    }\n\n    case Kind.NON_NULL_TYPE: {\n      const innerType = typeFromAST(schema, typeNode.type);\n      return innerType && new GraphQLNonNull(innerType);\n    }\n\n    case Kind.NAMED_TYPE:\n      return schema.getType(typeNode.name.value);\n  }\n}\n", "import { isNode } from '../language/ast.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { getEnterLeaveForKind } from '../language/visitor.mjs';\nimport {\n  getNamedType,\n  getNullableType,\n  isCompositeType,\n  isEnumType,\n  isInputObjectType,\n  isInputType,\n  isInterfaceType,\n  isListType,\n  isObjectType,\n  isOutputType,\n} from '../type/definition.mjs';\nimport {\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n} from '../type/introspection.mjs';\nimport { typeFromAST } from './typeFromAST.mjs';\n/**\n * TypeInfo is a utility class which, given a GraphQL schema, can keep track\n * of the current field and type definitions at any point in a GraphQL document\n * AST during a recursive descent by calling `enter(node)` and `leave(node)`.\n */\n\nexport class TypeInfo {\n  constructor(\n    schema,\n    /**\n     * Initial type may be provided in rare cases to facilitate traversals\n     *  beginning somewhere other than documents.\n     */\n    initialType,\n    /** @deprecated will be removed in 17.0.0 */\n    getFieldDefFn,\n  ) {\n    this._schema = schema;\n    this._typeStack = [];\n    this._parentTypeStack = [];\n    this._inputTypeStack = [];\n    this._fieldDefStack = [];\n    this._defaultValueStack = [];\n    this._directive = null;\n    this._argument = null;\n    this._enumValue = null;\n    this._getFieldDef =\n      getFieldDefFn !== null && getFieldDefFn !== void 0\n        ? getFieldDefFn\n        : getFieldDef;\n\n    if (initialType) {\n      if (isInputType(initialType)) {\n        this._inputTypeStack.push(initialType);\n      }\n\n      if (isCompositeType(initialType)) {\n        this._parentTypeStack.push(initialType);\n      }\n\n      if (isOutputType(initialType)) {\n        this._typeStack.push(initialType);\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'TypeInfo';\n  }\n\n  getType() {\n    if (this._typeStack.length > 0) {\n      return this._typeStack[this._typeStack.length - 1];\n    }\n  }\n\n  getParentType() {\n    if (this._parentTypeStack.length > 0) {\n      return this._parentTypeStack[this._parentTypeStack.length - 1];\n    }\n  }\n\n  getInputType() {\n    if (this._inputTypeStack.length > 0) {\n      return this._inputTypeStack[this._inputTypeStack.length - 1];\n    }\n  }\n\n  getParentInputType() {\n    if (this._inputTypeStack.length > 1) {\n      return this._inputTypeStack[this._inputTypeStack.length - 2];\n    }\n  }\n\n  getFieldDef() {\n    if (this._fieldDefStack.length > 0) {\n      return this._fieldDefStack[this._fieldDefStack.length - 1];\n    }\n  }\n\n  getDefaultValue() {\n    if (this._defaultValueStack.length > 0) {\n      return this._defaultValueStack[this._defaultValueStack.length - 1];\n    }\n  }\n\n  getDirective() {\n    return this._directive;\n  }\n\n  getArgument() {\n    return this._argument;\n  }\n\n  getEnumValue() {\n    return this._enumValue;\n  }\n\n  enter(node) {\n    const schema = this._schema; // Note: many of the types below are explicitly typed as \"unknown\" to drop\n    // any assumptions of a valid schema to ensure runtime types are properly\n    // checked before continuing since TypeInfo is used as part of validation\n    // which occurs before guarantees of schema and document validity.\n\n    switch (node.kind) {\n      case Kind.SELECTION_SET: {\n        const namedType = getNamedType(this.getType());\n\n        this._parentTypeStack.push(\n          isCompositeType(namedType) ? namedType : undefined,\n        );\n\n        break;\n      }\n\n      case Kind.FIELD: {\n        const parentType = this.getParentType();\n        let fieldDef;\n        let fieldType;\n\n        if (parentType) {\n          fieldDef = this._getFieldDef(schema, parentType, node);\n\n          if (fieldDef) {\n            fieldType = fieldDef.type;\n          }\n        }\n\n        this._fieldDefStack.push(fieldDef);\n\n        this._typeStack.push(isOutputType(fieldType) ? fieldType : undefined);\n\n        break;\n      }\n\n      case Kind.DIRECTIVE:\n        this._directive = schema.getDirective(node.name.value);\n        break;\n\n      case Kind.OPERATION_DEFINITION: {\n        const rootType = schema.getRootType(node.operation);\n\n        this._typeStack.push(isObjectType(rootType) ? rootType : undefined);\n\n        break;\n      }\n\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION: {\n        const typeConditionAST = node.typeCondition;\n        const outputType = typeConditionAST\n          ? typeFromAST(schema, typeConditionAST)\n          : getNamedType(this.getType());\n\n        this._typeStack.push(isOutputType(outputType) ? outputType : undefined);\n\n        break;\n      }\n\n      case Kind.VARIABLE_DEFINITION: {\n        const inputType = typeFromAST(schema, node.type);\n\n        this._inputTypeStack.push(\n          isInputType(inputType) ? inputType : undefined,\n        );\n\n        break;\n      }\n\n      case Kind.ARGUMENT: {\n        var _this$getDirective;\n\n        let argDef;\n        let argType;\n        const fieldOrDirective =\n          (_this$getDirective = this.getDirective()) !== null &&\n          _this$getDirective !== void 0\n            ? _this$getDirective\n            : this.getFieldDef();\n\n        if (fieldOrDirective) {\n          argDef = fieldOrDirective.args.find(\n            (arg) => arg.name === node.name.value,\n          );\n\n          if (argDef) {\n            argType = argDef.type;\n          }\n        }\n\n        this._argument = argDef;\n\n        this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);\n\n        this._inputTypeStack.push(isInputType(argType) ? argType : undefined);\n\n        break;\n      }\n\n      case Kind.LIST: {\n        const listType = getNullableType(this.getInputType());\n        const itemType = isListType(listType) ? listType.ofType : listType; // List positions never have a default value.\n\n        this._defaultValueStack.push(undefined);\n\n        this._inputTypeStack.push(isInputType(itemType) ? itemType : undefined);\n\n        break;\n      }\n\n      case Kind.OBJECT_FIELD: {\n        const objectType = getNamedType(this.getInputType());\n        let inputFieldType;\n        let inputField;\n\n        if (isInputObjectType(objectType)) {\n          inputField = objectType.getFields()[node.name.value];\n\n          if (inputField) {\n            inputFieldType = inputField.type;\n          }\n        }\n\n        this._defaultValueStack.push(\n          inputField ? inputField.defaultValue : undefined,\n        );\n\n        this._inputTypeStack.push(\n          isInputType(inputFieldType) ? inputFieldType : undefined,\n        );\n\n        break;\n      }\n\n      case Kind.ENUM: {\n        const enumType = getNamedType(this.getInputType());\n        let enumValue;\n\n        if (isEnumType(enumType)) {\n          enumValue = enumType.getValue(node.value);\n        }\n\n        this._enumValue = enumValue;\n        break;\n      }\n\n      default: // Ignore other nodes\n    }\n  }\n\n  leave(node) {\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        this._parentTypeStack.pop();\n\n        break;\n\n      case Kind.FIELD:\n        this._fieldDefStack.pop();\n\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.DIRECTIVE:\n        this._directive = null;\n        break;\n\n      case Kind.OPERATION_DEFINITION:\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.VARIABLE_DEFINITION:\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ARGUMENT:\n        this._argument = null;\n\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.LIST:\n      case Kind.OBJECT_FIELD:\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ENUM:\n        this._enumValue = null;\n        break;\n\n      default: // Ignore other nodes\n    }\n  }\n}\n\n/**\n * Not exactly the same as the executor's definition of getFieldDef, in this\n * statically evaluated environment we do not always have an Object type,\n * and need to handle Interface and Union types.\n */\nfunction getFieldDef(schema, parentType, fieldNode) {\n  const name = fieldNode.name.value;\n\n  if (\n    name === SchemaMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return SchemaMetaFieldDef;\n  }\n\n  if (name === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  }\n\n  if (name === TypeNameMetaFieldDef.name && isCompositeType(parentType)) {\n    return TypeNameMetaFieldDef;\n  }\n\n  if (isObjectType(parentType) || isInterfaceType(parentType)) {\n    return parentType.getFields()[name];\n  }\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter(...args) {\n      const node = args[0];\n      typeInfo.enter(node);\n      const fn = getEnterLeaveForKind(visitor, node.kind).enter;\n\n      if (fn) {\n        const result = fn.apply(visitor, args);\n\n        if (result !== undefined) {\n          typeInfo.leave(node);\n\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n\n        return result;\n      }\n    },\n\n    leave(...args) {\n      const node = args[0];\n      const fn = getEnterLeaveForKind(visitor, node.kind).leave;\n      let result;\n\n      if (fn) {\n        result = fn.apply(visitor, args);\n      }\n\n      typeInfo.leave(node);\n      return result;\n    },\n  };\n}\n", "import { Kind } from './kinds.mjs';\nexport function isDefinitionNode(node) {\n  return (\n    isExecutableDefinitionNode(node) ||\n    isTypeSystemDefinitionNode(node) ||\n    isTypeSystemExtensionNode(node)\n  );\n}\nexport function isExecutableDefinitionNode(node) {\n  return (\n    node.kind === Kind.OPERATION_DEFINITION ||\n    node.kind === Kind.FRAGMENT_DEFINITION\n  );\n}\nexport function isSelectionNode(node) {\n  return (\n    node.kind === Kind.FIELD ||\n    node.kind === Kind.FRAGMENT_SPREAD ||\n    node.kind === Kind.INLINE_FRAGMENT\n  );\n}\nexport function isValueNode(node) {\n  return (\n    node.kind === Kind.VARIABLE ||\n    node.kind === Kind.INT ||\n    node.kind === Kind.FLOAT ||\n    node.kind === Kind.STRING ||\n    node.kind === Kind.BOOLEAN ||\n    node.kind === Kind.NULL ||\n    node.kind === Kind.ENUM ||\n    node.kind === Kind.LIST ||\n    node.kind === Kind.OBJECT\n  );\n}\nexport function isConstValueNode(node) {\n  return (\n    isValueNode(node) &&\n    (node.kind === Kind.LIST\n      ? node.values.some(isConstValueNode)\n      : node.kind === Kind.OBJECT\n      ? node.fields.some((field) => isConstValueNode(field.value))\n      : node.kind !== Kind.VARIABLE)\n  );\n}\nexport function isTypeNode(node) {\n  return (\n    node.kind === Kind.NAMED_TYPE ||\n    node.kind === Kind.LIST_TYPE ||\n    node.kind === Kind.NON_NULL_TYPE\n  );\n}\nexport function isTypeSystemDefinitionNode(node) {\n  return (\n    node.kind === Kind.SCHEMA_DEFINITION ||\n    isTypeDefinitionNode(node) ||\n    node.kind === Kind.DIRECTIVE_DEFINITION\n  );\n}\nexport function isTypeDefinitionNode(node) {\n  return (\n    node.kind === Kind.SCALAR_TYPE_DEFINITION ||\n    node.kind === Kind.OBJECT_TYPE_DEFINITION ||\n    node.kind === Kind.INTERFACE_TYPE_DEFINITION ||\n    node.kind === Kind.UNION_TYPE_DEFINITION ||\n    node.kind === Kind.ENUM_TYPE_DEFINITION ||\n    node.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION\n  );\n}\nexport function isTypeSystemExtensionNode(node) {\n  return node.kind === Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);\n}\nexport function isTypeExtensionNode(node) {\n  return (\n    node.kind === Kind.SCALAR_TYPE_EXTENSION ||\n    node.kind === Kind.OBJECT_TYPE_EXTENSION ||\n    node.kind === Kind.INTERFACE_TYPE_EXTENSION ||\n    node.kind === Kind.UNION_TYPE_EXTENSION ||\n    node.kind === Kind.ENUM_TYPE_EXTENSION ||\n    node.kind === Kind.INPUT_OBJECT_TYPE_EXTENSION\n  );\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isExecutableDefinitionNode } from '../../language/predicates.mjs';\n\n/**\n * Executable definitions\n *\n * A GraphQL document is only valid for execution if all definitions are either\n * operation or fragment definitions.\n *\n * See https://spec.graphql.org/draft/#sec-Executable-Definitions\n */\nexport function ExecutableDefinitionsRule(context) {\n  return {\n    Document(node) {\n      for (const definition of node.definitions) {\n        if (!isExecutableDefinitionNode(definition)) {\n          const defName =\n            definition.kind === Kind.SCHEMA_DEFINITION ||\n            definition.kind === Kind.SCHEMA_EXTENSION\n              ? 'schema'\n              : '\"' + definition.name.value + '\"';\n          context.reportError(\n            new GraphQLError(\n              `The ${defName} definition is not executable.`,\n              definition,\n            ),\n          );\n        }\n      }\n\n      return false;\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { naturalCompare } from '../../jsutils/naturalCompare.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isAbstractType,\n  isInterfaceType,\n  isObjectType,\n} from '../../type/definition.mjs';\n\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selections\n */\nexport function FieldsOnCorrectTypeRule(context) {\n  return {\n    Field(node) {\n      const type = context.getParentType();\n\n      if (type) {\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          const schema = context.getSchema();\n          const fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          let suggestion = didYouMean(\n            'to use an inline fragment on',\n            getSuggestedTypeNames(schema, type, fieldName),\n          ); // If there are no suggested types, then perhaps this was a typo?\n\n          if (suggestion === '') {\n            suggestion = didYouMean(getSuggestedFieldNames(type, fieldName));\n          } // Report an error, including helpful suggestions.\n\n          context.reportError(\n            new GraphQLError(\n              `Cannot query field \"${fieldName}\" on type \"${type.name}\".` +\n                suggestion,\n              node,\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest them,\n * sorted by how often the type is referenced.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (!isAbstractType(type)) {\n    // Must be an Object type, which does not have possible fields.\n    return [];\n  }\n\n  const suggestedTypes = new Set();\n  const usageCount = Object.create(null);\n\n  for (const possibleType of schema.getPossibleTypes(type)) {\n    if (!possibleType.getFields()[fieldName]) {\n      continue;\n    } // This object type defines this field.\n\n    suggestedTypes.add(possibleType);\n    usageCount[possibleType.name] = 1;\n\n    for (const possibleInterface of possibleType.getInterfaces()) {\n      var _usageCount$possibleI;\n\n      if (!possibleInterface.getFields()[fieldName]) {\n        continue;\n      } // This interface type defines this field.\n\n      suggestedTypes.add(possibleInterface);\n      usageCount[possibleInterface.name] =\n        ((_usageCount$possibleI = usageCount[possibleInterface.name]) !==\n          null && _usageCount$possibleI !== void 0\n          ? _usageCount$possibleI\n          : 0) + 1;\n    }\n  }\n\n  return [...suggestedTypes]\n    .sort((typeA, typeB) => {\n      // Suggest both interface and object types based on how common they are.\n      const usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];\n\n      if (usageCountDiff !== 0) {\n        return usageCountDiff;\n      } // Suggest super types first followed by subtypes\n\n      if (isInterfaceType(typeA) && schema.isSubType(typeA, typeB)) {\n        return -1;\n      }\n\n      if (isInterfaceType(typeB) && schema.isSubType(typeB, typeA)) {\n        return 1;\n      }\n\n      return naturalCompare(typeA.name, typeB.name);\n    })\n    .map((x) => x.name);\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\nfunction getSuggestedFieldNames(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type)) {\n    const possibleFieldNames = Object.keys(type.getFields());\n    return suggestionList(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n  return [];\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-On-Composite-Types\n */\nexport function FragmentsOnCompositeTypesRule(context) {\n  return {\n    InlineFragment(node) {\n      const typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        const type = typeFromAST(context.getSchema(), typeCondition);\n\n        if (type && !isCompositeType(type)) {\n          const typeStr = print(typeCondition);\n          context.reportError(\n            new GraphQLError(\n              `Fragment cannot condition on non composite type \"${typeStr}\".`,\n              typeCondition,\n            ),\n          );\n        }\n      }\n    },\n\n    FragmentDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.typeCondition);\n\n      if (type && !isCompositeType(type)) {\n        const typeStr = print(node.typeCondition);\n        context.reportError(\n          new GraphQLError(\n            `Fragment \"${node.name.value}\" cannot condition on non composite type \"${typeStr}\".`,\n            node.typeCondition,\n          ),\n        );\n      }\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n * See https://spec.graphql.org/draft/#sec-Directives-Are-In-Valid-Locations\n */\nexport function KnownArgumentNamesRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...KnownArgumentNamesOnDirectivesRule(context),\n\n    Argument(argNode) {\n      const argDef = context.getArgument();\n      const fieldDef = context.getFieldDef();\n      const parentType = context.getParentType();\n\n      if (!argDef && fieldDef && parentType) {\n        const argName = argNode.name.value;\n        const knownArgsNames = fieldDef.args.map((arg) => arg.name);\n        const suggestions = suggestionList(argName, knownArgsNames);\n        context.reportError(\n          new GraphQLError(\n            `Unknown argument \"${argName}\" on field \"${parentType.name}.${fieldDef.name}\".` +\n              didYouMean(suggestions),\n            argNode,\n          ),\n        );\n      }\n    },\n  };\n}\n/**\n * @internal\n */\n\nexport function KnownArgumentNamesOnDirectivesRule(context) {\n  const directiveArgs = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    directiveArgs[directive.name] = directive.args.map((arg) => arg.name);\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argsNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      directiveArgs[def.name.value] = argsNodes.map((arg) => arg.name.value);\n    }\n  }\n\n  return {\n    Directive(directiveNode) {\n      const directiveName = directiveNode.name.value;\n      const knownArgs = directiveArgs[directiveName];\n\n      if (directiveNode.arguments && knownArgs) {\n        for (const argNode of directiveNode.arguments) {\n          const argName = argNode.name.value;\n\n          if (!knownArgs.includes(argName)) {\n            const suggestions = suggestionList(argName, knownArgs);\n            context.reportError(\n              new GraphQLError(\n                `Unknown argument \"${argName}\" on directive \"@${directiveName}\".` +\n                  didYouMean(suggestions),\n                argNode,\n              ),\n            );\n          }\n        }\n      }\n\n      return false;\n    },\n  };\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { OperationTypeNode } from '../../language/ast.mjs';\nimport { DirectiveLocation } from '../../language/directiveLocation.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known directives\n *\n * A GraphQL document is only valid if all `@directives` are known by the\n * schema and legally positioned.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Defined\n */\nexport function KnownDirectivesRule(context) {\n  const locationsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    locationsMap[directive.name] = directive.locations;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      locationsMap[def.name.value] = def.locations.map((name) => name.value);\n    }\n  }\n\n  return {\n    Directive(node, _key, _parent, _path, ancestors) {\n      const name = node.name.value;\n      const locations = locationsMap[name];\n\n      if (!locations) {\n        context.reportError(\n          new GraphQLError(`Unknown directive \"@${name}\".`, node),\n        );\n        return;\n      }\n\n      const candidateLocation = getDirectiveLocationForASTPath(ancestors);\n\n      if (candidateLocation && !locations.includes(candidateLocation)) {\n        context.reportError(\n          new GraphQLError(\n            `Directive \"@${name}\" may not be used on ${candidateLocation}.`,\n            node,\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getDirectiveLocationForASTPath(ancestors) {\n  const appliedTo = ancestors[ancestors.length - 1];\n  'kind' in appliedTo || invariant(false);\n\n  switch (appliedTo.kind) {\n    case Kind.OPERATION_DEFINITION:\n      return getDirectiveLocationForOperation(appliedTo.operation);\n\n    case Kind.FIELD:\n      return DirectiveLocation.FIELD;\n\n    case Kind.FRAGMENT_SPREAD:\n      return DirectiveLocation.FRAGMENT_SPREAD;\n\n    case Kind.INLINE_FRAGMENT:\n      return DirectiveLocation.INLINE_FRAGMENT;\n\n    case Kind.FRAGMENT_DEFINITION:\n      return DirectiveLocation.FRAGMENT_DEFINITION;\n\n    case Kind.VARIABLE_DEFINITION:\n      return DirectiveLocation.VARIABLE_DEFINITION;\n\n    case Kind.SCHEMA_DEFINITION:\n    case Kind.SCHEMA_EXTENSION:\n      return DirectiveLocation.SCHEMA;\n\n    case Kind.SCALAR_TYPE_DEFINITION:\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return DirectiveLocation.SCALAR;\n\n    case Kind.OBJECT_TYPE_DEFINITION:\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.OBJECT;\n\n    case Kind.FIELD_DEFINITION:\n      return DirectiveLocation.FIELD_DEFINITION;\n\n    case Kind.INTERFACE_TYPE_DEFINITION:\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return DirectiveLocation.INTERFACE;\n\n    case Kind.UNION_TYPE_DEFINITION:\n    case Kind.UNION_TYPE_EXTENSION:\n      return DirectiveLocation.UNION;\n\n    case Kind.ENUM_TYPE_DEFINITION:\n    case Kind.ENUM_TYPE_EXTENSION:\n      return DirectiveLocation.ENUM;\n\n    case Kind.ENUM_VALUE_DEFINITION:\n      return DirectiveLocation.ENUM_VALUE;\n\n    case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.INPUT_OBJECT;\n\n    case Kind.INPUT_VALUE_DEFINITION: {\n      const parentNode = ancestors[ancestors.length - 3];\n      'kind' in parentNode || invariant(false);\n      return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION\n        ? DirectiveLocation.INPUT_FIELD_DEFINITION\n        : DirectiveLocation.ARGUMENT_DEFINITION;\n    }\n    // Not reachable, all possible types have been considered.\n\n    /* c8 ignore next */\n\n    default:\n      false || invariant(false, 'Unexpected kind: ' + inspect(appliedTo.kind));\n  }\n}\n\nfunction getDirectiveLocationForOperation(operation) {\n  switch (operation) {\n    case OperationTypeNode.QUERY:\n      return DirectiveLocation.QUERY;\n\n    case OperationTypeNode.MUTATION:\n      return DirectiveLocation.MUTATION;\n\n    case OperationTypeNode.SUBSCRIPTION:\n      return DirectiveLocation.SUBSCRIPTION;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Known fragment names\n *\n * A GraphQL document is only valid if all `...Fragment` fragment spreads refer\n * to fragments defined in the same document.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-spread-target-defined\n */\nexport function KnownFragmentNamesRule(context) {\n  return {\n    FragmentSpread(node) {\n      const fragmentName = node.name.value;\n      const fragment = context.getFragment(fragmentName);\n\n      if (!fragment) {\n        context.reportError(\n          new GraphQLError(`Unknown fragment \"${fragmentName}\".`, node.name),\n        );\n      }\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeSystemDefinitionNode,\n  isTypeSystemExtensionNode,\n} from '../../language/predicates.mjs';\nimport { introspectionTypes } from '../../type/introspection.mjs';\nimport { specifiedScalarTypes } from '../../type/scalars.mjs';\n\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-Spread-Type-Existence\n */\nexport function KnownTypeNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = true;\n    }\n  }\n\n  const typeNames = [\n    ...Object.keys(existingTypesMap),\n    ...Object.keys(definedTypes),\n  ];\n  return {\n    NamedType(node, _1, parent, _2, ancestors) {\n      const typeName = node.name.value;\n\n      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {\n        var _ancestors$;\n\n        const definitionNode =\n          (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0\n            ? _ancestors$\n            : parent;\n        const isSDL = definitionNode != null && isSDLNode(definitionNode);\n\n        if (isSDL && standardTypeNames.includes(typeName)) {\n          return;\n        }\n\n        const suggestedTypes = suggestionList(\n          typeName,\n          isSDL ? standardTypeNames.concat(typeNames) : typeNames,\n        );\n        context.reportError(\n          new GraphQLError(\n            `Unknown type \"${typeName}\".` + didYouMean(suggestedTypes),\n            node,\n          ),\n        );\n      }\n    },\n  };\n}\nconst standardTypeNames = [...specifiedScalarTypes, ...introspectionTypes].map(\n  (type) => type.name,\n);\n\nfunction isSDLNode(value) {\n  return (\n    'kind' in value &&\n    (isTypeSystemDefinitionNode(value) || isTypeSystemExtensionNode(value))\n  );\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\n\n/**\n * Lone anonymous operation\n *\n * A GraphQL document is only valid if when it contains an anonymous operation\n * (the query short-hand) that it contains only that one operation definition.\n *\n * See https://spec.graphql.org/draft/#sec-Lone-Anonymous-Operation\n */\nexport function LoneAnonymousOperationRule(context) {\n  let operationCount = 0;\n  return {\n    Document(node) {\n      operationCount = node.definitions.filter(\n        (definition) => definition.kind === Kind.OPERATION_DEFINITION,\n      ).length;\n    },\n\n    OperationDefinition(node) {\n      if (!node.name && operationCount > 1) {\n        context.reportError(\n          new GraphQLError(\n            'This anonymous operation must be the only defined operation.',\n            node,\n          ),\n        );\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Lone Schema definition\n *\n * A GraphQL document is only valid if it contains only one schema definition.\n */\nexport function LoneSchemaDefinitionRule(context) {\n  var _ref, _ref2, _oldSchema$astNode;\n\n  const oldSchema = context.getSchema();\n  const alreadyDefined =\n    (_ref =\n      (_ref2 =\n        (_oldSchema$astNode =\n          oldSchema === null || oldSchema === void 0\n            ? void 0\n            : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0\n          ? _oldSchema$astNode\n          : oldSchema === null || oldSchema === void 0\n          ? void 0\n          : oldSchema.getQueryType()) !== null && _ref2 !== void 0\n        ? _ref2\n        : oldSchema === null || oldSchema === void 0\n        ? void 0\n        : oldSchema.getMutationType()) !== null && _ref !== void 0\n      ? _ref\n      : oldSchema === null || oldSchema === void 0\n      ? void 0\n      : oldSchema.getSubscriptionType();\n  let schemaDefinitionsCount = 0;\n  return {\n    SchemaDefinition(node) {\n      if (alreadyDefined) {\n        context.reportError(\n          new GraphQLError(\n            'Cannot define a new schema within a schema extension.',\n            node,\n          ),\n        );\n        return;\n      }\n\n      if (schemaDefinitionsCount > 0) {\n        context.reportError(\n          new GraphQLError('Must provide only one schema definition.', node),\n        );\n      }\n\n      ++schemaDefinitionsCount;\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No fragment cycles\n *\n * The graph of fragment spreads must not form any cycles including spreading itself.\n * Otherwise an operation could infinitely spread or infinitely execute on cycles in the underlying data.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-spreads-must-not-form-cycles\n */\nexport function NoFragmentCyclesRule(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  const visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  const spreadPath = []; // Position in the spread path\n\n  const spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: () => false,\n\n    FragmentDefinition(node) {\n      detectCycleRecursive(node);\n      return false;\n    },\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    if (visitedFrags[fragment.name.value]) {\n      return;\n    }\n\n    const fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    const spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (const spreadNode of spreadNodes) {\n      const spreadName = spreadNode.name.value;\n      const cycleIndex = spreadPathIndexByName[spreadName];\n      spreadPath.push(spreadNode);\n\n      if (cycleIndex === undefined) {\n        const spreadFragment = context.getFragment(spreadName);\n\n        if (spreadFragment) {\n          detectCycleRecursive(spreadFragment);\n        }\n      } else {\n        const cyclePath = spreadPath.slice(cycleIndex);\n        const viaPath = cyclePath\n          .slice(0, -1)\n          .map((s) => '\"' + s.name.value + '\"')\n          .join(', ');\n        context.reportError(\n          new GraphQLError(\n            `Cannot spread fragment \"${spreadName}\" within itself` +\n              (viaPath !== '' ? ` via ${viaPath}.` : '.'),\n            cyclePath,\n          ),\n        );\n      }\n\n      spreadPath.pop();\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Uses-Defined\n */\nexport function NoUndefinedVariablesRule(context) {\n  let variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        variableNameDefined = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          const varName = node.name.value;\n\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(\n              new GraphQLError(\n                operation.name\n                  ? `Variable \"$${varName}\" is not defined by operation \"${operation.name.value}\".`\n                  : `Variable \"$${varName}\" is not defined.`,\n                [node, operation],\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-Must-Be-Used\n */\nexport function NoUnusedFragmentsRule(context) {\n  const operationDefs = [];\n  const fragmentDefs = [];\n  return {\n    OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n\n    FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n\n    Document: {\n      leave() {\n        const fragmentNameUsed = Object.create(null);\n\n        for (const operation of operationDefs) {\n          for (const fragment of context.getRecursivelyReferencedFragments(\n            operation,\n          )) {\n            fragmentNameUsed[fragment.name.value] = true;\n          }\n        }\n\n        for (const fragmentDef of fragmentDefs) {\n          const fragName = fragmentDef.name.value;\n\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(\n              new GraphQLError(\n                `Fragment \"${fragName}\" is never used.`,\n                fragmentDef,\n              ),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variables-Used\n */\nexport function NoUnusedVariablesRule(context) {\n  let variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter() {\n        variableDefs = [];\n      },\n\n      leave(operation) {\n        const variableNameUsed = Object.create(null);\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          variableNameUsed[node.name.value] = true;\n        }\n\n        for (const variableDef of variableDefs) {\n          const variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(\n              new GraphQLError(\n                operation.name\n                  ? `Variable \"$${variableName}\" is never used in operation \"${operation.name.value}\".`\n                  : `Variable \"$${variableName}\" is never used.`,\n                variableDef,\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(def) {\n      variableDefs.push(def);\n    },\n  };\n}\n", "import { naturalCompare } from '../jsutils/naturalCompare.mjs';\nimport { Kind } from '../language/kinds.mjs';\n/**\n * Sort ValueNode.\n *\n * This function returns a sorted copy of the given ValueNode.\n *\n * @internal\n */\n\nexport function sortValueNode(valueNode) {\n  switch (valueNode.kind) {\n    case Kind.OBJECT:\n      return { ...valueNode, fields: sortFields(valueNode.fields) };\n\n    case Kind.LIST:\n      return { ...valueNode, values: valueNode.values.map(sortValueNode) };\n\n    case Kind.INT:\n    case Kind.FLOAT:\n    case Kind.STRING:\n    case Kind.BOOLEAN:\n    case Kind.NULL:\n    case Kind.ENUM:\n    case Kind.VARIABLE:\n      return valueNode;\n  }\n}\n\nfunction sortFields(fields) {\n  return fields\n    .map((fieldNode) => ({\n      ...fieldNode,\n      value: sortValueNode(fieldNode.value),\n    }))\n    .sort((fieldA, fieldB) =>\n      naturalCompare(fieldA.name.value, fieldB.name.value),\n    );\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport {\n  getNamedType,\n  isInterfaceType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n} from '../../type/definition.mjs';\nimport { sortValueNode } from '../../utilities/sortValueNode.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason\n      .map(\n        ([responseName, subReason]) =>\n          `subfields \"${responseName}\" conflict because ` +\n          reasonMessage(subReason),\n      )\n      .join(' and ');\n  }\n\n  return reason;\n}\n/**\n * Overlapping fields can be merged\n *\n * A selection set is only valid if all fields (including spreading any\n * fragments) either correspond to distinct response names or can be merged\n * without ambiguity.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selection-Merging\n */\n\nexport function OverlappingFieldsCanBeMergedRule(context) {\n  // A memoization for when two fragments are compared \"between\" each other for\n  // conflicts. Two fragments may be compared many times, so memoizing this can\n  // dramatically improve the performance of this validator.\n  const comparedFragmentPairs = new PairSet(); // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n\n  const cachedFieldsAndFragmentNames = new Map();\n  return {\n    SelectionSet(selectionSet) {\n      const conflicts = findConflictsWithinSelectionSet(\n        context,\n        cachedFieldsAndFragmentNames,\n        comparedFragmentPairs,\n        context.getParentType(),\n        selectionSet,\n      );\n\n      for (const [[responseName, reason], fields1, fields2] of conflicts) {\n        const reasonMsg = reasonMessage(reason);\n        context.reportError(\n          new GraphQLError(\n            `Fields \"${responseName}\" conflict because ${reasonMsg}. Use different aliases on the fields to fetch both if this was intentional.`,\n            fields1.concat(fields2),\n          ),\n        );\n      }\n    },\n  };\n}\n\n/**\n * Algorithm:\n *\n * Conflicts occur when two fields exist in a query which will produce the same\n * response name, but represent differing values, thus creating a conflict.\n * The algorithm below finds all conflicts via making a series of comparisons\n * between fields. In order to compare as few fields as possible, this makes\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\n *\n * Given any selection set, a collection produces both a set of fields by\n * also including all inline fragments, as well as a list of fragments\n * referenced by fragment spreads.\n *\n * A) Each selection set represented in the document first compares \"within\" its\n * collected set of fields, finding any conflicts between every pair of\n * overlapping fields.\n * Note: This is the *only time* that a the fields \"within\" a set are compared\n * to each other. After this only fields \"between\" sets are compared.\n *\n * B) Also, if any fragment is referenced in a selection set, then a\n * comparison is made \"between\" the original set of fields and the\n * referenced fragment.\n *\n * C) Also, if multiple fragments are referenced, then comparisons\n * are made \"between\" each referenced fragment.\n *\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\n * a comparison is made between each field in the original set of fields and\n * each field in the the referenced set of fields.\n *\n * E) Also, if any fragment is referenced in the referenced selection set,\n * then a comparison is made \"between\" the original set of fields and the\n * referenced fragment (recursively referring to step D).\n *\n * F) When comparing \"between\" two fragments, first a comparison is made between\n * each field in the first referenced set of fields and each field in the the\n * second referenced set of fields.\n *\n * G) Also, any fragments referenced by the first must be compared to the\n * second, and any fragments referenced by the second must be compared to the\n * first (recursively referring to step F).\n *\n * H) When comparing two fields, if both have selection sets, then a comparison\n * is made \"between\" both selection sets, first comparing the set of fields in\n * the first selection set with the set of fields in the second.\n *\n * I) Also, if any fragment is referenced in either selection set, then a\n * comparison is made \"between\" the other set of fields and the\n * referenced fragment.\n *\n * J) Also, if two fragments are referenced in both selection sets, then a\n * comparison is made \"between\" the two fragments.\n *\n */\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\nfunction findConflictsWithinSelectionSet(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  parentType,\n  selectionSet,\n) {\n  const conflicts = [];\n  const [fieldMap, fragmentNames] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType,\n    selectionSet,\n  ); // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n  collectConflictsWithin(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFragmentPairs,\n    fieldMap,\n  );\n\n  if (fragmentNames.length !== 0) {\n    // (B) Then collect conflicts between these fields and those represented by\n    // each spread fragment name found.\n    for (let i = 0; i < fragmentNames.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(\n        context,\n        conflicts,\n        cachedFieldsAndFragmentNames,\n        comparedFragmentPairs,\n        false,\n        fieldMap,\n        fragmentNames[i],\n      ); // (C) Then compare this fragment with all other fragments found in this\n      // selection set to collect conflicts between fragments spread together.\n      // This compares each item in the list of fragment names to every other\n      // item in that same list (except for itself).\n\n      for (let j = i + 1; j < fragmentNames.length; j++) {\n        collectConflictsBetweenFragments(\n          context,\n          conflicts,\n          cachedFieldsAndFragmentNames,\n          comparedFragmentPairs,\n          false,\n          fragmentNames[i],\n          fragmentNames[j],\n        );\n      }\n    }\n  }\n\n  return conflicts;\n} // Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\n\nfunction collectConflictsBetweenFieldsAndFragment(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  fieldMap,\n  fragmentName,\n) {\n  const fragment = context.getFragment(fragmentName);\n\n  if (!fragment) {\n    return;\n  }\n\n  const [fieldMap2, referencedFragmentNames] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment,\n    ); // Do not compare a fragment's fieldMap to itself.\n\n  if (fieldMap === fieldMap2) {\n    return;\n  } // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap,\n    fieldMap2,\n  ); // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n\n  for (const referencedFragmentName of referencedFragmentNames) {\n    // Memoize so two fragments are not compared for conflicts more than once.\n    if (\n      comparedFragmentPairs.has(\n        referencedFragmentName,\n        fragmentName,\n        areMutuallyExclusive,\n      )\n    ) {\n      continue;\n    }\n\n    comparedFragmentPairs.add(\n      referencedFragmentName,\n      fragmentName,\n      areMutuallyExclusive,\n    );\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap,\n      referencedFragmentName,\n    );\n  }\n} // Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\n\nfunction collectConflictsBetweenFragments(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  fragmentName1,\n  fragmentName2,\n) {\n  // No need to compare a fragment to itself.\n  if (fragmentName1 === fragmentName2) {\n    return;\n  } // Memoize so two fragments are not compared for conflicts more than once.\n\n  if (\n    comparedFragmentPairs.has(\n      fragmentName1,\n      fragmentName2,\n      areMutuallyExclusive,\n    )\n  ) {\n    return;\n  }\n\n  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n  const fragment1 = context.getFragment(fragmentName1);\n  const fragment2 = context.getFragment(fragmentName2);\n\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n\n  const [fieldMap1, referencedFragmentNames1] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment1,\n    );\n  const [fieldMap2, referencedFragmentNames2] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment2,\n    ); // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap1,\n    fieldMap2,\n  ); // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n\n  for (const referencedFragmentName2 of referencedFragmentNames2) {\n    collectConflictsBetweenFragments(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fragmentName1,\n      referencedFragmentName2,\n    );\n  } // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n\n  for (const referencedFragmentName1 of referencedFragmentNames1) {\n    collectConflictsBetweenFragments(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      referencedFragmentName1,\n      fragmentName2,\n    );\n  }\n} // Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\n\nfunction findConflictsBetweenSubSelectionSets(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  parentType1,\n  selectionSet1,\n  parentType2,\n  selectionSet2,\n) {\n  const conflicts = [];\n  const [fieldMap1, fragmentNames1] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType1,\n    selectionSet1,\n  );\n  const [fieldMap2, fragmentNames2] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType2,\n    selectionSet2,\n  ); // (H) First, collect all conflicts between these two collections of field.\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap1,\n    fieldMap2,\n  ); // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n\n  for (const fragmentName2 of fragmentNames2) {\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap1,\n      fragmentName2,\n    );\n  } // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n\n  for (const fragmentName1 of fragmentNames1) {\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap2,\n      fragmentName1,\n    );\n  } // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n\n  for (const fragmentName1 of fragmentNames1) {\n    for (const fragmentName2 of fragmentNames2) {\n      collectConflictsBetweenFragments(\n        context,\n        conflicts,\n        cachedFieldsAndFragmentNames,\n        comparedFragmentPairs,\n        areMutuallyExclusive,\n        fragmentName1,\n        fragmentName2,\n      );\n    }\n  }\n\n  return conflicts;\n} // Collect all Conflicts \"within\" one collection of fields.\n\nfunction collectConflictsWithin(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  fieldMap,\n) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  for (const [responseName, fields] of Object.entries(fieldMap)) {\n    // This compares every field in the list to every other field in this list\n    // (except to itself). If the list only has one item, nothing needs to\n    // be compared.\n    if (fields.length > 1) {\n      for (let i = 0; i < fields.length; i++) {\n        for (let j = i + 1; j < fields.length; j++) {\n          const conflict = findConflict(\n            context,\n            cachedFieldsAndFragmentNames,\n            comparedFragmentPairs,\n            false, // within one collection is never mutually exclusive\n            responseName,\n            fields[i],\n            fields[j],\n          );\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\n\nfunction collectConflictsBetween(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  parentFieldsAreMutuallyExclusive,\n  fieldMap1,\n  fieldMap2,\n) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  for (const [responseName, fields1] of Object.entries(fieldMap1)) {\n    const fields2 = fieldMap2[responseName];\n\n    if (fields2) {\n      for (const field1 of fields1) {\n        for (const field2 of fields2) {\n          const conflict = findConflict(\n            context,\n            cachedFieldsAndFragmentNames,\n            comparedFragmentPairs,\n            parentFieldsAreMutuallyExclusive,\n            responseName,\n            field1,\n            field2,\n          );\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\n\nfunction findConflict(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  parentFieldsAreMutuallyExclusive,\n  responseName,\n  field1,\n  field2,\n) {\n  const [parentType1, node1, def1] = field1;\n  const [parentType2, node2, def2] = field2; // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  const areMutuallyExclusive =\n    parentFieldsAreMutuallyExclusive ||\n    (parentType1 !== parentType2 &&\n      isObjectType(parentType1) &&\n      isObjectType(parentType2));\n\n  if (!areMutuallyExclusive) {\n    // Two aliases must refer to the same field.\n    const name1 = node1.name.value;\n    const name2 = node2.name.value;\n\n    if (name1 !== name2) {\n      return [\n        [responseName, `\"${name1}\" and \"${name2}\" are different fields`],\n        [node1],\n        [node2],\n      ];\n    } // Two field calls must have the same arguments.\n\n    if (stringifyArguments(node1) !== stringifyArguments(node2)) {\n      return [\n        [responseName, 'they have differing arguments'],\n        [node1],\n        [node2],\n      ];\n    }\n  } // The return type for each field.\n\n  const type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;\n  const type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;\n\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [\n      [\n        responseName,\n        `they return conflicting types \"${inspect(type1)}\" and \"${inspect(\n          type2,\n        )}\"`,\n      ],\n      [node1],\n      [node2],\n    ];\n  } // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n\n  const selectionSet1 = node1.selectionSet;\n  const selectionSet2 = node2.selectionSet;\n\n  if (selectionSet1 && selectionSet2) {\n    const conflicts = findConflictsBetweenSubSelectionSets(\n      context,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      getNamedType(type1),\n      selectionSet1,\n      getNamedType(type2),\n      selectionSet2,\n    );\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\n\nfunction stringifyArguments(fieldNode) {\n  var _fieldNode$arguments;\n\n  // FIXME https://github.com/graphql/graphql-js/issues/2203\n  const args =\n    /* c8 ignore next */\n    (_fieldNode$arguments = fieldNode.arguments) !== null &&\n    _fieldNode$arguments !== void 0\n      ? _fieldNode$arguments\n      : [];\n  const inputObjectWithArgs = {\n    kind: Kind.OBJECT,\n    fields: args.map((argNode) => ({\n      kind: Kind.OBJECT_FIELD,\n      name: argNode.name,\n      value: argNode.value,\n    })),\n  };\n  return print(sortValueNode(inputObjectWithArgs));\n} // Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\n\nfunction doTypesConflict(type1, type2) {\n  if (isListType(type1)) {\n    return isListType(type2)\n      ? doTypesConflict(type1.ofType, type2.ofType)\n      : true;\n  }\n\n  if (isListType(type2)) {\n    return true;\n  }\n\n  if (isNonNullType(type1)) {\n    return isNonNullType(type2)\n      ? doTypesConflict(type1.ofType, type2.ofType)\n      : true;\n  }\n\n  if (isNonNullType(type2)) {\n    return true;\n  }\n\n  if (isLeafType(type1) || isLeafType(type2)) {\n    return type1 !== type2;\n  }\n\n  return false;\n} // Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\n\nfunction getFieldsAndFragmentNames(\n  context,\n  cachedFieldsAndFragmentNames,\n  parentType,\n  selectionSet,\n) {\n  const cached = cachedFieldsAndFragmentNames.get(selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  const nodeAndDefs = Object.create(null);\n  const fragmentNames = Object.create(null);\n\n  _collectFieldsAndFragmentNames(\n    context,\n    parentType,\n    selectionSet,\n    nodeAndDefs,\n    fragmentNames,\n  );\n\n  const result = [nodeAndDefs, Object.keys(fragmentNames)];\n  cachedFieldsAndFragmentNames.set(selectionSet, result);\n  return result;\n} // Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\n\nfunction getReferencedFieldsAndFragmentNames(\n  context,\n  cachedFieldsAndFragmentNames,\n  fragment,\n) {\n  // Short-circuit building a type from the node if possible.\n  const cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  const fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);\n  return getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    fragmentType,\n    fragment.selectionSet,\n  );\n}\n\nfunction _collectFieldsAndFragmentNames(\n  context,\n  parentType,\n  selectionSet,\n  nodeAndDefs,\n  fragmentNames,\n) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case Kind.FIELD: {\n        const fieldName = selection.name.value;\n        let fieldDef;\n\n        if (isObjectType(parentType) || isInterfaceType(parentType)) {\n          fieldDef = parentType.getFields()[fieldName];\n        }\n\n        const responseName = selection.alias\n          ? selection.alias.value\n          : fieldName;\n\n        if (!nodeAndDefs[responseName]) {\n          nodeAndDefs[responseName] = [];\n        }\n\n        nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n        break;\n      }\n\n      case Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n\n      case Kind.INLINE_FRAGMENT: {\n        const typeCondition = selection.typeCondition;\n        const inlineFragmentType = typeCondition\n          ? typeFromAST(context.getSchema(), typeCondition)\n          : parentType;\n\n        _collectFieldsAndFragmentNames(\n          context,\n          inlineFragmentType,\n          selection.selectionSet,\n          nodeAndDefs,\n          fragmentNames,\n        );\n\n        break;\n      }\n    }\n  }\n} // Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\n\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [\n      [responseName, conflicts.map(([reason]) => reason)],\n      [node1, ...conflicts.map(([, fields1]) => fields1).flat()],\n      [node2, ...conflicts.map(([, , fields2]) => fields2).flat()],\n    ];\n  }\n}\n/**\n * A way to keep track of pairs of things when the ordering of the pair does not matter.\n */\n\nclass PairSet {\n  constructor() {\n    this._data = new Map();\n  }\n\n  has(a, b, areMutuallyExclusive) {\n    var _this$_data$get;\n\n    const [key1, key2] = a < b ? [a, b] : [b, a];\n    const result =\n      (_this$_data$get = this._data.get(key1)) === null ||\n      _this$_data$get === void 0\n        ? void 0\n        : _this$_data$get.get(key2);\n\n    if (result === undefined) {\n      return false;\n    } // areMutuallyExclusive being false is a superset of being true, hence if\n    // we want to know if this PairSet \"has\" these two with no exclusivity,\n    // we have to ensure it was added as such.\n\n    return areMutuallyExclusive ? true : areMutuallyExclusive === result;\n  }\n\n  add(a, b, areMutuallyExclusive) {\n    const [key1, key2] = a < b ? [a, b] : [b, a];\n\n    const map = this._data.get(key1);\n\n    if (map === undefined) {\n      this._data.set(key1, new Map([[key2, areMutuallyExclusive]]));\n    } else {\n      map.set(key2, areMutuallyExclusive);\n    }\n  }\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { doTypesOverlap } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\nexport function PossibleFragmentSpreadsRule(context) {\n  return {\n    InlineFragment(node) {\n      const fragType = context.getType();\n      const parentType = context.getParentType();\n\n      if (\n        isCompositeType(fragType) &&\n        isCompositeType(parentType) &&\n        !doTypesOverlap(context.getSchema(), fragType, parentType)\n      ) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(\n          new GraphQLError(\n            `Fragment cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\n            node,\n          ),\n        );\n      }\n    },\n\n    FragmentSpread(node) {\n      const fragName = node.name.value;\n      const fragType = getFragmentType(context, fragName);\n      const parentType = context.getParentType();\n\n      if (\n        fragType &&\n        parentType &&\n        !doTypesOverlap(context.getSchema(), fragType, parentType)\n      ) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(\n          new GraphQLError(\n            `Fragment \"${fragName}\" cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\n            node,\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getFragmentType(context, name) {\n  const frag = context.getFragment(name);\n\n  if (frag) {\n    const type = typeFromAST(context.getSchema(), frag.typeCondition);\n\n    if (isCompositeType(type)) {\n      return type;\n    }\n  }\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isTypeDefinitionNode } from '../../language/predicates.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../../type/definition.mjs';\n\n/**\n * Possible type extension\n *\n * A type extension is only valid if the type is defined and has the same kind.\n */\nexport function PossibleTypeExtensionsRule(context) {\n  const schema = context.getSchema();\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = def;\n    }\n  }\n\n  return {\n    ScalarTypeExtension: checkExtension,\n    ObjectTypeExtension: checkExtension,\n    InterfaceTypeExtension: checkExtension,\n    UnionTypeExtension: checkExtension,\n    EnumTypeExtension: checkExtension,\n    InputObjectTypeExtension: checkExtension,\n  };\n\n  function checkExtension(node) {\n    const typeName = node.name.value;\n    const defNode = definedTypes[typeName];\n    const existingType =\n      schema === null || schema === void 0 ? void 0 : schema.getType(typeName);\n    let expectedKind;\n\n    if (defNode) {\n      expectedKind = defKindToExtKind[defNode.kind];\n    } else if (existingType) {\n      expectedKind = typeToExtKind(existingType);\n    }\n\n    if (expectedKind) {\n      if (expectedKind !== node.kind) {\n        const kindStr = extensionKindToTypeName(node.kind);\n        context.reportError(\n          new GraphQLError(\n            `Cannot extend non-${kindStr} type \"${typeName}\".`,\n            defNode ? [defNode, node] : node,\n          ),\n        );\n      }\n    } else {\n      const allTypeNames = Object.keys({\n        ...definedTypes,\n        ...(schema === null || schema === void 0\n          ? void 0\n          : schema.getTypeMap()),\n      });\n      const suggestedTypes = suggestionList(typeName, allTypeNames);\n      context.reportError(\n        new GraphQLError(\n          `Cannot extend type \"${typeName}\" because it is not defined.` +\n            didYouMean(suggestedTypes),\n          node.name,\n        ),\n      );\n    }\n  }\n}\nconst defKindToExtKind = {\n  [Kind.SCALAR_TYPE_DEFINITION]: Kind.SCALAR_TYPE_EXTENSION,\n  [Kind.OBJECT_TYPE_DEFINITION]: Kind.OBJECT_TYPE_EXTENSION,\n  [Kind.INTERFACE_TYPE_DEFINITION]: Kind.INTERFACE_TYPE_EXTENSION,\n  [Kind.UNION_TYPE_DEFINITION]: Kind.UNION_TYPE_EXTENSION,\n  [Kind.ENUM_TYPE_DEFINITION]: Kind.ENUM_TYPE_EXTENSION,\n  [Kind.INPUT_OBJECT_TYPE_DEFINITION]: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n};\n\nfunction typeToExtKind(type) {\n  if (isScalarType(type)) {\n    return Kind.SCALAR_TYPE_EXTENSION;\n  }\n\n  if (isObjectType(type)) {\n    return Kind.OBJECT_TYPE_EXTENSION;\n  }\n\n  if (isInterfaceType(type)) {\n    return Kind.INTERFACE_TYPE_EXTENSION;\n  }\n\n  if (isUnionType(type)) {\n    return Kind.UNION_TYPE_EXTENSION;\n  }\n\n  if (isEnumType(type)) {\n    return Kind.ENUM_TYPE_EXTENSION;\n  }\n\n  if (isInputObjectType(type)) {\n    return Kind.INPUT_OBJECT_TYPE_EXTENSION;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable. All possible types have been considered\n\n  false || invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction extensionKindToTypeName(kind) {\n  switch (kind) {\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return 'scalar';\n\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return 'object';\n\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return 'interface';\n\n    case Kind.UNION_TYPE_EXTENSION:\n      return 'union';\n\n    case Kind.ENUM_TYPE_EXTENSION:\n      return 'enum';\n\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return 'input object';\n    // Not reachable. All possible types have been considered\n\n    /* c8 ignore next */\n\n    default:\n      false || invariant(false, 'Unexpected kind: ' + inspect(kind));\n  }\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isRequiredArgument, isType } from '../../type/definition.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Provided required arguments\n *\n * A field or directive is only valid if all required (non-null without a\n * default value) field arguments have been provided.\n */\nexport function ProvidedRequiredArgumentsRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...ProvidedRequiredArgumentsOnDirectivesRule(context),\n    Field: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(fieldNode) {\n        var _fieldNode$arguments;\n\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          return false;\n        }\n\n        const providedArgs = new Set( // FIXME: https://github.com/graphql/graphql-js/issues/2203\n          /* c8 ignore next */\n          (_fieldNode$arguments = fieldNode.arguments) === null ||\n          _fieldNode$arguments === void 0\n            ? void 0\n            : _fieldNode$arguments.map((arg) => arg.name.value),\n        );\n\n        for (const argDef of fieldDef.args) {\n          if (!providedArgs.has(argDef.name) && isRequiredArgument(argDef)) {\n            const argTypeStr = inspect(argDef.type);\n            context.reportError(\n              new GraphQLError(\n                `Field \"${fieldDef.name}\" argument \"${argDef.name}\" of type \"${argTypeStr}\" is required, but it was not provided.`,\n                fieldNode,\n              ),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n/**\n * @internal\n */\n\nexport function ProvidedRequiredArgumentsOnDirectivesRule(context) {\n  var _schema$getDirectives;\n\n  const requiredArgsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives =\n    (_schema$getDirectives =\n      schema === null || schema === void 0\n        ? void 0\n        : schema.getDirectives()) !== null && _schema$getDirectives !== void 0\n      ? _schema$getDirectives\n      : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    requiredArgsMap[directive.name] = keyMap(\n      directive.args.filter(isRequiredArgument),\n      (arg) => arg.name,\n    );\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      requiredArgsMap[def.name.value] = keyMap(\n        argNodes.filter(isRequiredArgumentNode),\n        (arg) => arg.name.value,\n      );\n    }\n  }\n\n  return {\n    Directive: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(directiveNode) {\n        const directiveName = directiveNode.name.value;\n        const requiredArgs = requiredArgsMap[directiveName];\n\n        if (requiredArgs) {\n          var _directiveNode$argume;\n\n          // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n          /* c8 ignore next */\n          const argNodes =\n            (_directiveNode$argume = directiveNode.arguments) !== null &&\n            _directiveNode$argume !== void 0\n              ? _directiveNode$argume\n              : [];\n          const argNodeMap = new Set(argNodes.map((arg) => arg.name.value));\n\n          for (const [argName, argDef] of Object.entries(requiredArgs)) {\n            if (!argNodeMap.has(argName)) {\n              const argType = isType(argDef.type)\n                ? inspect(argDef.type)\n                : print(argDef.type);\n              context.reportError(\n                new GraphQLError(\n                  `Directive \"@${directiveName}\" argument \"${argName}\" of type \"${argType}\" is required, but it was not provided.`,\n                  directiveNode,\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n  };\n}\n\nfunction isRequiredArgumentNode(arg) {\n  return arg.type.kind === Kind.NON_NULL_TYPE && arg.defaultValue == null;\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { getNamedType, isLeafType } from '../../type/definition.mjs';\n\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\nexport function ScalarLeafsRule(context) {\n  return {\n    Field(node) {\n      const type = context.getType();\n      const selectionSet = node.selectionSet;\n\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            const fieldName = node.name.value;\n            const typeStr = inspect(type);\n            context.reportError(\n              new GraphQLError(\n                `Field \"${fieldName}\" must not have a selection since type \"${typeStr}\" has no subfields.`,\n                selectionSet,\n              ),\n            );\n          }\n        } else if (!selectionSet) {\n          const fieldName = node.name.value;\n          const typeStr = inspect(type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${fieldName}\" of type \"${typeStr}\" must have a selection of subfields. Did you mean \"${fieldName} { ... }\"?`,\n              node,\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Unknown       |\n * | NullValue            | null          |\n *\n */\n\nexport function valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    const variableName = valueNode.name.value;\n\n    if (variables == null || variables[variableName] === undefined) {\n      // No valid return value.\n      return;\n    }\n\n    const variableValue = variables[variableName];\n\n    if (variableValue === null && isNonNullType(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n    return variableValue;\n  }\n\n  if (isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (valueNode.kind === Kind.LIST) {\n      const coercedValues = [];\n\n      for (const itemNode of valueNode.values) {\n        if (isMissingVariable(itemNode, variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if (isNonNullType(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(null);\n        } else {\n          const itemValue = valueFromAST(itemNode, itemType, variables);\n\n          if (itemValue === undefined) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(itemValue);\n        }\n      }\n\n      return coercedValues;\n    }\n\n    const coercedValue = valueFromAST(valueNode, itemType, variables);\n\n    if (coercedValue === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if (isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    const coercedObj = Object.create(null);\n    const fieldNodes = keyMap(valueNode.fields, (field) => field.name.value);\n\n    for (const field of Object.values(type.getFields())) {\n      const fieldNode = fieldNodes[field.name];\n\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (field.defaultValue !== undefined) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n\n      const fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n\n      if (fieldValue === undefined) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[field.name] = fieldValue;\n    }\n\n    return coercedObj;\n  }\n\n  if (isLeafType(type)) {\n    // Scalars and Enums fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    let result;\n\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (result === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible input types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return (\n    valueNode.kind === Kind.VARIABLE &&\n    (variables == null || variables[valueNode.name.value] === undefined)\n  );\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { isInputType, isNonNullType } from '../type/definition.mjs';\nimport { coerceInputValue } from '../utilities/coerceInputValue.mjs';\nimport { typeFromAST } from '../utilities/typeFromAST.mjs';\nimport { valueFromAST } from '../utilities/valueFromAST.mjs';\n\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nexport function getVariableValues(schema, varDefNodes, inputs, options) {\n  const errors = [];\n  const maxErrors =\n    options === null || options === void 0 ? void 0 : options.maxErrors;\n\n  try {\n    const coerced = coerceVariableValues(\n      schema,\n      varDefNodes,\n      inputs,\n      (error) => {\n        if (maxErrors != null && errors.length >= maxErrors) {\n          throw new GraphQLError(\n            'Too many errors processing variables, error limit reached. Execution aborted.',\n          );\n        }\n\n        errors.push(error);\n      },\n    );\n\n    if (errors.length === 0) {\n      return {\n        coerced,\n      };\n    }\n  } catch (error) {\n    errors.push(error);\n  }\n\n  return {\n    errors,\n  };\n}\n\nfunction coerceVariableValues(schema, varDefNodes, inputs, onError) {\n  const coercedValues = {};\n\n  for (const varDefNode of varDefNodes) {\n    const varName = varDefNode.variable.name.value;\n    const varType = typeFromAST(schema, varDefNode.type);\n\n    if (!isInputType(varType)) {\n      // Must use input types for variables. This should be caught during\n      // validation, however is checked again here for safety.\n      const varTypeStr = print(varDefNode.type);\n      onError(\n        new GraphQLError(\n          `Variable \"$${varName}\" expected value of type \"${varTypeStr}\" which cannot be used as an input type.`,\n          varDefNode.type,\n        ),\n      );\n      continue;\n    }\n\n    if (!hasOwnProperty(inputs, varName)) {\n      if (varDefNode.defaultValue) {\n        coercedValues[varName] = valueFromAST(varDefNode.defaultValue, varType);\n      } else if (isNonNullType(varType)) {\n        const varTypeStr = inspect(varType);\n        onError(\n          new GraphQLError(\n            `Variable \"$${varName}\" of required type \"${varTypeStr}\" was not provided.`,\n            varDefNode,\n          ),\n        );\n      }\n\n      continue;\n    }\n\n    const value = inputs[varName];\n\n    if (value === null && isNonNullType(varType)) {\n      const varTypeStr = inspect(varType);\n      onError(\n        new GraphQLError(\n          `Variable \"$${varName}\" of non-null type \"${varTypeStr}\" must not be null.`,\n          varDefNode,\n        ),\n      );\n      continue;\n    }\n\n    coercedValues[varName] = coerceInputValue(\n      value,\n      varType,\n      (path, invalidValue, error) => {\n        let prefix =\n          `Variable \"$${varName}\" got invalid value ` + inspect(invalidValue);\n\n        if (path.length > 0) {\n          prefix += ` at \"${varName}${printPathArray(path)}\"`;\n        }\n\n        onError(\n          new GraphQLError(\n            prefix + '; ' + error.message,\n            varDefNode,\n            undefined,\n            undefined,\n            undefined,\n            error.originalError,\n          ),\n        );\n      },\n    );\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n *\n * @internal\n */\n\nexport function getArgumentValues(def, node, variableValues) {\n  var _node$arguments;\n\n  const coercedValues = {}; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n\n  const argumentNodes =\n    (_node$arguments = node.arguments) !== null && _node$arguments !== void 0\n      ? _node$arguments\n      : [];\n  const argNodeMap = keyMap(argumentNodes, (arg) => arg.name.value);\n\n  for (const argDef of def.args) {\n    const name = argDef.name;\n    const argType = argDef.type;\n    const argumentNode = argNodeMap[name];\n\n    if (!argumentNode) {\n      if (argDef.defaultValue !== undefined) {\n        coercedValues[name] = argDef.defaultValue;\n      } else if (isNonNullType(argType)) {\n        throw new GraphQLError(\n          `Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n            'was not provided.',\n          node,\n        );\n      }\n\n      continue;\n    }\n\n    const valueNode = argumentNode.value;\n    let isNull = valueNode.kind === Kind.NULL;\n\n    if (valueNode.kind === Kind.VARIABLE) {\n      const variableName = valueNode.name.value;\n\n      if (\n        variableValues == null ||\n        !hasOwnProperty(variableValues, variableName)\n      ) {\n        if (argDef.defaultValue !== undefined) {\n          coercedValues[name] = argDef.defaultValue;\n        } else if (isNonNullType(argType)) {\n          throw new GraphQLError(\n            `Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n              `was provided the variable \"$${variableName}\" which was not provided a runtime value.`,\n            valueNode,\n          );\n        }\n\n        continue;\n      }\n\n      isNull = variableValues[variableName] == null;\n    }\n\n    if (isNull && isNonNullType(argType)) {\n      throw new GraphQLError(\n        `Argument \"${name}\" of non-null type \"${inspect(argType)}\" ` +\n          'must not be null.',\n        valueNode,\n      );\n    }\n\n    const coercedValue = valueFromAST(valueNode, argType, variableValues);\n\n    if (coercedValue === undefined) {\n      // Note: ValuesOfCorrectTypeRule validation should catch this before\n      // execution. This is a runtime check to ensure execution does not\n      // continue with an invalid argument value.\n      throw new GraphQLError(\n        `Argument \"${name}\" has invalid value ${print(valueNode)}.`,\n        valueNode,\n      );\n    }\n\n    coercedValues[name] = coercedValue;\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a directive definition\n * and a AST node which may contain directives. Optionally also accepts a map\n * of variable values.\n *\n * If the directive does not exist on the node, returns undefined.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getDirectiveValues(directiveDef, node, variableValues) {\n  var _node$directives;\n\n  const directiveNode =\n    (_node$directives = node.directives) === null || _node$directives === void 0\n      ? void 0\n      : _node$directives.find(\n          (directive) => directive.name.value === directiveDef.name,\n        );\n\n  if (directiveNode) {\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\n  }\n}\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n", "import { Kind } from '../language/kinds.mjs';\nimport { isAbstractType } from '../type/definition.mjs';\nimport {\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n} from '../type/directives.mjs';\nimport { typeFromAST } from '../utilities/typeFromAST.mjs';\nimport { getDirectiveValues } from './values.mjs';\n/**\n * Given a selectionSet, collects all of the fields and returns them.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field that\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * object type returned by that field.\n *\n * @internal\n */\n\nexport function collectFields(\n  schema,\n  fragments,\n  variableValues,\n  runtimeType,\n  selectionSet,\n) {\n  const fields = new Map();\n  collectFieldsImpl(\n    schema,\n    fragments,\n    variableValues,\n    runtimeType,\n    selectionSet,\n    fields,\n    new Set(),\n  );\n  return fields;\n}\n/**\n * Given an array of field nodes, collects all of the subfields of the passed\n * in fields, and returns them at the end.\n *\n * CollectSubFields requires the \"return type\" of an object. For a field that\n * returns an Interface or Union type, the \"return type\" will be the actual\n * object type returned by that field.\n *\n * @internal\n */\n\nexport function collectSubfields(\n  schema,\n  fragments,\n  variableValues,\n  returnType,\n  fieldNodes,\n) {\n  const subFieldNodes = new Map();\n  const visitedFragmentNames = new Set();\n\n  for (const node of fieldNodes) {\n    if (node.selectionSet) {\n      collectFieldsImpl(\n        schema,\n        fragments,\n        variableValues,\n        returnType,\n        node.selectionSet,\n        subFieldNodes,\n        visitedFragmentNames,\n      );\n    }\n  }\n\n  return subFieldNodes;\n}\n\nfunction collectFieldsImpl(\n  schema,\n  fragments,\n  variableValues,\n  runtimeType,\n  selectionSet,\n  fields,\n  visitedFragmentNames,\n) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case Kind.FIELD: {\n        if (!shouldIncludeNode(variableValues, selection)) {\n          continue;\n        }\n\n        const name = getFieldEntryKey(selection);\n        const fieldList = fields.get(name);\n\n        if (fieldList !== undefined) {\n          fieldList.push(selection);\n        } else {\n          fields.set(name, [selection]);\n        }\n\n        break;\n      }\n\n      case Kind.INLINE_FRAGMENT: {\n        if (\n          !shouldIncludeNode(variableValues, selection) ||\n          !doesFragmentConditionMatch(schema, selection, runtimeType)\n        ) {\n          continue;\n        }\n\n        collectFieldsImpl(\n          schema,\n          fragments,\n          variableValues,\n          runtimeType,\n          selection.selectionSet,\n          fields,\n          visitedFragmentNames,\n        );\n        break;\n      }\n\n      case Kind.FRAGMENT_SPREAD: {\n        const fragName = selection.name.value;\n\n        if (\n          visitedFragmentNames.has(fragName) ||\n          !shouldIncludeNode(variableValues, selection)\n        ) {\n          continue;\n        }\n\n        visitedFragmentNames.add(fragName);\n        const fragment = fragments[fragName];\n\n        if (\n          !fragment ||\n          !doesFragmentConditionMatch(schema, fragment, runtimeType)\n        ) {\n          continue;\n        }\n\n        collectFieldsImpl(\n          schema,\n          fragments,\n          variableValues,\n          runtimeType,\n          fragment.selectionSet,\n          fields,\n          visitedFragmentNames,\n        );\n        break;\n      }\n    }\n  }\n}\n/**\n * Determines if a field should be included based on the `@include` and `@skip`\n * directives, where `@skip` has higher precedence than `@include`.\n */\n\nfunction shouldIncludeNode(variableValues, node) {\n  const skip = getDirectiveValues(GraphQLSkipDirective, node, variableValues);\n\n  if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {\n    return false;\n  }\n\n  const include = getDirectiveValues(\n    GraphQLIncludeDirective,\n    node,\n    variableValues,\n  );\n\n  if (\n    (include === null || include === void 0 ? void 0 : include.if) === false\n  ) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\nfunction doesFragmentConditionMatch(schema, fragment, type) {\n  const typeConditionNode = fragment.typeCondition;\n\n  if (!typeConditionNode) {\n    return true;\n  }\n\n  const conditionalType = typeFromAST(schema, typeConditionNode);\n\n  if (conditionalType === type) {\n    return true;\n  }\n\n  if (isAbstractType(conditionalType)) {\n    return schema.isSubType(conditionalType, type);\n  }\n\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { collectFields } from '../../execution/collectFields.mjs';\n\n/**\n * Subscriptions must only include a non-introspection field.\n *\n * A GraphQL subscription is valid only if it contains a single root field and\n * that root field is not an introspection field.\n *\n * See https://spec.graphql.org/draft/#sec-Single-root-field\n */\nexport function SingleFieldSubscriptionsRule(context) {\n  return {\n    OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        const schema = context.getSchema();\n        const subscriptionType = schema.getSubscriptionType();\n\n        if (subscriptionType) {\n          const operationName = node.name ? node.name.value : null;\n          const variableValues = Object.create(null);\n          const document = context.getDocument();\n          const fragments = Object.create(null);\n\n          for (const definition of document.definitions) {\n            if (definition.kind === Kind.FRAGMENT_DEFINITION) {\n              fragments[definition.name.value] = definition;\n            }\n          }\n\n          const fields = collectFields(\n            schema,\n            fragments,\n            variableValues,\n            subscriptionType,\n            node.selectionSet,\n          );\n\n          if (fields.size > 1) {\n            const fieldSelectionLists = [...fields.values()];\n            const extraFieldSelectionLists = fieldSelectionLists.slice(1);\n            const extraFieldSelections = extraFieldSelectionLists.flat();\n            context.reportError(\n              new GraphQLError(\n                operationName != null\n                  ? `Subscription \"${operationName}\" must select only one top level field.`\n                  : 'Anonymous Subscription must select only one top level field.',\n                extraFieldSelections,\n              ),\n            );\n          }\n\n          for (const fieldNodes of fields.values()) {\n            const field = fieldNodes[0];\n            const fieldName = field.name.value;\n\n            if (fieldName.startsWith('__')) {\n              context.reportError(\n                new GraphQLError(\n                  operationName != null\n                    ? `Subscription \"${operationName}\" must not select an introspection top level field.`\n                    : 'Anonymous Subscription must not select an introspection top level field.',\n                  fieldNodes,\n                ),\n              );\n            }\n          }\n        }\n      }\n    },\n  };\n}\n", "/**\n * Groups array items into a Map, given a function to produce grouping key.\n */\nexport function groupBy(list, keyFn) {\n  const result = new Map();\n\n  for (const item of list) {\n    const key = keyFn(item);\n    const group = result.get(key);\n\n    if (group === undefined) {\n      result.set(key, [item]);\n    } else {\n      group.push(item);\n    }\n  }\n\n  return result;\n}\n", "import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique argument definition names\n *\n * A GraphQL Object or Interface type is only valid if all its fields have uniquely named arguments.\n * A GraphQL Directive is only valid if all its arguments are uniquely named.\n */\nexport function UniqueArgumentDefinitionNamesRule(context) {\n  return {\n    DirectiveDefinition(directiveNode) {\n      var _directiveNode$argume;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argumentNodes =\n        (_directiveNode$argume = directiveNode.arguments) !== null &&\n        _directiveNode$argume !== void 0\n          ? _directiveNode$argume\n          : [];\n      return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);\n    },\n\n    InterfaceTypeDefinition: checkArgUniquenessPerField,\n    InterfaceTypeExtension: checkArgUniquenessPerField,\n    ObjectTypeDefinition: checkArgUniquenessPerField,\n    ObjectTypeExtension: checkArgUniquenessPerField,\n  };\n\n  function checkArgUniquenessPerField(typeNode) {\n    var _typeNode$fields;\n\n    const typeName = typeNode.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_typeNode$fields = typeNode.fields) !== null &&\n      _typeNode$fields !== void 0\n        ? _typeNode$fields\n        : [];\n\n    for (const fieldDef of fieldNodes) {\n      var _fieldDef$arguments;\n\n      const fieldName = fieldDef.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n      const argumentNodes =\n        (_fieldDef$arguments = fieldDef.arguments) !== null &&\n        _fieldDef$arguments !== void 0\n          ? _fieldDef$arguments\n          : [];\n      checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);\n    }\n\n    return false;\n  }\n\n  function checkArgUniqueness(parentName, argumentNodes) {\n    const seenArgs = groupBy(argumentNodes, (arg) => arg.name.value);\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new GraphQLError(\n            `Argument \"${parentName}(${argName}:)\" can only be defined once.`,\n            argNodes.map((node) => node.name),\n          ),\n        );\n      }\n    }\n\n    return false;\n  }\n}\n", "import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n */\nexport function UniqueArgumentNamesRule(context) {\n  return {\n    Field: checkArgUniqueness,\n    Directive: checkArgUniqueness,\n  };\n\n  function checkArgUniqueness(parentNode) {\n    var _parentNode$arguments;\n\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    const argumentNodes =\n      (_parentNode$arguments = parentNode.arguments) !== null &&\n      _parentNode$arguments !== void 0\n        ? _parentNode$arguments\n        : [];\n    const seenArgs = groupBy(argumentNodes, (arg) => arg.name.value);\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one argument named \"${argName}\".`,\n            argNodes.map((node) => node.name),\n          ),\n        );\n      }\n    }\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique directive names\n *\n * A GraphQL document is only valid if all defined directives have unique names.\n */\nexport function UniqueDirectiveNamesRule(context) {\n  const knownDirectiveNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    DirectiveDefinition(node) {\n      const directiveName = node.name.value;\n\n      if (\n        schema !== null &&\n        schema !== void 0 &&\n        schema.getDirective(directiveName)\n      ) {\n        context.reportError(\n          new GraphQLError(\n            `Directive \"@${directiveName}\" already exists in the schema. It cannot be redefined.`,\n            node.name,\n          ),\n        );\n        return;\n      }\n\n      if (knownDirectiveNames[directiveName]) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one directive named \"@${directiveName}\".`,\n            [knownDirectiveNames[directiveName], node.name],\n          ),\n        );\n      } else {\n        knownDirectiveNames[directiveName] = node.name;\n      }\n\n      return false;\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeExtensionNode,\n} from '../../language/predicates.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all non-repeatable directives at\n * a given location are uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Unique-Per-Location\n */\nexport function UniqueDirectivesPerLocationRule(context) {\n  const uniqueDirectiveMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      uniqueDirectiveMap[def.name.value] = !def.repeatable;\n    }\n  }\n\n  const schemaDirectives = Object.create(null);\n  const typeDirectivesMap = Object.create(null);\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter(node) {\n      if (!('directives' in node) || !node.directives) {\n        return;\n      }\n\n      let seenDirectives;\n\n      if (\n        node.kind === Kind.SCHEMA_DEFINITION ||\n        node.kind === Kind.SCHEMA_EXTENSION\n      ) {\n        seenDirectives = schemaDirectives;\n      } else if (isTypeDefinitionNode(node) || isTypeExtensionNode(node)) {\n        const typeName = node.name.value;\n        seenDirectives = typeDirectivesMap[typeName];\n\n        if (seenDirectives === undefined) {\n          typeDirectivesMap[typeName] = seenDirectives = Object.create(null);\n        }\n      } else {\n        seenDirectives = Object.create(null);\n      }\n\n      for (const directive of node.directives) {\n        const directiveName = directive.name.value;\n\n        if (uniqueDirectiveMap[directiveName]) {\n          if (seenDirectives[directiveName]) {\n            context.reportError(\n              new GraphQLError(\n                `The directive \"@${directiveName}\" can only be used once at this location.`,\n                [seenDirectives[directiveName], directive],\n              ),\n            );\n          } else {\n            seenDirectives[directiveName] = directive;\n          }\n        }\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isEnumType } from '../../type/definition.mjs';\n\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\nexport function UniqueEnumValueNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness,\n  };\n\n  function checkValueUniqueness(node) {\n    var _node$values;\n\n    const typeName = node.name.value;\n\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const valueNodes =\n      (_node$values = node.values) !== null && _node$values !== void 0\n        ? _node$values\n        : [];\n    const valueNames = knownValueNames[typeName];\n\n    for (const valueDef of valueNodes) {\n      const valueName = valueDef.name.value;\n      const existingType = existingTypeMap[typeName];\n\n      if (isEnumType(existingType) && existingType.getValue(valueName)) {\n        context.reportError(\n          new GraphQLError(\n            `Enum value \"${typeName}.${valueName}\" already exists in the schema. It cannot also be defined in this type extension.`,\n            valueDef.name,\n          ),\n        );\n      } else if (valueNames[valueName]) {\n        context.reportError(\n          new GraphQLError(\n            `Enum value \"${typeName}.${valueName}\" can only be defined once.`,\n            [valueNames[valueName], valueDef.name],\n          ),\n        );\n      } else {\n        valueNames[valueName] = valueDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n} from '../../type/definition.mjs';\n\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\nexport function UniqueFieldDefinitionNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness,\n  };\n\n  function checkFieldUniqueness(node) {\n    var _node$fields;\n\n    const typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_node$fields = node.fields) !== null && _node$fields !== void 0\n        ? _node$fields\n        : [];\n    const fieldNames = knownFieldNames[typeName];\n\n    for (const fieldDef of fieldNodes) {\n      const fieldName = fieldDef.name.value;\n\n      if (hasField(existingTypeMap[typeName], fieldName)) {\n        context.reportError(\n          new GraphQLError(\n            `Field \"${typeName}.${fieldName}\" already exists in the schema. It cannot also be defined in this type extension.`,\n            fieldDef.name,\n          ),\n        );\n      } else if (fieldNames[fieldName]) {\n        context.reportError(\n          new GraphQLError(\n            `Field \"${typeName}.${fieldName}\" can only be defined once.`,\n            [fieldNames[fieldName], fieldDef.name],\n          ),\n        );\n      } else {\n        fieldNames[fieldName] = fieldDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName] != null;\n  }\n\n  return false;\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique fragment names\n *\n * A GraphQL document is only valid if all defined fragments have unique names.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-Name-Uniqueness\n */\nexport function UniqueFragmentNamesRule(context) {\n  const knownFragmentNames = Object.create(null);\n  return {\n    OperationDefinition: () => false,\n\n    FragmentDefinition(node) {\n      const fragmentName = node.name.value;\n\n      if (knownFragmentNames[fragmentName]) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one fragment named \"${fragmentName}\".`,\n            [knownFragmentNames[fragmentName], node.name],\n          ),\n        );\n      } else {\n        knownFragmentNames[fragmentName] = node.name;\n      }\n\n      return false;\n    },\n  };\n}\n", "import { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique input field names\n *\n * A GraphQL input object value is only valid if all supplied fields are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Input-Object-Field-Uniqueness\n */\nexport function UniqueInputFieldNamesRule(context) {\n  const knownNameStack = [];\n  let knownNames = Object.create(null);\n  return {\n    ObjectValue: {\n      enter() {\n        knownNameStack.push(knownNames);\n        knownNames = Object.create(null);\n      },\n\n      leave() {\n        const prevKnownNames = knownNameStack.pop();\n        prevKnownNames || invariant(false);\n        knownNames = prevKnownNames;\n      },\n    },\n\n    ObjectField(node) {\n      const fieldName = node.name.value;\n\n      if (knownNames[fieldName]) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one input field named \"${fieldName}\".`,\n            [knownNames[fieldName], node.name],\n          ),\n        );\n      } else {\n        knownNames[fieldName] = node.name;\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique operation names\n *\n * A GraphQL document is only valid if all defined operations have unique names.\n *\n * See https://spec.graphql.org/draft/#sec-Operation-Name-Uniqueness\n */\nexport function UniqueOperationNamesRule(context) {\n  const knownOperationNames = Object.create(null);\n  return {\n    OperationDefinition(node) {\n      const operationName = node.name;\n\n      if (operationName) {\n        if (knownOperationNames[operationName.value]) {\n          context.reportError(\n            new GraphQLError(\n              `There can be only one operation named \"${operationName.value}\".`,\n              [knownOperationNames[operationName.value], operationName],\n            ),\n          );\n        } else {\n          knownOperationNames[operationName.value] = operationName;\n        }\n      }\n\n      return false;\n    },\n\n    FragmentDefinition: () => false,\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\nexport function UniqueOperationTypesRule(context) {\n  const schema = context.getSchema();\n  const definedOperationTypes = Object.create(null);\n  const existingOperationTypes = schema\n    ? {\n        query: schema.getQueryType(),\n        mutation: schema.getMutationType(),\n        subscription: schema.getSubscriptionType(),\n      }\n    : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes,\n  };\n\n  function checkOperationTypes(node) {\n    var _node$operationTypes;\n\n    // See: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    const operationTypesNodes =\n      (_node$operationTypes = node.operationTypes) !== null &&\n      _node$operationTypes !== void 0\n        ? _node$operationTypes\n        : [];\n\n    for (const operationType of operationTypesNodes) {\n      const operation = operationType.operation;\n      const alreadyDefinedOperationType = definedOperationTypes[operation];\n\n      if (existingOperationTypes[operation]) {\n        context.reportError(\n          new GraphQLError(\n            `Type for ${operation} already defined in the schema. It cannot be redefined.`,\n            operationType,\n          ),\n        );\n      } else if (alreadyDefinedOperationType) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one ${operation} type in schema.`,\n            [alreadyDefinedOperationType, operationType],\n          ),\n        );\n      } else {\n        definedOperationTypes[operation] = operationType;\n      }\n    }\n\n    return false;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */\nexport function UniqueTypeNamesRule(context) {\n  const knownTypeNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName,\n  };\n\n  function checkTypeName(node) {\n    const typeName = node.name.value;\n\n    if (schema !== null && schema !== void 0 && schema.getType(typeName)) {\n      context.reportError(\n        new GraphQLError(\n          `Type \"${typeName}\" already exists in the schema. It cannot also be defined in this type definition.`,\n          node.name,\n        ),\n      );\n      return;\n    }\n\n    if (knownTypeNames[typeName]) {\n      context.reportError(\n        new GraphQLError(`There can be only one type named \"${typeName}\".`, [\n          knownTypeNames[typeName],\n          node.name,\n        ]),\n      );\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n\n    return false;\n  }\n}\n", "import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\nexport function UniqueVariableNamesRule(context) {\n  return {\n    OperationDefinition(operationNode) {\n      var _operationNode$variab;\n\n      // See: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const variableDefinitions =\n        (_operationNode$variab = operationNode.variableDefinitions) !== null &&\n        _operationNode$variab !== void 0\n          ? _operationNode$variab\n          : [];\n      const seenVariableDefinitions = groupBy(\n        variableDefinitions,\n        (node) => node.variable.name.value,\n      );\n\n      for (const [variableName, variableNodes] of seenVariableDefinitions) {\n        if (variableNodes.length > 1) {\n          context.reportError(\n            new GraphQLError(\n              `There can be only one variable named \"$${variableName}\".`,\n              variableNodes.map((node) => node.variable.name),\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport {\n  getNamedType,\n  getNullableType,\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isRequiredInputField,\n} from '../../type/definition.mjs';\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n *\n * See https://spec.graphql.org/draft/#sec-Values-of-Correct-Type\n */\nexport function ValuesOfCorrectTypeRule(context) {\n  return {\n    ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      const type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n\n    ObjectValue(node) {\n      const type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n      const fieldNodeMap = keyMap(node.fields, (field) => field.name.value);\n\n      for (const fieldDef of Object.values(type.getFields())) {\n        const fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          const typeStr = inspect(fieldDef.type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${type.name}.${fieldDef.name}\" of required type \"${typeStr}\" was not provided.`,\n              node,\n            ),\n          );\n        }\n      }\n    },\n\n    ObjectField(node) {\n      const parentType = getNamedType(context.getParentInputType());\n      const fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        const suggestions = suggestionList(\n          node.name.value,\n          Object.keys(parentType.getFields()),\n        );\n        context.reportError(\n          new GraphQLError(\n            `Field \"${node.name.value}\" is not defined by type \"${parentType.name}\".` +\n              didYouMean(suggestions),\n            node,\n          ),\n        );\n      }\n    },\n\n    NullValue(node) {\n      const type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(\n          new GraphQLError(\n            `Expected value of type \"${inspect(type)}\", found ${print(node)}.`,\n            node,\n          ),\n        );\n      }\n    },\n\n    EnumValue: (node) => isValidValueNode(context, node),\n    IntValue: (node) => isValidValueNode(context, node),\n    FloatValue: (node) => isValidValueNode(context, node),\n    StringValue: (node) => isValidValueNode(context, node),\n    BooleanValue: (node) => isValidValueNode(context, node),\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidValueNode(context, node) {\n  // Report any error at the full type expected by the location.\n  const locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  const type = getNamedType(locationType);\n\n  if (!isLeafType(type)) {\n    const typeStr = inspect(locationType);\n    context.reportError(\n      new GraphQLError(\n        `Expected value of type \"${typeStr}\", found ${print(node)}.`,\n        node,\n      ),\n    );\n    return;\n  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),\n  // which may throw or return an invalid value to indicate failure.\n\n  try {\n    const parseResult = type.parseLiteral(\n      node,\n      undefined,\n      /* variables */\n    );\n\n    if (parseResult === undefined) {\n      const typeStr = inspect(locationType);\n      context.reportError(\n        new GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${print(node)}.`,\n          node,\n        ),\n      );\n    }\n  } catch (error) {\n    const typeStr = inspect(locationType);\n\n    if (error instanceof GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(\n        new GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${print(node)}; ` +\n            error.message,\n          node,\n          undefined,\n          undefined,\n          undefined,\n          error,\n        ),\n      );\n    }\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isInputType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n *\n * See https://spec.graphql.org/draft/#sec-Variables-Are-Input-Types\n */\nexport function VariablesAreInputTypesRule(context) {\n  return {\n    VariableDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.type);\n\n      if (type !== undefined && !isInputType(type)) {\n        const variableName = node.variable.name.value;\n        const typeName = print(node.type);\n        context.reportError(\n          new GraphQLError(\n            `Variable \"$${variableName}\" cannot be non-input type \"${typeName}\".`,\n            node.type,\n          ),\n        );\n      }\n    },\n  };\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isNonNullType } from '../../type/definition.mjs';\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Variables in allowed position\n *\n * Variable usages must be compatible with the arguments they are passed to.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Usages-are-Allowed\n */\nexport function VariablesInAllowedPositionRule(context) {\n  let varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        varDefMap = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node, type, defaultValue } of usages) {\n          const varName = node.name.value;\n          const varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            const schema = context.getSchema();\n            const varType = typeFromAST(schema, varDef.type);\n\n            if (\n              varType &&\n              !allowedVariableUsage(\n                schema,\n                varType,\n                varDef.defaultValue,\n                type,\n                defaultValue,\n              )\n            ) {\n              const varTypeStr = inspect(varType);\n              const typeStr = inspect(type);\n              context.reportError(\n                new GraphQLError(\n                  `Variable \"$${varName}\" of type \"${varTypeStr}\" used in position expecting type \"${typeStr}\".`,\n                  [varDef, node],\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    },\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(\n  schema,\n  varType,\n  varDefaultValue,\n  locationType,\n  locationDefaultValue,\n) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    const hasNonNullVariableDefaultValue =\n      varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;\n    const hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    const nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}\n", "// Spec Section: \"Executable Definitions\"\nimport { ExecutableDefinitionsRule } from './rules/ExecutableDefinitionsRule.mjs'; // Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\n\nimport { FieldsOnCorrectTypeRule } from './rules/FieldsOnCorrectTypeRule.mjs'; // Spec Section: \"Fragments on Composite Types\"\n\nimport { FragmentsOnCompositeTypesRule } from './rules/FragmentsOnCompositeTypesRule.mjs'; // Spec Section: \"Argument Names\"\n\nimport {\n  KnownArgumentNamesOnDirectivesRule,\n  KnownArgumentNamesRule,\n} from './rules/KnownArgumentNamesRule.mjs'; // Spec Section: \"Directives Are Defined\"\n\nimport { KnownDirectivesRule } from './rules/KnownDirectivesRule.mjs'; // Spec Section: \"Fragment spread target defined\"\n\nimport { KnownFragmentNamesRule } from './rules/KnownFragmentNamesRule.mjs'; // Spec Section: \"Fragment Spread Type Existence\"\n\nimport { KnownTypeNamesRule } from './rules/KnownTypeNamesRule.mjs'; // Spec Section: \"Lone Anonymous Operation\"\n\nimport { LoneAnonymousOperationRule } from './rules/LoneAnonymousOperationRule.mjs'; // SDL-specific validation rules\n\nimport { LoneSchemaDefinitionRule } from './rules/LoneSchemaDefinitionRule.mjs'; // Spec Section: \"Fragments must not form cycles\"\n\nimport { NoFragmentCyclesRule } from './rules/NoFragmentCyclesRule.mjs'; // Spec Section: \"All Variable Used Defined\"\n\nimport { NoUndefinedVariablesRule } from './rules/NoUndefinedVariablesRule.mjs'; // Spec Section: \"Fragments must be used\"\n\nimport { NoUnusedFragmentsRule } from './rules/NoUnusedFragmentsRule.mjs'; // Spec Section: \"All Variables Used\"\n\nimport { NoUnusedVariablesRule } from './rules/NoUnusedVariablesRule.mjs'; // Spec Section: \"Field Selection Merging\"\n\nimport { OverlappingFieldsCanBeMergedRule } from './rules/OverlappingFieldsCanBeMergedRule.mjs'; // Spec Section: \"Fragment spread is possible\"\n\nimport { PossibleFragmentSpreadsRule } from './rules/PossibleFragmentSpreadsRule.mjs';\nimport { PossibleTypeExtensionsRule } from './rules/PossibleTypeExtensionsRule.mjs'; // Spec Section: \"Argument Optionality\"\n\nimport {\n  ProvidedRequiredArgumentsOnDirectivesRule,\n  ProvidedRequiredArgumentsRule,\n} from './rules/ProvidedRequiredArgumentsRule.mjs'; // Spec Section: \"Leaf Field Selections\"\n\nimport { ScalarLeafsRule } from './rules/ScalarLeafsRule.mjs'; // Spec Section: \"Subscriptions with Single Root Field\"\n\nimport { SingleFieldSubscriptionsRule } from './rules/SingleFieldSubscriptionsRule.mjs';\nimport { UniqueArgumentDefinitionNamesRule } from './rules/UniqueArgumentDefinitionNamesRule.mjs'; // Spec Section: \"Argument Uniqueness\"\n\nimport { UniqueArgumentNamesRule } from './rules/UniqueArgumentNamesRule.mjs';\nimport { UniqueDirectiveNamesRule } from './rules/UniqueDirectiveNamesRule.mjs'; // Spec Section: \"Directives Are Unique Per Location\"\n\nimport { UniqueDirectivesPerLocationRule } from './rules/UniqueDirectivesPerLocationRule.mjs';\nimport { UniqueEnumValueNamesRule } from './rules/UniqueEnumValueNamesRule.mjs';\nimport { UniqueFieldDefinitionNamesRule } from './rules/UniqueFieldDefinitionNamesRule.mjs'; // Spec Section: \"Fragment Name Uniqueness\"\n\nimport { UniqueFragmentNamesRule } from './rules/UniqueFragmentNamesRule.mjs'; // Spec Section: \"Input Object Field Uniqueness\"\n\nimport { UniqueInputFieldNamesRule } from './rules/UniqueInputFieldNamesRule.mjs'; // Spec Section: \"Operation Name Uniqueness\"\n\nimport { UniqueOperationNamesRule } from './rules/UniqueOperationNamesRule.mjs';\nimport { UniqueOperationTypesRule } from './rules/UniqueOperationTypesRule.mjs';\nimport { UniqueTypeNamesRule } from './rules/UniqueTypeNamesRule.mjs'; // Spec Section: \"Variable Uniqueness\"\n\nimport { UniqueVariableNamesRule } from './rules/UniqueVariableNamesRule.mjs'; // Spec Section: \"Value Type Correctness\"\n\nimport { ValuesOfCorrectTypeRule } from './rules/ValuesOfCorrectTypeRule.mjs'; // Spec Section: \"Variables are Input Types\"\n\nimport { VariablesAreInputTypesRule } from './rules/VariablesAreInputTypesRule.mjs'; // Spec Section: \"All Variable Usages Are Allowed\"\n\nimport { VariablesInAllowedPositionRule } from './rules/VariablesInAllowedPositionRule.mjs';\n\n/**\n * This set includes all validation rules defined by the GraphQL spec.\n *\n * The order of the rules in this list has been adjusted to lead to the\n * most clear output when encountering multiple validation errors.\n */\nexport const specifiedRules = Object.freeze([\n  ExecutableDefinitionsRule,\n  UniqueOperationNamesRule,\n  LoneAnonymousOperationRule,\n  SingleFieldSubscriptionsRule,\n  KnownTypeNamesRule,\n  FragmentsOnCompositeTypesRule,\n  VariablesAreInputTypesRule,\n  ScalarLeafsRule,\n  FieldsOnCorrectTypeRule,\n  UniqueFragmentNamesRule,\n  KnownFragmentNamesRule,\n  NoUnusedFragmentsRule,\n  PossibleFragmentSpreadsRule,\n  NoFragmentCyclesRule,\n  UniqueVariableNamesRule,\n  NoUndefinedVariablesRule,\n  NoUnusedVariablesRule,\n  KnownDirectivesRule,\n  UniqueDirectivesPerLocationRule,\n  KnownArgumentNamesRule,\n  UniqueArgumentNamesRule,\n  ValuesOfCorrectTypeRule,\n  ProvidedRequiredArgumentsRule,\n  VariablesInAllowedPositionRule,\n  OverlappingFieldsCanBeMergedRule,\n  UniqueInputFieldNamesRule,\n]);\n/**\n * @internal\n */\n\nexport const specifiedSDLRules = Object.freeze([\n  LoneSchemaDefinitionRule,\n  UniqueOperationTypesRule,\n  UniqueTypeNamesRule,\n  UniqueEnumValueNamesRule,\n  UniqueFieldDefinitionNamesRule,\n  UniqueArgumentDefinitionNamesRule,\n  UniqueDirectiveNamesRule,\n  KnownTypeNamesRule,\n  KnownDirectivesRule,\n  UniqueDirectivesPerLocationRule,\n  PossibleTypeExtensionsRule,\n  KnownArgumentNamesOnDirectivesRule,\n  UniqueArgumentNamesRule,\n  UniqueInputFieldNamesRule,\n  ProvidedRequiredArgumentsOnDirectivesRule,\n]);\n", "import { Kind } from '../language/kinds.mjs';\nimport { visit } from '../language/visitor.mjs';\nimport { TypeInfo, visitWithTypeInfo } from '../utilities/TypeInfo.mjs';\n\n/**\n * An instance of this class is passed as the \"this\" context to all validators,\n * allowing access to commonly useful contextual information from within a\n * validation rule.\n */\nexport class ASTValidationContext {\n  constructor(ast, onError) {\n    this._ast = ast;\n    this._fragments = undefined;\n    this._fragmentSpreads = new Map();\n    this._recursivelyReferencedFragments = new Map();\n    this._onError = onError;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ASTValidationContext';\n  }\n\n  reportError(error) {\n    this._onError(error);\n  }\n\n  getDocument() {\n    return this._ast;\n  }\n\n  getFragment(name) {\n    let fragments;\n\n    if (this._fragments) {\n      fragments = this._fragments;\n    } else {\n      fragments = Object.create(null);\n\n      for (const defNode of this.getDocument().definitions) {\n        if (defNode.kind === Kind.FRAGMENT_DEFINITION) {\n          fragments[defNode.name.value] = defNode;\n        }\n      }\n\n      this._fragments = fragments;\n    }\n\n    return fragments[name];\n  }\n\n  getFragmentSpreads(node) {\n    let spreads = this._fragmentSpreads.get(node);\n\n    if (!spreads) {\n      spreads = [];\n      const setsToVisit = [node];\n      let set;\n\n      while ((set = setsToVisit.pop())) {\n        for (const selection of set.selections) {\n          if (selection.kind === Kind.FRAGMENT_SPREAD) {\n            spreads.push(selection);\n          } else if (selection.selectionSet) {\n            setsToVisit.push(selection.selectionSet);\n          }\n        }\n      }\n\n      this._fragmentSpreads.set(node, spreads);\n    }\n\n    return spreads;\n  }\n\n  getRecursivelyReferencedFragments(operation) {\n    let fragments = this._recursivelyReferencedFragments.get(operation);\n\n    if (!fragments) {\n      fragments = [];\n      const collectedNames = Object.create(null);\n      const nodesToVisit = [operation.selectionSet];\n      let node;\n\n      while ((node = nodesToVisit.pop())) {\n        for (const spread of this.getFragmentSpreads(node)) {\n          const fragName = spread.name.value;\n\n          if (collectedNames[fragName] !== true) {\n            collectedNames[fragName] = true;\n            const fragment = this.getFragment(fragName);\n\n            if (fragment) {\n              fragments.push(fragment);\n              nodesToVisit.push(fragment.selectionSet);\n            }\n          }\n        }\n      }\n\n      this._recursivelyReferencedFragments.set(operation, fragments);\n    }\n\n    return fragments;\n  }\n}\nexport class SDLValidationContext extends ASTValidationContext {\n  constructor(ast, schema, onError) {\n    super(ast, onError);\n    this._schema = schema;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'SDLValidationContext';\n  }\n\n  getSchema() {\n    return this._schema;\n  }\n}\nexport class ValidationContext extends ASTValidationContext {\n  constructor(schema, ast, typeInfo, onError) {\n    super(ast, onError);\n    this._schema = schema;\n    this._typeInfo = typeInfo;\n    this._variableUsages = new Map();\n    this._recursiveVariableUsages = new Map();\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ValidationContext';\n  }\n\n  getSchema() {\n    return this._schema;\n  }\n\n  getVariableUsages(node) {\n    let usages = this._variableUsages.get(node);\n\n    if (!usages) {\n      const newUsages = [];\n      const typeInfo = new TypeInfo(this._schema);\n      visit(\n        node,\n        visitWithTypeInfo(typeInfo, {\n          VariableDefinition: () => false,\n\n          Variable(variable) {\n            newUsages.push({\n              node: variable,\n              type: typeInfo.getInputType(),\n              defaultValue: typeInfo.getDefaultValue(),\n            });\n          },\n        }),\n      );\n      usages = newUsages;\n\n      this._variableUsages.set(node, usages);\n    }\n\n    return usages;\n  }\n\n  getRecursiveVariableUsages(operation) {\n    let usages = this._recursiveVariableUsages.get(operation);\n\n    if (!usages) {\n      usages = this.getVariableUsages(operation);\n\n      for (const frag of this.getRecursivelyReferencedFragments(operation)) {\n        usages = usages.concat(this.getVariableUsages(frag));\n      }\n\n      this._recursiveVariableUsages.set(operation, usages);\n    }\n\n    return usages;\n  }\n\n  getType() {\n    return this._typeInfo.getType();\n  }\n\n  getParentType() {\n    return this._typeInfo.getParentType();\n  }\n\n  getInputType() {\n    return this._typeInfo.getInputType();\n  }\n\n  getParentInputType() {\n    return this._typeInfo.getParentInputType();\n  }\n\n  getFieldDef() {\n    return this._typeInfo.getFieldDef();\n  }\n\n  getDirective() {\n    return this._typeInfo.getDirective();\n  }\n\n  getArgument() {\n    return this._typeInfo.getArgument();\n  }\n\n  getEnumValue() {\n    return this._typeInfo.getEnumValue();\n  }\n}\n", "/**\n * Memoizes the provided three-argument function.\n */\nexport function memoize3(fn) {\n  let cache0;\n  return function memoized(a1, a2, a3) {\n    if (cache0 === undefined) {\n      cache0 = new WeakMap();\n    }\n\n    let cache1 = cache0.get(a1);\n\n    if (cache1 === undefined) {\n      cache1 = new WeakMap();\n      cache0.set(a1, cache1);\n    }\n\n    let cache2 = cache1.get(a2);\n\n    if (cache2 === undefined) {\n      cache2 = new WeakMap();\n      cache1.set(a2, cache2);\n    }\n\n    let fnResult = cache2.get(a3);\n\n    if (fnResult === undefined) {\n      fnResult = fn(a1, a2, a3);\n      cache2.set(a3, fnResult);\n    }\n\n    return fnResult;\n  };\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { isPromise } from '../jsutils/isPromise.mjs';\nimport { memoize3 } from '../jsutils/memoize3.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { promiseForObject } from '../jsutils/promiseForObject.mjs';\nimport { promiseReduce } from '../jsutils/promiseReduce.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { locatedError } from '../error/locatedError.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isAbstractType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n} from '../type/definition.mjs';\nimport {\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n} from '../type/introspection.mjs';\nimport { assertValidSchema } from '../type/validate.mjs';\nimport {\n  collectFields,\n  collectSubfields as _collectSubfields,\n} from './collectFields.mjs';\nimport { getArgumentValues, getVariableValues } from './values.mjs';\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\n\nconst collectSubfields = memoize3((exeContext, returnType, fieldNodes) =>\n  _collectSubfields(\n    exeContext.schema,\n    exeContext.fragments,\n    exeContext.variableValues,\n    returnType,\n    fieldNodes,\n  ),\n);\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g `a`\n * 2) fragment \"spreads\" e.g. `...c`\n * 3) inline fragment \"spreads\" e.g. `...on Type { a }`\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\n/**\n * Implements the \"Executing requests\" section of the GraphQL specification.\n *\n * Returns either a synchronous ExecutionResult (if all encountered resolvers\n * are synchronous), or a Promise of an ExecutionResult that will eventually be\n * resolved and never rejected.\n *\n * If the arguments to this function do not result in a legal execution context,\n * a GraphQLError will be thrown immediately explaining the invalid input.\n */\nexport function execute(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 ||\n    devAssert(\n      false,\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\n    );\n  const { schema, document, variableValues, rootValue } = args; // If arguments are missing or incorrect, throw an error.\n\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = buildExecutionContext(args); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext,\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n  //\n  // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n\n  try {\n    const { operation } = exeContext;\n    const result = executeOperation(exeContext, operation, rootValue);\n\n    if (isPromise(result)) {\n      return result.then(\n        (data) => buildResponse(data, exeContext.errors),\n        (error) => {\n          exeContext.errors.push(error);\n          return buildResponse(null, exeContext.errors);\n        },\n      );\n    }\n\n    return buildResponse(result, exeContext.errors);\n  } catch (error) {\n    exeContext.errors.push(error);\n    return buildResponse(null, exeContext.errors);\n  }\n}\n/**\n * Also implements the \"Executing requests\" section of the GraphQL specification.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nexport function executeSync(args) {\n  const result = execute(args); // Assert that the execution was synchronous.\n\n  if (isPromise(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n/**\n * Given a completed execution context and data, build the `{ errors, data }`\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\nfunction buildResponse(data, errors) {\n  return errors.length === 0\n    ? {\n        data,\n      }\n    : {\n        errors,\n        data,\n      };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n *\n * @internal\n */\n\nexport function assertValidExecutionArguments(\n  schema,\n  document,\n  rawVariableValues,\n) {\n  document || devAssert(false, 'Must provide document.'); // If the schema used for execution is invalid, throw an error.\n\n  assertValidSchema(schema); // Variables, if provided, must be an object.\n\n  rawVariableValues == null ||\n    isObjectLike(rawVariableValues) ||\n    devAssert(\n      false,\n      'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.',\n    );\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n *\n * @internal\n */\n\nexport function buildExecutionContext(args) {\n  var _definition$name, _operation$variableDe;\n\n  const {\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues: rawVariableValues,\n    operationName,\n    fieldResolver,\n    typeResolver,\n    subscribeFieldResolver,\n  } = args;\n  let operation;\n  const fragments = Object.create(null);\n\n  for (const definition of document.definitions) {\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (operationName == null) {\n          if (operation !== undefined) {\n            return [\n              new GraphQLError(\n                'Must provide operation name if query contains multiple operations.',\n              ),\n            ];\n          }\n\n          operation = definition;\n        } else if (\n          ((_definition$name = definition.name) === null ||\n          _definition$name === void 0\n            ? void 0\n            : _definition$name.value) === operationName\n        ) {\n          operation = definition;\n        }\n\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n\n      default: // ignore non-executable definitions\n    }\n  }\n\n  if (!operation) {\n    if (operationName != null) {\n      return [new GraphQLError(`Unknown operation named \"${operationName}\".`)];\n    }\n\n    return [new GraphQLError('Must provide an operation.')];\n  } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n\n  const variableDefinitions =\n    (_operation$variableDe = operation.variableDefinitions) !== null &&\n    _operation$variableDe !== void 0\n      ? _operation$variableDe\n      : [];\n  const coercedVariableValues = getVariableValues(\n    schema,\n    variableDefinitions,\n    rawVariableValues !== null && rawVariableValues !== void 0\n      ? rawVariableValues\n      : {},\n    {\n      maxErrors: 50,\n    },\n  );\n\n  if (coercedVariableValues.errors) {\n    return coercedVariableValues.errors;\n  }\n\n  return {\n    schema,\n    fragments,\n    rootValue,\n    contextValue,\n    operation,\n    variableValues: coercedVariableValues.coerced,\n    fieldResolver:\n      fieldResolver !== null && fieldResolver !== void 0\n        ? fieldResolver\n        : defaultFieldResolver,\n    typeResolver:\n      typeResolver !== null && typeResolver !== void 0\n        ? typeResolver\n        : defaultTypeResolver,\n    subscribeFieldResolver:\n      subscribeFieldResolver !== null && subscribeFieldResolver !== void 0\n        ? subscribeFieldResolver\n        : defaultFieldResolver,\n    errors: [],\n  };\n}\n/**\n * Implements the \"Executing operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  const rootType = exeContext.schema.getRootType(operation.operation);\n\n  if (rootType == null) {\n    throw new GraphQLError(\n      `Schema is not configured to execute ${operation.operation} operation.`,\n      operation,\n    );\n  }\n\n  const rootFields = collectFields(\n    exeContext.schema,\n    exeContext.fragments,\n    exeContext.variableValues,\n    rootType,\n    operation.selectionSet,\n  );\n  const path = undefined;\n\n  switch (operation.operation) {\n    case OperationTypeNode.QUERY:\n      return executeFields(exeContext, rootType, rootValue, path, rootFields);\n\n    case OperationTypeNode.MUTATION:\n      return executeFieldsSerially(\n        exeContext,\n        rootType,\n        rootValue,\n        path,\n        rootFields,\n      );\n\n    case OperationTypeNode.SUBSCRIPTION:\n      // TODO: deprecate `subscribe` and move all logic here\n      // Temporary solution until we finish merging execute and subscribe together\n      return executeFields(exeContext, rootType, rootValue, path, rootFields);\n  }\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that must be executed serially.\n */\n\nfunction executeFieldsSerially(\n  exeContext,\n  parentType,\n  sourceValue,\n  path,\n  fields,\n) {\n  return promiseReduce(\n    fields.entries(),\n    (results, [responseName, fieldNodes]) => {\n      const fieldPath = addPath(path, responseName, parentType.name);\n      const result = executeField(\n        exeContext,\n        parentType,\n        sourceValue,\n        fieldNodes,\n        fieldPath,\n      );\n\n      if (result === undefined) {\n        return results;\n      }\n\n      if (isPromise(result)) {\n        return result.then((resolvedResult) => {\n          results[responseName] = resolvedResult;\n          return results;\n        });\n      }\n\n      results[responseName] = result;\n      return results;\n    },\n    Object.create(null),\n  );\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that may be executed in parallel.\n */\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  const results = Object.create(null);\n  let containsPromise = false;\n\n  for (const [responseName, fieldNodes] of fields.entries()) {\n    const fieldPath = addPath(path, responseName, parentType.name);\n    const result = executeField(\n      exeContext,\n      parentType,\n      sourceValue,\n      fieldNodes,\n      fieldPath,\n    );\n\n    if (result !== undefined) {\n      results[responseName] = result;\n\n      if (isPromise(result)) {\n        containsPromise = true;\n      }\n    }\n  } // If there are no promises, we can just return the object\n\n  if (!containsPromise) {\n    return results;\n  } // Otherwise, results is a map from field name to the result of resolving that\n  // field, which is possibly a promise. Return a promise that will return this\n  // same map, but with any promises replaced with the values they resolved to.\n\n  return promiseForObject(results);\n}\n/**\n * Implements the \"Executing fields\" section of the spec\n * In particular, this function figures out the value that the field returns by\n * calling its resolve function, then calls completeValue to complete promises,\n * serialize scalars, or execute the sub-selection-set for objects.\n */\n\nfunction executeField(exeContext, parentType, source, fieldNodes, path) {\n  var _fieldDef$resolve;\n\n  const fieldDef = getFieldDef(exeContext.schema, parentType, fieldNodes[0]);\n\n  if (!fieldDef) {\n    return;\n  }\n\n  const returnType = fieldDef.type;\n  const resolveFn =\n    (_fieldDef$resolve = fieldDef.resolve) !== null &&\n    _fieldDef$resolve !== void 0\n      ? _fieldDef$resolve\n      : exeContext.fieldResolver;\n  const info = buildResolveInfo(\n    exeContext,\n    fieldDef,\n    fieldNodes,\n    parentType,\n    path,\n  ); // Get the resolve function, regardless of if its result is normal or abrupt (error).\n\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    const args = getArgumentValues(\n      fieldDef,\n      fieldNodes[0],\n      exeContext.variableValues,\n    ); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue;\n    const result = resolveFn(source, args, contextValue, info);\n    let completed;\n\n    if (isPromise(result)) {\n      completed = result.then((resolved) =>\n        completeValue(exeContext, returnType, fieldNodes, info, path, resolved),\n      );\n    } else {\n      completed = completeValue(\n        exeContext,\n        returnType,\n        fieldNodes,\n        info,\n        path,\n        result,\n      );\n    }\n\n    if (isPromise(completed)) {\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, (rawError) => {\n        const error = locatedError(rawError, fieldNodes, pathToArray(path));\n        return handleFieldError(error, returnType, exeContext);\n      });\n    }\n\n    return completed;\n  } catch (rawError) {\n    const error = locatedError(rawError, fieldNodes, pathToArray(path));\n    return handleFieldError(error, returnType, exeContext);\n  }\n}\n/**\n * @internal\n */\n\nexport function buildResolveInfo(\n  exeContext,\n  fieldDef,\n  fieldNodes,\n  parentType,\n  path,\n) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldDef.name,\n    fieldNodes,\n    returnType: fieldDef.type,\n    parentType,\n    path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues,\n  };\n}\n\nfunction handleFieldError(error, returnType, exeContext) {\n  // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n  if (isNonNullType(returnType)) {\n    throw error;\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n  exeContext.errors.push(error);\n  return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Value Completion\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by executing all sub-selections.\n */\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n  if (isNonNullType(returnType)) {\n    const completed = completeValue(\n      exeContext,\n      returnType.ofType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n\n    if (completed === null) {\n      throw new Error(\n        `Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`,\n      );\n    }\n\n    return completed;\n  } // If result value is null or undefined then return null.\n\n  if (result == null) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n  if (isListType(returnType)) {\n    return completeListValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n  if (isLeafType(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n  if (isAbstractType(returnType)) {\n    return completeAbstractValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  } // If field type is Object, execute and complete all sub-selections.\n\n  if (isObjectType(returnType)) {\n    return completeObjectValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  }\n  /* c8 ignore next 6 */\n  // Not reachable, all possible output types have been considered.\n\n  false ||\n    invariant(\n      false,\n      'Cannot complete value of unexpected output type: ' + inspect(returnType),\n    );\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\nfunction completeListValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  if (!isIterableObject(result)) {\n    throw new GraphQLError(\n      `Expected Iterable, but did not find one for field \"${info.parentType.name}.${info.fieldName}\".`,\n    );\n  } // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n\n  const itemType = returnType.ofType;\n  let containsPromise = false;\n  const completedResults = Array.from(result, (item, index) => {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    const itemPath = addPath(path, index, undefined);\n\n    try {\n      let completedItem;\n\n      if (isPromise(item)) {\n        completedItem = item.then((resolved) =>\n          completeValue(\n            exeContext,\n            itemType,\n            fieldNodes,\n            info,\n            itemPath,\n            resolved,\n          ),\n        );\n      } else {\n        completedItem = completeValue(\n          exeContext,\n          itemType,\n          fieldNodes,\n          info,\n          itemPath,\n          item,\n        );\n      }\n\n      if (isPromise(completedItem)) {\n        containsPromise = true; // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n        // to take a second callback for the error case.\n\n        return completedItem.then(undefined, (rawError) => {\n          const error = locatedError(\n            rawError,\n            fieldNodes,\n            pathToArray(itemPath),\n          );\n          return handleFieldError(error, itemType, exeContext);\n        });\n      }\n\n      return completedItem;\n    } catch (rawError) {\n      const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n      return handleFieldError(error, itemType, exeContext);\n    }\n  });\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\nfunction completeLeafValue(returnType, result) {\n  const serializedResult = returnType.serialize(result);\n\n  if (serializedResult == null) {\n    throw new Error(\n      `Expected \\`${inspect(returnType)}.serialize(${inspect(result)})\\` to ` +\n        `return non-nullable value, returned: ${inspect(serializedResult)}`,\n    );\n  }\n\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\nfunction completeAbstractValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  var _returnType$resolveTy;\n\n  const resolveTypeFn =\n    (_returnType$resolveTy = returnType.resolveType) !== null &&\n    _returnType$resolveTy !== void 0\n      ? _returnType$resolveTy\n      : exeContext.typeResolver;\n  const contextValue = exeContext.contextValue;\n  const runtimeType = resolveTypeFn(result, contextValue, info, returnType);\n\n  if (isPromise(runtimeType)) {\n    return runtimeType.then((resolvedRuntimeType) =>\n      completeObjectValue(\n        exeContext,\n        ensureValidRuntimeType(\n          resolvedRuntimeType,\n          exeContext,\n          returnType,\n          fieldNodes,\n          info,\n          result,\n        ),\n        fieldNodes,\n        info,\n        path,\n        result,\n      ),\n    );\n  }\n\n  return completeObjectValue(\n    exeContext,\n    ensureValidRuntimeType(\n      runtimeType,\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      result,\n    ),\n    fieldNodes,\n    info,\n    path,\n    result,\n  );\n}\n\nfunction ensureValidRuntimeType(\n  runtimeTypeName,\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  result,\n) {\n  if (runtimeTypeName == null) {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\". Either the \"${returnType.name}\" type should provide a \"resolveType\" function or each possible type should provide an \"isTypeOf\" function.`,\n      fieldNodes,\n    );\n  } // releases before 16.0.0 supported returning `GraphQLObjectType` from `resolveType`\n  // TODO: remove in 17.0.0 release\n\n  if (isObjectType(runtimeTypeName)) {\n    throw new GraphQLError(\n      'Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.',\n    );\n  }\n\n  if (typeof runtimeTypeName !== 'string') {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\" with ` +\n        `value ${inspect(result)}, received \"${inspect(runtimeTypeName)}\".`,\n    );\n  }\n\n  const runtimeType = exeContext.schema.getType(runtimeTypeName);\n\n  if (runtimeType == null) {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" was resolved to a type \"${runtimeTypeName}\" that does not exist inside the schema.`,\n      fieldNodes,\n    );\n  }\n\n  if (!isObjectType(runtimeType)) {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" was resolved to a non-object type \"${runtimeTypeName}\".`,\n      fieldNodes,\n    );\n  }\n\n  if (!exeContext.schema.isSubType(returnType, runtimeType)) {\n    throw new GraphQLError(\n      `Runtime Object type \"${runtimeType.name}\" is not a possible type for \"${returnType.name}\".`,\n      fieldNodes,\n    );\n  }\n\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\nfunction completeObjectValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  // Collect sub-fields to execute to complete this value.\n  const subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes); // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n\n  if (returnType.isTypeOf) {\n    const isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    if (isPromise(isTypeOf)) {\n      return isTypeOf.then((resolvedIsTypeOf) => {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n\n        return executeFields(\n          exeContext,\n          returnType,\n          result,\n          path,\n          subFieldNodes,\n        );\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new GraphQLError(\n    `Expected value of type \"${returnType.name}\" but got: ${inspect(result)}.`,\n    fieldNodes,\n  );\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\nexport const defaultTypeResolver = function (\n  value,\n  contextValue,\n  info,\n  abstractType,\n) {\n  // First, look for `__typename`.\n  if (isObjectLike(value) && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n  const possibleTypes = info.schema.getPossibleTypes(abstractType);\n  const promisedIsTypeOfResults = [];\n\n  for (let i = 0; i < possibleTypes.length; i++) {\n    const type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      const isTypeOfResult = type.isTypeOf(value, contextValue, info);\n\n      if (isPromise(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type.name;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then((isTypeOfResults) => {\n      for (let i = 0; i < isTypeOfResults.length; i++) {\n        if (isTypeOfResults[i]) {\n          return possibleTypes[i].name;\n        }\n      }\n    });\n  }\n};\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\nexport const defaultFieldResolver = function (\n  source,\n  args,\n  contextValue,\n  info,\n) {\n  // ensure source is a value for which property access is acceptable.\n  if (isObjectLike(source) || typeof source === 'function') {\n    const property = source[info.fieldName];\n\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type definition.\n * It has special casing for the three introspection fields,\n * __schema, __type and __typename. __typename is special because\n * it can always be queried as a field, even in situations where no\n * other fields are allowed, like on a Union. __schema and __type\n * could get automatically added to the query type, but that would\n * require mutating type definitions, which would cause issues.\n *\n * @internal\n */\n\nexport function getFieldDef(schema, parentType, fieldNode) {\n  const fieldName = fieldNode.name.value;\n\n  if (\n    fieldName === SchemaMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return SchemaMetaFieldDef;\n  } else if (\n    fieldName === TypeMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return TypeMetaFieldDef;\n  } else if (fieldName === TypeNameMetaFieldDef.name) {\n    return TypeNameMetaFieldDef;\n  }\n\n  return parentType.getFields()[fieldName];\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { mapValue } from '../jsutils/mapValue.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeExtensionNode,\n} from '../language/predicates.mjs';\nimport {\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLInterfaceType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLScalarType,\n  GraphQLUnionType,\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../type/definition.mjs';\nimport {\n  GraphQLDeprecatedDirective,\n  GraphQLDirective,\n  GraphQLSpecifiedByDirective,\n} from '../type/directives.mjs';\nimport {\n  introspectionTypes,\n  isIntrospectionType,\n} from '../type/introspection.mjs';\nimport {\n  isSpecifiedScalarType,\n  specifiedScalarTypes,\n} from '../type/scalars.mjs';\nimport { assertSchema, GraphQLSchema } from '../type/schema.mjs';\nimport { assertValidSDLExtension } from '../validation/validate.mjs';\nimport { getDirectiveValues } from '../execution/values.mjs';\nimport { valueFromAST } from './valueFromAST.mjs';\n\n/**\n * Produces a new schema given an existing schema and a document which may\n * contain GraphQL type extensions and definitions. The original schema will\n * remain unaltered.\n *\n * Because a schema represents a graph of references, a schema cannot be\n * extended without effectively making an entire copy. We do not know until it's\n * too late if subgraphs remain unchanged.\n *\n * This algorithm copies the provided schema, applying extensions while\n * producing the copy. The original schema remains unaltered.\n */\nexport function extendSchema(schema, documentAST, options) {\n  assertSchema(schema);\n  (documentAST != null && documentAST.kind === Kind.DOCUMENT) ||\n    devAssert(false, 'Must provide valid Document AST.');\n\n  if (\n    (options === null || options === void 0 ? void 0 : options.assumeValid) !==\n      true &&\n    (options === null || options === void 0\n      ? void 0\n      : options.assumeValidSDL) !== true\n  ) {\n    assertValidSDLExtension(documentAST, schema);\n  }\n\n  const schemaConfig = schema.toConfig();\n  const extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);\n  return schemaConfig === extendedConfig\n    ? schema\n    : new GraphQLSchema(extendedConfig);\n}\n/**\n * @internal\n */\n\nexport function extendSchemaImpl(schemaConfig, documentAST, options) {\n  var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;\n\n  // Collect the type definitions and extensions found in the document.\n  const typeDefs = [];\n  const typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can\n  // have the same name. For example, a type named \"skip\".\n\n  const directiveDefs = [];\n  let schemaDef; // Schema extensions are collected which may add additional operation types.\n\n  const schemaExtensions = [];\n\n  for (const def of documentAST.definitions) {\n    if (def.kind === Kind.SCHEMA_DEFINITION) {\n      schemaDef = def;\n    } else if (def.kind === Kind.SCHEMA_EXTENSION) {\n      schemaExtensions.push(def);\n    } else if (isTypeDefinitionNode(def)) {\n      typeDefs.push(def);\n    } else if (isTypeExtensionNode(def)) {\n      const extendedTypeName = def.name.value;\n      const existingTypeExtensions = typeExtensionsMap[extendedTypeName];\n      typeExtensionsMap[extendedTypeName] = existingTypeExtensions\n        ? existingTypeExtensions.concat([def])\n        : [def];\n    } else if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      directiveDefs.push(def);\n    }\n  } // If this document contains no new types, extensions, or directives then\n  // return the same unmodified GraphQLSchema instance.\n\n  if (\n    Object.keys(typeExtensionsMap).length === 0 &&\n    typeDefs.length === 0 &&\n    directiveDefs.length === 0 &&\n    schemaExtensions.length === 0 &&\n    schemaDef == null\n  ) {\n    return schemaConfig;\n  }\n\n  const typeMap = Object.create(null);\n\n  for (const existingType of schemaConfig.types) {\n    typeMap[existingType.name] = extendNamedType(existingType);\n  }\n\n  for (const typeNode of typeDefs) {\n    var _stdTypeMap$name;\n\n    const name = typeNode.name.value;\n    typeMap[name] =\n      (_stdTypeMap$name = stdTypeMap[name]) !== null &&\n      _stdTypeMap$name !== void 0\n        ? _stdTypeMap$name\n        : buildType(typeNode);\n  }\n\n  const operationTypes = {\n    // Get the extended root operation types.\n    query: schemaConfig.query && replaceNamedType(schemaConfig.query),\n    mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),\n    subscription:\n      schemaConfig.subscription && replaceNamedType(schemaConfig.subscription),\n    // Then, incorporate schema definition and all schema extensions.\n    ...(schemaDef && getOperationTypes([schemaDef])),\n    ...getOperationTypes(schemaExtensions),\n  }; // Then produce and return a Schema config with these types.\n\n  return {\n    description:\n      (_schemaDef = schemaDef) === null || _schemaDef === void 0\n        ? void 0\n        : (_schemaDef$descriptio = _schemaDef.description) === null ||\n          _schemaDef$descriptio === void 0\n        ? void 0\n        : _schemaDef$descriptio.value,\n    ...operationTypes,\n    types: Object.values(typeMap),\n    directives: [\n      ...schemaConfig.directives.map(replaceDirective),\n      ...directiveDefs.map(buildDirective),\n    ],\n    extensions: Object.create(null),\n    astNode:\n      (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0\n        ? _schemaDef2\n        : schemaConfig.astNode,\n    extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),\n    assumeValid:\n      (_options$assumeValid =\n        options === null || options === void 0\n          ? void 0\n          : options.assumeValid) !== null && _options$assumeValid !== void 0\n        ? _options$assumeValid\n        : false,\n  }; // Below are functions used for producing this schema that have closed over\n  // this scope and have access to the schema, cache, and newly defined types.\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // @ts-expect-error\n      return new GraphQLList(replaceType(type.ofType));\n    }\n\n    if (isNonNullType(type)) {\n      // @ts-expect-error\n      return new GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    // Note: While this could make early assertions to get the correctly\n    // typed values, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    return typeMap[type.name];\n  }\n\n  function replaceDirective(directive) {\n    const config = directive.toConfig();\n    return new GraphQLDirective({\n      ...config,\n      args: mapValue(config.args, extendArg),\n    });\n  }\n\n  function extendNamedType(type) {\n    if (isIntrospectionType(type) || isSpecifiedScalarType(type)) {\n      // Builtin types are not extended.\n      return type;\n    }\n\n    if (isScalarType(type)) {\n      return extendScalarType(type);\n    }\n\n    if (isObjectType(type)) {\n      return extendObjectType(type);\n    }\n\n    if (isInterfaceType(type)) {\n      return extendInterfaceType(type);\n    }\n\n    if (isUnionType(type)) {\n      return extendUnionType(type);\n    }\n\n    if (isEnumType(type)) {\n      return extendEnumType(type);\n    }\n\n    if (isInputObjectType(type)) {\n      return extendInputObjectType(type);\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible type definition nodes have been considered.\n\n    false || invariant(false, 'Unexpected type: ' + inspect(type));\n  }\n\n  function extendInputObjectType(type) {\n    var _typeExtensionsMap$co;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co !== void 0\n        ? _typeExtensionsMap$co\n        : [];\n    return new GraphQLInputObjectType({\n      ...config,\n      fields: () => ({\n        ...mapValue(config.fields, (field) => ({\n          ...field,\n          type: replaceType(field.type),\n        })),\n        ...buildInputFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendEnumType(type) {\n    var _typeExtensionsMap$ty;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null &&\n      _typeExtensionsMap$ty !== void 0\n        ? _typeExtensionsMap$ty\n        : [];\n    return new GraphQLEnumType({\n      ...config,\n      values: { ...config.values, ...buildEnumValueMap(extensions) },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendScalarType(type) {\n    var _typeExtensionsMap$co2;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co2 !== void 0\n        ? _typeExtensionsMap$co2\n        : [];\n    let specifiedByURL = config.specifiedByURL;\n\n    for (const extensionNode of extensions) {\n      var _getSpecifiedByURL;\n\n      specifiedByURL =\n        (_getSpecifiedByURL = getSpecifiedByURL(extensionNode)) !== null &&\n        _getSpecifiedByURL !== void 0\n          ? _getSpecifiedByURL\n          : specifiedByURL;\n    }\n\n    return new GraphQLScalarType({\n      ...config,\n      specifiedByURL,\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendObjectType(type) {\n    var _typeExtensionsMap$co3;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co3 !== void 0\n        ? _typeExtensionsMap$co3\n        : [];\n    return new GraphQLObjectType({\n      ...config,\n      interfaces: () => [\n        ...type.getInterfaces().map(replaceNamedType),\n        ...buildInterfaces(extensions),\n      ],\n      fields: () => ({\n        ...mapValue(config.fields, extendField),\n        ...buildFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendInterfaceType(type) {\n    var _typeExtensionsMap$co4;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co4 !== void 0\n        ? _typeExtensionsMap$co4\n        : [];\n    return new GraphQLInterfaceType({\n      ...config,\n      interfaces: () => [\n        ...type.getInterfaces().map(replaceNamedType),\n        ...buildInterfaces(extensions),\n      ],\n      fields: () => ({\n        ...mapValue(config.fields, extendField),\n        ...buildFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendUnionType(type) {\n    var _typeExtensionsMap$co5;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co5 !== void 0\n        ? _typeExtensionsMap$co5\n        : [];\n    return new GraphQLUnionType({\n      ...config,\n      types: () => [\n        ...type.getTypes().map(replaceNamedType),\n        ...buildUnionTypes(extensions),\n      ],\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendField(field) {\n    return {\n      ...field,\n      type: replaceType(field.type),\n      args: field.args && mapValue(field.args, extendArg),\n    };\n  }\n\n  function extendArg(arg) {\n    return { ...arg, type: replaceType(arg.type) };\n  }\n\n  function getOperationTypes(nodes) {\n    const opTypes = {};\n\n    for (const node of nodes) {\n      var _node$operationTypes;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const operationTypesNodes =\n        /* c8 ignore next */\n        (_node$operationTypes = node.operationTypes) !== null &&\n        _node$operationTypes !== void 0\n          ? _node$operationTypes\n          : [];\n\n      for (const operationType of operationTypesNodes) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        // @ts-expect-error\n        opTypes[operationType.operation] = getNamedType(operationType.type);\n      }\n    }\n\n    return opTypes;\n  }\n\n  function getNamedType(node) {\n    var _stdTypeMap$name2;\n\n    const name = node.name.value;\n    const type =\n      (_stdTypeMap$name2 = stdTypeMap[name]) !== null &&\n      _stdTypeMap$name2 !== void 0\n        ? _stdTypeMap$name2\n        : typeMap[name];\n\n    if (type === undefined) {\n      throw new Error(`Unknown type: \"${name}\".`);\n    }\n\n    return type;\n  }\n\n  function getWrappedType(node) {\n    if (node.kind === Kind.LIST_TYPE) {\n      return new GraphQLList(getWrappedType(node.type));\n    }\n\n    if (node.kind === Kind.NON_NULL_TYPE) {\n      return new GraphQLNonNull(getWrappedType(node.type));\n    }\n\n    return getNamedType(node);\n  }\n\n  function buildDirective(node) {\n    var _node$description;\n\n    return new GraphQLDirective({\n      name: node.name.value,\n      description:\n        (_node$description = node.description) === null ||\n        _node$description === void 0\n          ? void 0\n          : _node$description.value,\n      // @ts-expect-error\n      locations: node.locations.map(({ value }) => value),\n      isRepeatable: node.repeatable,\n      args: buildArgumentMap(node.arguments),\n      astNode: node,\n    });\n  }\n\n  function buildFieldMap(nodes) {\n    const fieldConfigMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$fields;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const nodeFields =\n        /* c8 ignore next */\n        (_node$fields = node.fields) !== null && _node$fields !== void 0\n          ? _node$fields\n          : [];\n\n      for (const field of nodeFields) {\n        var _field$description;\n\n        fieldConfigMap[field.name.value] = {\n          // Note: While this could make assertions to get the correctly typed\n          // value, that would throw immediately while type system validation\n          // with validateSchema() will produce more actionable results.\n          type: getWrappedType(field.type),\n          description:\n            (_field$description = field.description) === null ||\n            _field$description === void 0\n              ? void 0\n              : _field$description.value,\n          args: buildArgumentMap(field.arguments),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field,\n        };\n      }\n    }\n\n    return fieldConfigMap;\n  }\n\n  function buildArgumentMap(args) {\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n    const argsNodes =\n      /* c8 ignore next */\n      args !== null && args !== void 0 ? args : [];\n    const argConfigMap = Object.create(null);\n\n    for (const arg of argsNodes) {\n      var _arg$description;\n\n      // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      // with validateSchema() will produce more actionable results.\n      const type = getWrappedType(arg.type);\n      argConfigMap[arg.name.value] = {\n        type,\n        description:\n          (_arg$description = arg.description) === null ||\n          _arg$description === void 0\n            ? void 0\n            : _arg$description.value,\n        defaultValue: valueFromAST(arg.defaultValue, type),\n        deprecationReason: getDeprecationReason(arg),\n        astNode: arg,\n      };\n    }\n\n    return argConfigMap;\n  }\n\n  function buildInputFieldMap(nodes) {\n    const inputFieldMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$fields2;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const fieldsNodes =\n        /* c8 ignore next */\n        (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0\n          ? _node$fields2\n          : [];\n\n      for (const field of fieldsNodes) {\n        var _field$description2;\n\n        // Note: While this could make assertions to get the correctly typed\n        // value, that would throw immediately while type system validation\n        // with validateSchema() will produce more actionable results.\n        const type = getWrappedType(field.type);\n        inputFieldMap[field.name.value] = {\n          type,\n          description:\n            (_field$description2 = field.description) === null ||\n            _field$description2 === void 0\n              ? void 0\n              : _field$description2.value,\n          defaultValue: valueFromAST(field.defaultValue, type),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field,\n        };\n      }\n    }\n\n    return inputFieldMap;\n  }\n\n  function buildEnumValueMap(nodes) {\n    const enumValueMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$values;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const valuesNodes =\n        /* c8 ignore next */\n        (_node$values = node.values) !== null && _node$values !== void 0\n          ? _node$values\n          : [];\n\n      for (const value of valuesNodes) {\n        var _value$description;\n\n        enumValueMap[value.name.value] = {\n          description:\n            (_value$description = value.description) === null ||\n            _value$description === void 0\n              ? void 0\n              : _value$description.value,\n          deprecationReason: getDeprecationReason(value),\n          astNode: value,\n        };\n      }\n    }\n\n    return enumValueMap;\n  }\n\n  function buildInterfaces(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (node) => {\n        var _node$interfaces$map, _node$interfaces;\n\n        return (\n          /* c8 ignore next */\n          (_node$interfaces$map =\n            (_node$interfaces = node.interfaces) === null ||\n            _node$interfaces === void 0\n              ? void 0\n              : _node$interfaces.map(getNamedType)) !== null &&\n            _node$interfaces$map !== void 0\n            ? _node$interfaces$map\n            : []\n        );\n      },\n    );\n  }\n\n  function buildUnionTypes(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (node) => {\n        var _node$types$map, _node$types;\n\n        return (\n          /* c8 ignore next */\n          (_node$types$map =\n            (_node$types = node.types) === null || _node$types === void 0\n              ? void 0\n              : _node$types.map(getNamedType)) !== null &&\n            _node$types$map !== void 0\n            ? _node$types$map\n            : []\n        );\n      },\n    );\n  }\n\n  function buildType(astNode) {\n    var _typeExtensionsMap$na;\n\n    const name = astNode.name.value;\n    const extensionASTNodes =\n      (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null &&\n      _typeExtensionsMap$na !== void 0\n        ? _typeExtensionsMap$na\n        : [];\n\n    switch (astNode.kind) {\n      case Kind.OBJECT_TYPE_DEFINITION: {\n        var _astNode$description;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLObjectType({\n          name,\n          description:\n            (_astNode$description = astNode.description) === null ||\n            _astNode$description === void 0\n              ? void 0\n              : _astNode$description.value,\n          interfaces: () => buildInterfaces(allNodes),\n          fields: () => buildFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.INTERFACE_TYPE_DEFINITION: {\n        var _astNode$description2;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLInterfaceType({\n          name,\n          description:\n            (_astNode$description2 = astNode.description) === null ||\n            _astNode$description2 === void 0\n              ? void 0\n              : _astNode$description2.value,\n          interfaces: () => buildInterfaces(allNodes),\n          fields: () => buildFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.ENUM_TYPE_DEFINITION: {\n        var _astNode$description3;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLEnumType({\n          name,\n          description:\n            (_astNode$description3 = astNode.description) === null ||\n            _astNode$description3 === void 0\n              ? void 0\n              : _astNode$description3.value,\n          values: buildEnumValueMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.UNION_TYPE_DEFINITION: {\n        var _astNode$description4;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLUnionType({\n          name,\n          description:\n            (_astNode$description4 = astNode.description) === null ||\n            _astNode$description4 === void 0\n              ? void 0\n              : _astNode$description4.value,\n          types: () => buildUnionTypes(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.SCALAR_TYPE_DEFINITION: {\n        var _astNode$description5;\n\n        return new GraphQLScalarType({\n          name,\n          description:\n            (_astNode$description5 = astNode.description) === null ||\n            _astNode$description5 === void 0\n              ? void 0\n              : _astNode$description5.value,\n          specifiedByURL: getSpecifiedByURL(astNode),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.INPUT_OBJECT_TYPE_DEFINITION: {\n        var _astNode$description6;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLInputObjectType({\n          name,\n          description:\n            (_astNode$description6 = astNode.description) === null ||\n            _astNode$description6 === void 0\n              ? void 0\n              : _astNode$description6.value,\n          fields: () => buildInputFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n    }\n  }\n}\nconst stdTypeMap = keyMap(\n  [...specifiedScalarTypes, ...introspectionTypes],\n  (type) => type.name,\n);\n/**\n * Given a field or enum value node, returns the string value for the\n * deprecation reason.\n */\n\nfunction getDeprecationReason(node) {\n  const deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node); // @ts-expect-error validated by `getDirectiveValues`\n\n  return deprecated === null || deprecated === void 0\n    ? void 0\n    : deprecated.reason;\n}\n/**\n * Given a scalar node, returns the string value for the specifiedByURL.\n */\n\nfunction getSpecifiedByURL(node) {\n  const specifiedBy = getDirectiveValues(GraphQLSpecifiedByDirective, node); // @ts-expect-error validated by `getDirectiveValues`\n\n  return specifiedBy === null || specifiedBy === void 0\n    ? void 0\n    : specifiedBy.url;\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { print } from '../language/printer.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNamedType,\n  isNonNullType,\n  isObjectType,\n  isRequiredArgument,\n  isRequiredInputField,\n  isScalarType,\n  isUnionType,\n} from '../type/definition.mjs';\nimport { isSpecifiedScalarType } from '../type/scalars.mjs';\nimport { astFromValue } from './astFromValue.mjs';\nimport { sortValueNode } from './sortValueNode.mjs';\nexport let BreakingChangeType;\n\n(function (BreakingChangeType) {\n  BreakingChangeType['TYPE_REMOVED'] = 'TYPE_REMOVED';\n  BreakingChangeType['TYPE_CHANGED_KIND'] = 'TYPE_CHANGED_KIND';\n  BreakingChangeType['TYPE_REMOVED_FROM_UNION'] = 'TYPE_REMOVED_FROM_UNION';\n  BreakingChangeType['VALUE_REMOVED_FROM_ENUM'] = 'VALUE_REMOVED_FROM_ENUM';\n  BreakingChangeType['REQUIRED_INPUT_FIELD_ADDED'] =\n    'REQUIRED_INPUT_FIELD_ADDED';\n  BreakingChangeType['IMPLEMENTED_INTERFACE_REMOVED'] =\n    'IMPLEMENTED_INTERFACE_REMOVED';\n  BreakingChangeType['FIELD_REMOVED'] = 'FIELD_REMOVED';\n  BreakingChangeType['FIELD_CHANGED_KIND'] = 'FIELD_CHANGED_KIND';\n  BreakingChangeType['REQUIRED_ARG_ADDED'] = 'REQUIRED_ARG_ADDED';\n  BreakingChangeType['ARG_REMOVED'] = 'ARG_REMOVED';\n  BreakingChangeType['ARG_CHANGED_KIND'] = 'ARG_CHANGED_KIND';\n  BreakingChangeType['DIRECTIVE_REMOVED'] = 'DIRECTIVE_REMOVED';\n  BreakingChangeType['DIRECTIVE_ARG_REMOVED'] = 'DIRECTIVE_ARG_REMOVED';\n  BreakingChangeType['REQUIRED_DIRECTIVE_ARG_ADDED'] =\n    'REQUIRED_DIRECTIVE_ARG_ADDED';\n  BreakingChangeType['DIRECTIVE_REPEATABLE_REMOVED'] =\n    'DIRECTIVE_REPEATABLE_REMOVED';\n  BreakingChangeType['DIRECTIVE_LOCATION_REMOVED'] =\n    'DIRECTIVE_LOCATION_REMOVED';\n})(BreakingChangeType || (BreakingChangeType = {}));\n\nexport let DangerousChangeType;\n\n(function (DangerousChangeType) {\n  DangerousChangeType['VALUE_ADDED_TO_ENUM'] = 'VALUE_ADDED_TO_ENUM';\n  DangerousChangeType['TYPE_ADDED_TO_UNION'] = 'TYPE_ADDED_TO_UNION';\n  DangerousChangeType['OPTIONAL_INPUT_FIELD_ADDED'] =\n    'OPTIONAL_INPUT_FIELD_ADDED';\n  DangerousChangeType['OPTIONAL_ARG_ADDED'] = 'OPTIONAL_ARG_ADDED';\n  DangerousChangeType['IMPLEMENTED_INTERFACE_ADDED'] =\n    'IMPLEMENTED_INTERFACE_ADDED';\n  DangerousChangeType['ARG_DEFAULT_VALUE_CHANGE'] = 'ARG_DEFAULT_VALUE_CHANGE';\n})(DangerousChangeType || (DangerousChangeType = {}));\n\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of breaking changes covered by the other functions down below.\n */\nexport function findBreakingChanges(oldSchema, newSchema) {\n  // @ts-expect-error\n  return findSchemaChanges(oldSchema, newSchema).filter(\n    (change) => change.type in BreakingChangeType,\n  );\n}\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of potentially dangerous changes covered by the other functions down below.\n */\n\nexport function findDangerousChanges(oldSchema, newSchema) {\n  // @ts-expect-error\n  return findSchemaChanges(oldSchema, newSchema).filter(\n    (change) => change.type in DangerousChangeType,\n  );\n}\n\nfunction findSchemaChanges(oldSchema, newSchema) {\n  return [\n    ...findTypeChanges(oldSchema, newSchema),\n    ...findDirectiveChanges(oldSchema, newSchema),\n  ];\n}\n\nfunction findDirectiveChanges(oldSchema, newSchema) {\n  const schemaChanges = [];\n  const directivesDiff = diff(\n    oldSchema.getDirectives(),\n    newSchema.getDirectives(),\n  );\n\n  for (const oldDirective of directivesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.DIRECTIVE_REMOVED,\n      description: `${oldDirective.name} was removed.`,\n    });\n  }\n\n  for (const [oldDirective, newDirective] of directivesDiff.persisted) {\n    const argsDiff = diff(oldDirective.args, newDirective.args);\n\n    for (const newArg of argsDiff.added) {\n      if (isRequiredArgument(newArg)) {\n        schemaChanges.push({\n          type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,\n          description: `A required arg ${newArg.name} on directive ${oldDirective.name} was added.`,\n        });\n      }\n    }\n\n    for (const oldArg of argsDiff.removed) {\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,\n        description: `${oldArg.name} was removed from ${oldDirective.name}.`,\n      });\n    }\n\n    if (oldDirective.isRepeatable && !newDirective.isRepeatable) {\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,\n        description: `Repeatable flag was removed from ${oldDirective.name}.`,\n      });\n    }\n\n    for (const location of oldDirective.locations) {\n      if (!newDirective.locations.includes(location)) {\n        schemaChanges.push({\n          type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,\n          description: `${location} was removed from ${oldDirective.name}.`,\n        });\n      }\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findTypeChanges(oldSchema, newSchema) {\n  const schemaChanges = [];\n  const typesDiff = diff(\n    Object.values(oldSchema.getTypeMap()),\n    Object.values(newSchema.getTypeMap()),\n  );\n\n  for (const oldType of typesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED,\n      description: isSpecifiedScalarType(oldType)\n        ? `Standard scalar ${oldType.name} was removed because it is not referenced anymore.`\n        : `${oldType.name} was removed.`,\n    });\n  }\n\n  for (const [oldType, newType] of typesDiff.persisted) {\n    if (isEnumType(oldType) && isEnumType(newType)) {\n      schemaChanges.push(...findEnumTypeChanges(oldType, newType));\n    } else if (isUnionType(oldType) && isUnionType(newType)) {\n      schemaChanges.push(...findUnionTypeChanges(oldType, newType));\n    } else if (isInputObjectType(oldType) && isInputObjectType(newType)) {\n      schemaChanges.push(...findInputObjectTypeChanges(oldType, newType));\n    } else if (isObjectType(oldType) && isObjectType(newType)) {\n      schemaChanges.push(\n        ...findFieldChanges(oldType, newType),\n        ...findImplementedInterfacesChanges(oldType, newType),\n      );\n    } else if (isInterfaceType(oldType) && isInterfaceType(newType)) {\n      schemaChanges.push(\n        ...findFieldChanges(oldType, newType),\n        ...findImplementedInterfacesChanges(oldType, newType),\n      );\n    } else if (oldType.constructor !== newType.constructor) {\n      schemaChanges.push({\n        type: BreakingChangeType.TYPE_CHANGED_KIND,\n        description:\n          `${oldType.name} changed from ` +\n          `${typeKindName(oldType)} to ${typeKindName(newType)}.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findInputObjectTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const fieldsDiff = diff(\n    Object.values(oldType.getFields()),\n    Object.values(newType.getFields()),\n  );\n\n  for (const newField of fieldsDiff.added) {\n    if (isRequiredInputField(newField)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,\n        description: `A required field ${newField.name} on input type ${oldType.name} was added.`,\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,\n        description: `An optional field ${newField.name} on input type ${oldType.name} was added.`,\n      });\n    }\n  }\n\n  for (const oldField of fieldsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: `${oldType.name}.${oldField.name} was removed.`,\n    });\n  }\n\n  for (const [oldField, newField] of fieldsDiff.persisted) {\n    const isSafe = isChangeSafeForInputObjectFieldOrFieldArg(\n      oldField.type,\n      newField.type,\n    );\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description:\n          `${oldType.name}.${oldField.name} changed type from ` +\n          `${String(oldField.type)} to ${String(newField.type)}.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findUnionTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());\n\n  for (const newPossibleType of possibleTypesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.TYPE_ADDED_TO_UNION,\n      description: `${newPossibleType.name} was added to union type ${oldType.name}.`,\n    });\n  }\n\n  for (const oldPossibleType of possibleTypesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,\n      description: `${oldPossibleType.name} was removed from union type ${oldType.name}.`,\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findEnumTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const valuesDiff = diff(oldType.getValues(), newType.getValues());\n\n  for (const newValue of valuesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.VALUE_ADDED_TO_ENUM,\n      description: `${newValue.name} was added to enum type ${oldType.name}.`,\n    });\n  }\n\n  for (const oldValue of valuesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,\n      description: `${oldValue.name} was removed from enum type ${oldType.name}.`,\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findImplementedInterfacesChanges(oldType, newType) {\n  const schemaChanges = [];\n  const interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());\n\n  for (const newInterface of interfacesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,\n      description: `${newInterface.name} added to interfaces implemented by ${oldType.name}.`,\n    });\n  }\n\n  for (const oldInterface of interfacesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,\n      description: `${oldType.name} no longer implements interface ${oldInterface.name}.`,\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findFieldChanges(oldType, newType) {\n  const schemaChanges = [];\n  const fieldsDiff = diff(\n    Object.values(oldType.getFields()),\n    Object.values(newType.getFields()),\n  );\n\n  for (const oldField of fieldsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: `${oldType.name}.${oldField.name} was removed.`,\n    });\n  }\n\n  for (const [oldField, newField] of fieldsDiff.persisted) {\n    schemaChanges.push(...findArgChanges(oldType, oldField, newField));\n    const isSafe = isChangeSafeForObjectOrInterfaceField(\n      oldField.type,\n      newField.type,\n    );\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description:\n          `${oldType.name}.${oldField.name} changed type from ` +\n          `${String(oldField.type)} to ${String(newField.type)}.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findArgChanges(oldType, oldField, newField) {\n  const schemaChanges = [];\n  const argsDiff = diff(oldField.args, newField.args);\n\n  for (const oldArg of argsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.ARG_REMOVED,\n      description: `${oldType.name}.${oldField.name} arg ${oldArg.name} was removed.`,\n    });\n  }\n\n  for (const [oldArg, newArg] of argsDiff.persisted) {\n    const isSafe = isChangeSafeForInputObjectFieldOrFieldArg(\n      oldArg.type,\n      newArg.type,\n    );\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.ARG_CHANGED_KIND,\n        description:\n          `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed type from ` +\n          `${String(oldArg.type)} to ${String(newArg.type)}.`,\n      });\n    } else if (oldArg.defaultValue !== undefined) {\n      if (newArg.defaultValue === undefined) {\n        schemaChanges.push({\n          type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n          description: `${oldType.name}.${oldField.name} arg ${oldArg.name} defaultValue was removed.`,\n        });\n      } else {\n        // Since we looking only for client's observable changes we should\n        // compare default values in the same representation as they are\n        // represented inside introspection.\n        const oldValueStr = stringifyValue(oldArg.defaultValue, oldArg.type);\n        const newValueStr = stringifyValue(newArg.defaultValue, newArg.type);\n\n        if (oldValueStr !== newValueStr) {\n          schemaChanges.push({\n            type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n            description: `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed defaultValue from ${oldValueStr} to ${newValueStr}.`,\n          });\n        }\n      }\n    }\n  }\n\n  for (const newArg of argsDiff.added) {\n    if (isRequiredArgument(newArg)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_ARG_ADDED,\n        description: `A required arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`,\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_ARG_ADDED,\n        description: `An optional arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction isChangeSafeForObjectOrInterfaceField(oldType, newType) {\n  if (isListType(oldType)) {\n    return (\n      // if they're both lists, make sure the underlying types are compatible\n      (isListType(newType) &&\n        isChangeSafeForObjectOrInterfaceField(\n          oldType.ofType,\n          newType.ofType,\n        )) || // moving from nullable to non-null of the same underlying type is safe\n      (isNonNullType(newType) &&\n        isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType))\n    );\n  }\n\n  if (isNonNullType(oldType)) {\n    // if they're both non-null, make sure the underlying types are compatible\n    return (\n      isNonNullType(newType) &&\n      isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType)\n    );\n  }\n\n  return (\n    // if they're both named types, see if their names are equivalent\n    (isNamedType(newType) && oldType.name === newType.name) || // moving from nullable to non-null of the same underlying type is safe\n    (isNonNullType(newType) &&\n      isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType))\n  );\n}\n\nfunction isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {\n  if (isListType(oldType)) {\n    // if they're both lists, make sure the underlying types are compatible\n    return (\n      isListType(newType) &&\n      isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType)\n    );\n  }\n\n  if (isNonNullType(oldType)) {\n    return (\n      // if they're both non-null, make sure the underlying types are\n      // compatible\n      (isNonNullType(newType) &&\n        isChangeSafeForInputObjectFieldOrFieldArg(\n          oldType.ofType,\n          newType.ofType,\n        )) || // moving from non-null to nullable of the same underlying type is safe\n      (!isNonNullType(newType) &&\n        isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType))\n    );\n  } // if they're both named types, see if their names are equivalent\n\n  return isNamedType(newType) && oldType.name === newType.name;\n}\n\nfunction typeKindName(type) {\n  if (isScalarType(type)) {\n    return 'a Scalar type';\n  }\n\n  if (isObjectType(type)) {\n    return 'an Object type';\n  }\n\n  if (isInterfaceType(type)) {\n    return 'an Interface type';\n  }\n\n  if (isUnionType(type)) {\n    return 'a Union type';\n  }\n\n  if (isEnumType(type)) {\n    return 'an Enum type';\n  }\n\n  if (isInputObjectType(type)) {\n    return 'an Input type';\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction stringifyValue(value, type) {\n  const ast = astFromValue(value, type);\n  ast != null || invariant(false);\n  return print(sortValueNode(ast));\n}\n\nfunction diff(oldArray, newArray) {\n  const added = [];\n  const removed = [];\n  const persisted = [];\n  const oldMap = keyMap(oldArray, ({ name }) => name);\n  const newMap = keyMap(newArray, ({ name }) => name);\n\n  for (const oldItem of oldArray) {\n    const newItem = newMap[oldItem.name];\n\n    if (newItem === undefined) {\n      removed.push(oldItem);\n    } else {\n      persisted.push([oldItem, newItem]);\n    }\n  }\n\n  for (const newItem of newArray) {\n    if (oldMap[newItem.name] === undefined) {\n      added.push(newItem);\n    }\n  }\n\n  return {\n    added,\n    persisted,\n    removed,\n  };\n}\n", null],
  "mappings": "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",
  "names": []
}
